import { Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { IntlService } from '@progress/kendo-angular-intl';
import { getDate } from '@progress/kendo-date-math';
import { BusViewService } from './services/bus-view.service';
import { MIN_DATE, MAX_DATE } from '../defaults';
import { dateInRange, getToday, isInRange } from '../util';
/**
 * @hidden
 */
export class HeaderComponent {
    constructor(bus, changeDetector, localization, intl) {
        this.bus = bus;
        this.changeDetector = changeDetector;
        this.localization = localization;
        this.navigate = true;
        this.todayIsInRange = true;
        this.min = new Date(MIN_DATE);
        this.max = new Date(MAX_DATE);
        this.today = new EventEmitter();
        this.intlSubscription = intl.changes.subscribe(this.intlChange.bind(this));
    }
    get getComponentClass() {
        return true;
    }
    ngOnChanges(_) {
        const service = this.bus.service(this.activeView);
        if (!service) {
            return;
        }
        this.todayIsInRange = isInRange(getToday(), getDate(this.min), getDate(this.max));
        this.todayMessage = this.localization.get('today');
        this.navigate = this.bus.canMoveUp(this.activeView);
        this.title = this.currentDate ? service.title(this.currentDate) : '';
    }
    ngOnDestroy() {
        this.intlSubscription.unsubscribe();
    }
    handleTodayClick() {
        if (!this.todayIsInRange) {
            return;
        }
        this.bus.moveToBottom(this.activeView);
        this.today.emit(dateInRange(getToday(), this.min, this.max));
    }
    handleNavigation() {
        if (!this.navigate) {
            return;
        }
        this.bus.moveUp(this.activeView);
    }
    intlChange() {
        const service = this.bus.service(this.activeView);
        if (this.currentDate && service) {
            this.title = service.title(this.currentDate);
            this.changeDetector.markForCheck();
        }
    }
}
HeaderComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'kendo-calendar-header',
                template: `
    <span class="k-button k-bare k-title" [class.k-state-disabled]="!navigate" (click)="handleNavigation()">
        {{title}}
    </span>
    <span class="k-today" [class.k-state-disabled]="!todayIsInRange" (click)="handleTodayClick()">
        {{todayMessage}}
    </span>
  `
            },] },
];
/** @nocollapse */
HeaderComponent.ctorParameters = () => [
    { type: BusViewService, },
    { type: ChangeDetectorRef, },
    { type: LocalizationService, },
    { type: IntlService, },
];
HeaderComponent.propDecorators = {
    'activeView': [{ type: Input },],
    'currentDate': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'today': [{ type: Output },],
    'getComponentClass': [{ type: HostBinding, args: ["class.k-calendar-header",] },],
};
