"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var kendo_angular_popup_1 = require("@progress/kendo-angular-popup");
var core_1 = require("@angular/core");
var utils_1 = require("../../utils");
var preventable_event_1 = require("../../common/preventable-event");
var Subject_1 = require("rxjs/Subject");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var scroll_sync_service_1 = require("../../scrolling/scroll-sync.service");
var contains = function (node, predicate) {
    while (node) {
        if (predicate(node)) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
};
var CloseEvent = /** @class */ (function (_super) {
    tslib_1.__extends(CloseEvent, _super);
    function CloseEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return CloseEvent;
}(preventable_event_1.PreventableEvent));
/**
 * @hidden
 */
var SinglePopupService = /** @class */ (function () {
    function SinglePopupService(popupService, renderer, ngZone, scrollSyncService, localization) {
        var _this = this;
        this.popupService = popupService;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.localization = localization;
        this.onClose = new Subject_1.Subject();
        this.scrollSubscription = scrollSyncService.changes.subscribe(function () { return _this.destroy(); });
    }
    SinglePopupService.prototype.open = function (anchor, template, popupRef) {
        var _this = this;
        var toggle = utils_1.isPresent(popupRef) && this.popupRef === popupRef;
        this.destroy();
        if (!toggle) {
            var direction = this.localization.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchorAlign: { vertical: 'bottom', horizontal: direction },
                popupAlign: { vertical: 'top', horizontal: direction },
                anchor: anchor,
                popupClass: "k-grid-filter-popup",
                content: template,
                positionMode: "absolute"
            });
            this.popupViewPortLeaveSubscription = this.popupRef.popupAnchorViewportLeave
                .subscribe(function () { return _this.destroy(); });
            this.attachClose(anchor);
        }
        return this.popupRef;
    };
    SinglePopupService.prototype.destroy = function () {
        if (this.popupRef) {
            this.detachClose();
            this.popupViewPortLeaveSubscription.unsubscribe();
            this.popupRef.close();
            this.popupRef = null;
        }
    };
    SinglePopupService.prototype.ngOnDestroy = function () {
        this.destroy();
        this.scrollSubscription.unsubscribe();
    };
    SinglePopupService.prototype.detachClose = function () {
        if (this.removeClick) {
            this.removeClick();
        }
    };
    SinglePopupService.prototype.attachClose = function (skipElement) {
        var _this = this;
        this.detachClose();
        this.ngZone.runOutsideAngular(function () {
            return _this.removeClick = _this.renderer.listen("document", "click", function (_a) {
                var target = _a.target;
                if (!contains(target, function (x) { return _this.popupRef.popupElement === x || x === skipElement; })) {
                    var args = new CloseEvent();
                    _this.onClose.next(args);
                    if (!args.isDefaultPrevented()) {
                        _this.destroy();
                    }
                }
            });
        });
    };
    SinglePopupService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    SinglePopupService.ctorParameters = function () { return [
        { type: kendo_angular_popup_1.PopupService, },
        { type: core_1.Renderer2, },
        { type: core_1.NgZone, },
        { type: scroll_sync_service_1.ScrollSyncService, },
        { type: kendo_angular_l10n_1.LocalizationService, },
    ]; };
    return SinglePopupService;
}());
exports.SinglePopupService = SinglePopupService;
