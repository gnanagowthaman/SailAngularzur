{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/editing-directives/editing-directive-base.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/editing-directives/editing-directive-base.js","mtime":1529128643610},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Input } from '@angular/core';\nimport { LocalEditService } from './local-edit.service';\nimport { Observable } from 'rxjs/Observable';\nimport { take } from 'rxjs/operators/take';\n/**\n * @hidden\n */\nvar EditingDirectiveBase = /*@__PURE__*/ (function () {\n    function EditingDirectiveBase(grid, localDataChangesService) {\n        this.grid = grid;\n        this.localDataChangesService = localDataChangesService;\n        this.defaultEditService = this.createDefaultService();\n    }\n    Object.defineProperty(EditingDirectiveBase.prototype, \"editService\", {\n        get: function () {\n            return this.userEditService || this.defaultEditService;\n        },\n        // Consider adding support for the dependency injection of the service to allow for specifying a generic service without code.\n        // The Input should still be kept.\n        /**\n         * The edit service that will handle the operations.\n         */\n        set: function (value) {\n            this.userEditService = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    EditingDirectiveBase.prototype.ngOnInit = function () {\n        this.subscriptions = this.grid\n            .add.subscribe(this.addHandler.bind(this))\n            .add(this.grid.remove.subscribe(this.removeHandler.bind(this)))\n            .add(this.grid.cancel.subscribe(this.cancelHandler.bind(this)))\n            .add(this.grid.save.subscribe(this.saveHandler.bind(this)))\n            .add(this.grid.dataStateChange.subscribe(this.onStateChange.bind(this)));\n    };\n    /**\n     * @hidden\n     */\n    EditingDirectiveBase.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n    };\n    EditingDirectiveBase.prototype.createDefaultService = function () {\n        return new LocalEditService(this.grid, this.localDataChangesService);\n    };\n    EditingDirectiveBase.prototype.addHandler = function () {\n        this.grid.addRow(this.createModel({ isNew: true }));\n    };\n    EditingDirectiveBase.prototype.saveHandler = function (args) {\n        var item = this.saveModel(args);\n        if (item) {\n            if (args.isNew) {\n                this.editService.create(item);\n            }\n            else {\n                this.editService.update(item);\n            }\n        }\n        this.grid.closeRow(args.rowIndex);\n    };\n    EditingDirectiveBase.prototype.cancelHandler = function (_a) {\n        var rowIndex = _a.rowIndex;\n        this.closeEditor(rowIndex);\n    };\n    EditingDirectiveBase.prototype.removeHandler = function (_a) {\n        var _this = this;\n        var dataItem = _a.dataItem;\n        var removeItem = function (shouldRemove) {\n            if (shouldRemove) {\n                _this.editService.remove(dataItem);\n            }\n        };\n        if (this.removeConfirmation) {\n            var result = this.removeConfirmation(dataItem);\n            if (result instanceof Promise) {\n                result.then(removeItem);\n            }\n            else if (result instanceof Observable) {\n                result.pipe(take(1)).subscribe(removeItem);\n            }\n            else {\n                removeItem(result);\n            }\n        }\n        else {\n            removeItem(true);\n        }\n    };\n    EditingDirectiveBase.prototype.onStateChange = function () {\n        this.closeEditor();\n    };\n    EditingDirectiveBase.prototype.closeEditor = function (rowIndex) {\n        this.grid.closeRow(rowIndex);\n    };\n    return EditingDirectiveBase;\n}());\nexport { EditingDirectiveBase };\n",null]}