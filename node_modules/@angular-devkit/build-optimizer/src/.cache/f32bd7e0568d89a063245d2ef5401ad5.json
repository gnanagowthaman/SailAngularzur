{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/navigation-cursor.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/navigation-cursor.js","mtime":1529128659869},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Subject } from 'rxjs/Subject';\n/**\n * @hidden\n */\nvar NavigationCursor = /*@__PURE__*/ (function () {\n    function NavigationCursor(model) {\n        this.model = model;\n        this.changes = new Subject();\n        this.activeRow = 0;\n        this.activeCol = 0;\n        this.virtualCol = 0;\n        this.virtualRow = 0;\n    }\n    Object.defineProperty(NavigationCursor.prototype, \"row\", {\n        get: function () {\n            return this.model.findRowByIndex(this.activeRow);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationCursor.prototype, \"cell\", {\n        get: function () {\n            var _this = this;\n            var row = this.row;\n            if (row) {\n                return row.cells.find(function (c) { return c.colIndex === _this.activeCol; });\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Assumes and announces a new cursor position.\n     */\n    NavigationCursor.prototype.reset = function (rowIndex, colIndex) {\n        if (rowIndex === void 0) {\n            rowIndex = this.activeRow;\n        }\n        if (colIndex === void 0) {\n            colIndex = this.activeCol;\n        }\n        this.virtualRow = rowIndex;\n        this.virtualCol = colIndex;\n        this.activate(rowIndex, colIndex, { force: true });\n    };\n    /**\n     * Assumes a new cursor position without announcing it.\n     */\n    NavigationCursor.prototype.assume = function (rowIndex, colIndex) {\n        if (rowIndex === void 0) {\n            rowIndex = this.activeRow;\n        }\n        if (colIndex === void 0) {\n            colIndex = this.activeCol;\n        }\n        this.virtualRow = rowIndex;\n        this.virtualCol = colIndex;\n        this.activeCol = colIndex;\n        this.activeRow = rowIndex;\n    };\n    /**\n     * Announces a current cursor position to subscribers.\n     */\n    NavigationCursor.prototype.announce = function () {\n        this.changes.next({\n            colIndex: this.activeCol,\n            prevColIndex: this.activeCol,\n            prevRowIndex: this.activeRow,\n            rowIndex: this.activeRow\n        });\n    };\n    NavigationCursor.prototype.isActive = function (rowIndex, colIndex) {\n        return this.activeCol === colIndex && this.activeRow === rowIndex;\n    };\n    NavigationCursor.prototype.moveUp = function (offset) {\n        if (offset === void 0) {\n            offset = 1;\n        }\n        return this.offsetRow(-offset);\n    };\n    NavigationCursor.prototype.moveDown = function (offset) {\n        if (offset === void 0) {\n            offset = 1;\n        }\n        return this.offsetRow(offset);\n    };\n    NavigationCursor.prototype.moveLeft = function (offset) {\n        if (offset === void 0) {\n            offset = 1;\n        }\n        return this.offsetCol(-offset);\n    };\n    NavigationCursor.prototype.moveRight = function (offset) {\n        if (offset === void 0) {\n            offset = 1;\n        }\n        return this.offsetCol(offset);\n    };\n    NavigationCursor.prototype.offsetCol = function (offset) {\n        var _this = this;\n        var prevRow = this.model.findRowByIndex(this.virtualRow);\n        this.virtualCol = Math.max(0, Math.min(this.virtualCol + offset, prevRow.cells.length - 1));\n        var nextColIndex = this.virtualCol;\n        var nextRowIndex = this.virtualRow;\n        var cell = prevRow.cells.find(function (c) { return c.colIndex === _this.virtualCol; });\n        var parentCell = cell.parent;\n        if (parentCell === this.cell) {\n            if (offset < 0) {\n                nextColIndex = parentCell.colIndex - 1;\n            }\n            else {\n                nextColIndex = parentCell.colIndex + parentCell.colSpan;\n            }\n            this.virtualCol = Math.max(0, Math.min(nextColIndex, prevRow.cells.length - 1));\n        }\n        cell = prevRow.cells.find(function (c) { return c.colIndex === _this.virtualCol; });\n        if (cell.parent) {\n            nextColIndex = cell.parent.colIndex;\n            nextRowIndex = cell.parent.rowIndex;\n        }\n        var nextRow = this.model.findRowByIndex(nextRowIndex);\n        nextColIndex = Math.max(0, Math.min(nextColIndex, nextRow.cells.length - 1));\n        return this.activate(nextRowIndex, nextColIndex);\n    };\n    NavigationCursor.prototype.offsetRow = function (offset) {\n        var _this = this;\n        if (this.metadata && this.metadata.isVirtual) {\n            var maxIndex = this.metadata.maxLogicalRowIndex;\n            var nextIndex = Math.max(0, Math.min(this.activeRow + offset, maxIndex));\n            this.virtualRow = nextIndex;\n            return this.activate(nextIndex, this.activeCol);\n        }\n        var prevRow = this.model.findRowByIndex(this.virtualRow);\n        var prevPos = this.model.rowPosition(prevRow);\n        var nextPos = prevPos + offset;\n        var nextRow = this.model.findRowByPosition(nextPos);\n        if (nextRow === prevRow) {\n            return false;\n        }\n        var cell = nextRow.cells.find(function (c) { return c.colIndex === _this.virtualCol; }) || nextRow.cells[0];\n        this.virtualRow = nextRow.index;\n        var nextColIndex = this.virtualCol;\n        if (cell.parent) {\n            if (cell.parent === this.cell) {\n                var parentRow = this.model.findRowByIndex(cell.parent.rowIndex);\n                var parentPos = this.model.rowPosition(parentRow);\n                if (offset < 0) {\n                    nextPos = parentPos - 1;\n                }\n                else {\n                    nextPos = prevPos + cell.parent.rowSpan;\n                }\n                nextRow = this.model.findRowByPosition(nextPos);\n            }\n            else {\n                nextColIndex = cell.parent.colIndex;\n                nextRow = this.model.findRowByIndex(cell.parent.rowIndex);\n            }\n            this.virtualRow = nextRow.index;\n        }\n        return this.activate(nextRow.index, nextColIndex);\n    };\n    // tslint:disable-next-line typedef\n    NavigationCursor.prototype.activate = function (rowIndex, colIndex, _a) {\n        var force = (_a === void 0 ? { force: false } : _a).force;\n        if (!force && this.isActive(rowIndex, colIndex)) {\n            return false;\n        }\n        var prevColIndex = this.activeCol;\n        var prevRowIndex = this.activeRow;\n        this.activeCol = colIndex;\n        this.activeRow = rowIndex;\n        this.changes.next({\n            colIndex: colIndex,\n            prevColIndex: prevColIndex,\n            prevRowIndex: prevRowIndex,\n            rowIndex: rowIndex\n        });\n        return true;\n    };\n    return NavigationCursor;\n}());\nexport { NavigationCursor };\n",null]}