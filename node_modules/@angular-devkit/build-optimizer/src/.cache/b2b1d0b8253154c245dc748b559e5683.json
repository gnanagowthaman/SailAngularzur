{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/textbox/textbox.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/textbox/textbox.directive.js","mtime":1529128639567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostBinding, Output, Renderer2 } from '@angular/core';\n/**\n * Represents the Kendo UI TextBox directive for the Inputs components for Angular.\n * Used to style the textbox of any `input` element.\n *\n * @example\n * ```ts-no-run\n * <input kendoTextBox />\n * <input kendoTextBox type=\"email\" />\n * <input kendoTextBox type=\"password\" />\n * ```\n */\nvar TextBoxDirective = /*@__PURE__*/ (function () {\n    function TextBoxDirective(renderer, inputElement) {\n        this.renderer = renderer;\n        this.inputElement = inputElement;\n        /**\n         * Fires each time the user focuses the `input` element.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the `input` element gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.listeners = [];\n    }\n    Object.defineProperty(TextBoxDirective.prototype, \"hostClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxDirective.prototype, \"value\", {\n        /**\n         * Gets the value of the `input` element.\n         */\n        get: function () {\n            return this.inputElement.nativeElement.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxDirective.prototype, \"id\", {\n        get: function () {\n            return this.inputElement.nativeElement.id;\n        },\n        set: function (id) {\n            this.renderer.setAttribute(this.inputElement.nativeElement, 'id', id);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextBoxDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var input = this.inputElement.nativeElement;\n        this.listeners = [\n            this.renderer.listen(input, 'focus', function () { return _this.onFocus.emit(); }),\n            this.renderer.listen(input, 'blur', function () { return _this.onBlur.emit(); })\n        ];\n    };\n    TextBoxDirective.prototype.ngOnDestroy = function () {\n        this.listeners.forEach(function (listener) { return listener(); });\n    };\n    return TextBoxDirective;\n}());\nexport { TextBoxDirective };\n",null]}