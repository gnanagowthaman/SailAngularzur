{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/databinding.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/databinding.directive.js","mtime":1529128642865},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, Input } from '@angular/core';\nimport { process } from '@progress/kendo-data-query';\nimport { GridComponent } from './grid.component';\nimport { anyChanged, isPresent } from './utils';\nimport { LocalDataChangesService } from './editing/local-data-changes.service';\n/**\n * A Directive which encapsulates the in-memory handling of data operations such as paging, sorting, and grouping.\n */\nvar DataBindingDirective = /*@__PURE__*/ (function () {\n    function DataBindingDirective(grid, localDataChangesService) {\n        this.grid = grid;\n        this.localDataChangesService = localDataChangesService;\n        this.state = {\n            skip: 0\n        };\n        this.originalData = [];\n        if (localDataChangesService) {\n            this.dataChangedSubscription = this.localDataChangesService.changes.subscribe(this.rebind.bind(this));\n        }\n    }\n    Object.defineProperty(DataBindingDirective.prototype, \"skip\", {\n        /**\n         * Defines the number of records to be skipped by the pager.\n         */\n        set: function (value) {\n            if (!isPresent(value)) {\n                value = 0;\n            }\n            this.grid.skip = this.state.skip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"sort\", {\n        /**\n         * Defines the descriptors by which the data will be sorted.\n         */\n        set: function (value) {\n            this.grid.sort = this.state.sort = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"filter\", {\n        /**\n         * Defines the descriptor by which the data will be filtered.\n         */\n        set: function (value) {\n            this.grid.filter = this.state.filter = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"pageSize\", {\n        /**\n         * Defines the page size used by the Grid pager.\n         */\n        set: function (value) {\n            this.grid.pageSize = this.state.take = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"group\", {\n        /**\n         * The descriptors by which the data will be grouped.\n         */\n        set: function (value) {\n            this.grid.group = this.state.group = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataBindingDirective.prototype, \"data\", {\n        /**\n         * The array of data which will be used to populate the Grid.\n         */\n        set: function (value) {\n            this.originalData = value || [];\n            if (this.localDataChangesService) {\n                this.localDataChangesService.data = value;\n            }\n            this.grid.data = this.process(this.state);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.ngOnInit = function () {\n        this.applyState(this.state);\n        this.stateChangeSubscription = this.grid\n            .dataStateChange\n            .subscribe(this.onStateChange.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.ngOnDestroy = function () {\n        this.stateChangeSubscription.unsubscribe();\n        if (this.dataChangedSubscription) {\n            this.dataChangedSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.ngOnChanges = function (changes) {\n        if (anyChanged([\"pageSize\", \"skip\", \"sort\", \"group\", \"filter\"], changes)) {\n            this.rebind();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.onStateChange = function (state) {\n        this.applyState(state);\n        this.rebind();\n    };\n    /**\n     * @hidden\n     */\n    DataBindingDirective.prototype.rebind = function () {\n        this.data = this.originalData;\n        this.notifyDataChange();\n    };\n    /**\n     * Notifies the grid that its data has changed.\n     */\n    DataBindingDirective.prototype.notifyDataChange = function () {\n        this.grid.onDataChange();\n    };\n    DataBindingDirective.prototype.process = function (state) {\n        return process(this.originalData, state);\n    };\n    DataBindingDirective.prototype.applyState = function (_a) {\n        var skip = _a.skip, take = _a.take, sort = _a.sort, group = _a.group, filter = _a.filter;\n        this.skip = skip;\n        this.pageSize = take;\n        this.sort = sort;\n        this.group = group;\n        this.filter = filter;\n    };\n    return DataBindingDirective;\n}());\nexport { DataBindingDirective };\n",null]}