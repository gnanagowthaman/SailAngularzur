{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/timeselector.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/timeselector.component.js","mtime":1529128645770},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ChangeDetectorRef, ChangeDetectionStrategy, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, NgZone, ViewChild, ViewChildren } from '@angular/core';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { cloneDate, getDate } from '@progress/kendo-date-math';\nimport { MIDNIGHT_DATE, MIN_TIME, MAX_TIME } from '../defaults';\nimport { TimeListComponent } from './timelist.component';\nimport { DOMService } from './services/dom.service';\nimport { TIME_PART } from './models/time-part.default';\nimport { getNow, hasChange, isInTimeRange, timeInRange } from '../util';\nimport { generateGetters, generateSnappers, snapTime, valueMerger } from './util';\nvar INTL_DATE_FORMAT = 'https://github.com/telerik/kendo-intl/blob/master/docs/date-formatting/index.md';\nvar formatRegExp = new RegExp(TIME_PART.hour + \"|\" + TIME_PART.minute + \"|\" + TIME_PART.second + \"|\" + TIME_PART.dayperiod + \"|literal\");\nvar listReducer = function (state, list, idx, all) {\n    if (state.length || !list.isActive) {\n        return state;\n    }\n    return [{\n            next: all[idx + 1] || list,\n            prev: all[idx - 1] || list\n        }];\n};\nvar Direction = /*@__PURE__*/ (function (Direction) {\n    Direction[Direction[\"Left\"] = 0] = \"Left\";\n    Direction[Direction[\"Right\"] = 1] = \"Right\";\n    return Direction;\n})({});\n/**\n * @hidden\n *\n * Represents the Kendo UI TimeSelector component for Angular.\n */\nvar TimeSelectorComponent = /*@__PURE__*/ (function () {\n    function TimeSelectorComponent(localization, cdr, element, intl, dom, zone) {\n        this.localization = localization;\n        this.cdr = cdr;\n        this.element = element;\n        this.intl = intl;\n        this.dom = dom;\n        this.zone = zone;\n        /**\n         * Specifies the time format used to display the time list columns.\n         */\n        this.format = 't';\n        /**\n         * Specifies the smallest valid time value.\n         */\n        this.min = cloneDate(MIN_TIME);\n        /**\n         * Specifies the biggest valid time value.\n         */\n        this.max = cloneDate(MAX_TIME);\n        /**\n         * Determines whether to display the **Cancel** button in the popup.\n         */\n        this.cancelButton = true;\n        /**\n         * Determines whether to display the **Now** button in the popup.\n         *\n         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.\n         */\n        this.nowButton = true;\n        /**\n         * Specifies the value of the TimeSelector component.\n         */\n        this.value = null;\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter(); //TODO: test\n        /**\n         * Fires each time the user cancels the selected value.\n         */\n        this.valueReject = new EventEmitter(); //TODO: test\n        /**\n         * Fires each time the user focuses the input element.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timeselector (focus)=\"handleFocus()\"></kendo-timeselector>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log(\"Component is focused\");\n         *   }\n         * }\n         * ```\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timeselector (blur)=\"handleBlur()\"></kendo-timeselector>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log(\"Component is blurred\");\n         *   }\n         * }\n         * ```\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.activeListIndex = -1;\n        this.isActive = false;\n        this.showNowButton = true;\n        this.resolvedPromise = Promise.resolve(null);\n        this._steps = {};\n    }\n    Object.defineProperty(TimeSelectorComponent.prototype, \"steps\", {\n        get: function () {\n            return this._steps;\n        },\n        /**\n         * Configures the incremental steps of the TimeSelector.\n         *\n         * The available options are:\n         * - `hour: Number`&mdash;Controls the incremental step of the hour value.\n         * - `minute: Number`&mdash;Controls the incremental step of the minute value.\n         * - `second: Number`&mdash;Controls the incremental step of the second value.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timeselector format=\"HH:mm:ss\" [steps]=\"steps\"></kendo-timeselector>\n         * `\n         * })\n         * class AppComponent {\n         *   public steps = { hour: 2, minute: 15, second: 15 };\n         * }\n         * ```\n         *\n         * > If the incremental step is greater than `1`, the **Now** button will be hidden.\n         */\n        set: function (steps) {\n            this._steps = steps || {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeSelectorComponent.prototype, \"current\", {\n        get: function () {\n            return this._current;\n        },\n        set: function (value) {\n            this._current = timeInRange(this.snapTime(cloneDate(value || MIDNIGHT_DATE)), this.min, this.max);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeSelectorComponent.prototype, \"componentClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleKeydown = function (event) {\n        var keyCode = event.keyCode;\n        if (keyCode === 13 && !this.hasActiveButton()) {\n            this.handleAccept();\n        }\n        else if (keyCode === 37 || keyCode === 39) {\n            this.focusList(keyCode === 37 ? Direction.Left : Direction.Right);\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions = this.intl.changes.subscribe(this.intlChange.bind(this));\n        if (this.localization) {\n            this.subscriptions.add(this.localization\n                .changes\n                .subscribe(function () { return _this.cdr.markForCheck(); }));\n        }\n        this.dom.calculateHeights(this.element.nativeElement);\n        this.init();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.ngOnChanges = function (_) {\n        this.init();\n        this.verifyFormat();\n    };\n    TimeSelectorComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    /**\n     * Focuses the TimeSelector component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timeselector.focus()\">Focus time picker</button>\n     *  <kendo-timeselector #timeselector></kendo-timeselector>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TimeSelectorComponent.prototype.focus = function () {\n        var list = this.timeLists.first;\n        if (!list) {\n            return;\n        }\n        list.focus();\n    };\n    /**\n     * Blurs the TimeSelector component.\n     */\n    TimeSelectorComponent.prototype.blur = function () {\n        var list = this.timeLists.first;\n        if (!list) {\n            return;\n        }\n        list.blur();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleAccept = function () {\n        this.handleChange(this.mergeValue(cloneDate(this.value || getDate(getNow())), this.current));\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleNow = function () {\n        this.current = getNow();\n        this.handleChange(this.current);\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleReject = function () {\n        this.current = this.value;\n        this.valueReject.emit();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleFocus = function () {\n        var _this = this;\n        if (this.isActive) {\n            return;\n        }\n        this.isActive = true;\n        this.nextTick(function () {\n            if (!_this.hasActiveComponent()) {\n                return;\n            }\n            _this.onFocus.emit();\n        });\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleListFocus = function (index) {\n        this.activeListIndex = index;\n        this.handleFocus();\n    };\n    /**\n     * @hidden\n     */\n    TimeSelectorComponent.prototype.handleBlur = function () {\n        var _this = this;\n        this.activeListIndex = -1;\n        this.nextTick(function () {\n            if (_this.hasActiveComponent()) {\n                return;\n            }\n            _this.isActive = false;\n            _this.cdr.markForCheck();\n            _this.onBlur.emit();\n        });\n    };\n    TimeSelectorComponent.prototype.init = function (changes) {\n        if (!changes || hasChange(changes, 'format')) {\n            this.dateFormatParts = this.intl.splitDateFormat(this.format);\n            this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));\n        }\n        if (!changes || hasChange(changes, 'steps')) {\n            this.snapTime = snapTime(generateSnappers(this.steps));\n        }\n        if (!changes || hasChange(changes, 'value')) {\n            this.current = this.value;\n        }\n        this.showNowButton = !this.hasSteps() && this.nowButton && isInTimeRange(getNow(), this.min, this.max);\n    };\n    TimeSelectorComponent.prototype.focusList = function (dir) {\n        if (!this.timeLists.length) {\n            return;\n        }\n        this.timeLists.reduce(listReducer, [])\n            .map(function (state) { return dir === Direction.Right ? state.next : state.prev; })\n            .map(function (list) { return list && list.focus(); });\n    };\n    TimeSelectorComponent.prototype.handleChange = function (value) {\n        this.value = value;\n        this.valueChange.emit(cloneDate(value));\n    };\n    TimeSelectorComponent.prototype.hasActiveComponent = function () {\n        return this.hasActiveTimeList() || this.hasActiveButton();\n    };\n    TimeSelectorComponent.prototype.hasActiveTimeList = function () {\n        return this.timeLists.length && this.timeLists.reduce(function (isActive, list) { return isActive || list.isActive; }, false);\n    };\n    TimeSelectorComponent.prototype.hasActiveButton = function () {\n        var _this = this;\n        if (!this.accept) {\n            return false;\n        }\n        return [this.accept, this.cancel, this.now].reduce(function (isActive, el) { return isActive || _this.dom.isActive(el); }, false);\n    };\n    TimeSelectorComponent.prototype.hasSteps = function () {\n        var _this = this;\n        var keys = Object.keys(this.steps);\n        return keys.length !== keys.reduce(function (acc, k) { return acc + _this.steps[k]; }, 0);\n    };\n    TimeSelectorComponent.prototype.nextTick = function (f) {\n        var _this = this;\n        this.zone.runOutsideAngular(function () { return _this.resolvedPromise.then(function () { return f(); }); });\n    };\n    TimeSelectorComponent.prototype.verifyFormat = function () {\n        this.dateFormatParts.forEach(function (part) {\n            if (!formatRegExp.test(part.type)) {\n                throw new Error(\"\\n                    Provided format is not supported. Supported specifiers are T|t|H|h|m|s|a. See \" + INTL_DATE_FORMAT + \"\\n                \");\n            }\n        });\n    };\n    TimeSelectorComponent.prototype.intlChange = function () {\n        this.dateFormatParts = this.intl.splitDateFormat(this.format);\n        this.mergeValue = valueMerger(generateGetters(this.dateFormatParts));\n        this.cdr.markForCheck();\n    };\n    return TimeSelectorComponent;\n}());\nexport { TimeSelectorComponent };\n",null]}