{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/navigation.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/navigation.service.js","mtime":1529128659953},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter, Injectable, NgZone, ChangeDetectorRef } from '@angular/core';\nimport { from } from 'rxjs/observable/from';\nimport { filter } from 'rxjs/operators/filter';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { switchMapTo } from 'rxjs/operators/switchMapTo';\nimport { take } from 'rxjs/operators/take';\nimport { takeWhile } from 'rxjs/operators/takeWhile';\nimport { DomEventsService } from '../common/dom-events.service';\nimport { GroupsService } from '../grouping/groups.service';\nimport { PagerContextService } from '../pager/pager-context.service';\nimport { closest, closestInScope, contains, findFocusableChild, isVisible, matchesNodeName } from '../rendering/common/dom-queries';\nimport { CellKeydownEvent } from './cell-keydown-event';\nimport { FocusRoot } from './focus-root';\nimport { NavigationCursor } from './navigation-cursor';\nimport { NavigationModel } from './navigation-model';\nimport { ScrollRequestService } from '../scrolling/scroll-request.service';\nimport { EditService } from '../editing/edit.service';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nvar targetCell = function (target) {\n    var table = closest(target, matchesNodeName('table'));\n    var heading = closestInScope(target, matchesNodeName('th'), table);\n    var cell = closestInScope(target, matchesNodeName('td'), table) || heading;\n    var row = closestInScope(cell, matchesNodeName('tr'), table);\n    if (cell && row) {\n        var rowIndex = row.getAttribute('aria-rowindex');\n        rowIndex = rowIndex ? parseInt(rowIndex, 10) - 1 : null;\n        var colIndex = cell.getAttribute('aria-colindex');\n        colIndex = colIndex ? parseInt(colIndex, 10) - 1 : null;\n        if (rowIndex !== null && colIndex !== null) {\n            return { colIndex: colIndex, rowIndex: rowIndex, element: cell };\n        }\n    }\n};\nvar lastCell = function (row) {\n    var cells = row.cells;\n    return cells[cells.length - 1];\n};\nvar isArrowKey = function (keyCode) {\n    return keyCode === 37 /* left */ || keyCode === 39 /* right */ ||\n        keyCode === 38 /* up */ || keyCode === 40 /* down */;\n};\nvar isNavigationKey = function (keyCode) {\n    return isArrowKey(keyCode) ||\n        keyCode === 33 /* page_up */ || keyCode === 34 /* page_down */ ||\n        keyCode === 36 /* home */ || keyCode === 35 /* end */;\n};\nvar isInput = matchesNodeName('input');\nvar isTextInput = function (element) {\n    return element && isInput(element) && element.type.toLowerCase() === 'text';\n};\nvar isPrintableCharacter = function (str) {\n    return str.length === 1 && str.match(/\\S/);\n};\n/**\n * @hidden\n */\nvar NavigationViewport = /*@__PURE__*/ (function () {\n    function NavigationViewport(firstItemIndex, lastItemIndex) {\n        this.firstItemIndex = firstItemIndex;\n        this.lastItemIndex = lastItemIndex;\n    }\n    NavigationViewport.prototype.containsRow = function (dataRowIndex) {\n        var headerRow = dataRowIndex < 0;\n        return headerRow || (dataRowIndex >= this.firstItemIndex && dataRowIndex < this.lastItemIndex);\n    };\n    return NavigationViewport;\n}());\nexport { NavigationViewport };\n/**\n * @hidden\n */\nvar NavigationService = /*@__PURE__*/ (function () {\n    function NavigationService(zone, domEvents, pagerContextService, scrollRequestService, groupsService, focusRoot, editService, cd, localization) {\n        this.zone = zone;\n        this.domEvents = domEvents;\n        this.pagerContextService = pagerContextService;\n        this.scrollRequestService = scrollRequestService;\n        this.groupsService = groupsService;\n        this.focusRoot = focusRoot;\n        this.editService = editService;\n        this.cd = cd;\n        this.localization = localization;\n        this.cellKeydown = new EventEmitter();\n        this.activeRow = 0;\n        this.alive = false;\n        this.mode = 0 /* Standby */;\n        this.model = new NavigationModel();\n        this.cursor = new NavigationCursor(this.model);\n        this.changes = this.cursor.changes;\n    }\n    Object.defineProperty(NavigationService.prototype, \"metadata\", {\n        get: function () {\n            return this.meta;\n        },\n        set: function (value) {\n            this.meta = value;\n            this.cursor.metadata = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationService.prototype, \"enabled\", {\n        get: function () {\n            return this.alive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationService.prototype, \"activeDataRow\", {\n        get: function () {\n            return this.activeRow - this.meta.headerRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NavigationService.prototype.init = function (meta) {\n        var _this = this;\n        this.alive = true;\n        var isAlive = function () { return _this.alive; };\n        this.metadata = meta;\n        var onStable = function () {\n            return _this.zone.isStable ?\n                from([true]) :\n                _this.zone.onStable.pipe(take(1));\n        };\n        this.cursor.changes\n            .pipe(takeWhile(isAlive))\n            .subscribe(function (args) {\n            _this.activeRow = args.rowIndex;\n            if (_this.meta && _this.meta.isVirtual &&\n                _this.viewport && !_this.viewport.containsRow(_this.activeDataRow)) {\n                _this.scrollRequestService.scrollTo(_this.activeDataRow);\n            }\n        });\n        this.domEvents.focus.pipe(takeWhile(isAlive), switchMap(onStable, function (args) { return args; }))\n            .subscribe(function (args) { return _this.navigateTo(args.target); });\n        this.domEvents.focusOut.pipe(takeWhile(isAlive), filter(function () { return _this.mode !== 0 /* Standby */; }), switchMap(onStable, function (args) { return args; }))\n            .subscribe(function (args) {\n            if (isVisible(args.target)) {\n                _this.mode = 0 /* Standby */;\n            }\n            else {\n                // Focused target is no longer visible,\n                // reset to cursor mode and recapture focus.\n                _this.mode = 1 /* Cursor */;\n            }\n            _this.deactivateElements();\n            _this.cursor.announce();\n        });\n        this.domEvents.windowBlur.pipe(takeWhile(isAlive), filter(function () { return _this.mode !== 0 /* Standby */; }))\n            .subscribe(function () {\n            _this.mode = 0 /* Standby */;\n            _this.deactivateElements();\n            _this.cursor.announce();\n        });\n        // Closing the editor will not always trigger focusout in Firefox.\n        // To get around this, we ensure that the cell is closed after editing.\n        this.editService.changes.pipe(takeWhile(isAlive), filter(function (e) { return e.action !== 'edit' && _this.mode === 2 /* Content */; }), switchMap(onStable, function (args) { return args; }))\n            .subscribe(function () { return _this.leaveCell(); });\n        this.pagerContextService.pageChange\n            .pipe(takeWhile(isAlive))\n            .subscribe(function () { return _this.cursor.reset(0, 0); });\n        this.domEvents.keydown\n            .pipe(takeWhile(isAlive))\n            .subscribe(function (args) {\n            if (_this.mode === 1 /* Cursor */) {\n                _this.onCursorKeydown(args);\n            }\n            else if (_this.mode === 2 /* Content */) {\n                _this.onContentKeydown(args);\n            }\n        });\n        this.domEvents.keydown.pipe(takeWhile(isAlive), filter(function (args) { return args.keyCode === 9 /* tab */ && _this.mode === 2 /* Content */; }), switchMapTo(this.domEvents.focusOut.pipe(take(1))))\n            .subscribe(function () {\n            // Tabbed out of the last focusable content element\n            // reset to cursor mode and recapture focus.\n            _this.leaveCell();\n            _this.cursor.reset();\n        });\n        this.deactivateElements();\n    };\n    NavigationService.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    NavigationService.prototype.registerCell = function (cell) {\n        this.model.registerCell(cell);\n    };\n    NavigationService.prototype.registerRow = function (row) {\n        this.model.registerRow(row);\n    };\n    NavigationService.prototype.unregisterRow = function (row) {\n        this.model.unregisterRow(row);\n    };\n    NavigationService.prototype.isCellFocusable = function (cell) {\n        return this.alive && this.mode !== 2 /* Content */ && this.cursor.isActive(cell.logicalRowIndex, cell.logicalColIndex);\n    };\n    NavigationService.prototype.isCellFocused = function (cell) {\n        return this.mode === 1 /* Cursor */ && this.isCellFocusable(cell);\n    };\n    NavigationService.prototype.navigateTo = function (el) {\n        var cell = targetCell(el);\n        if (!cell) {\n            return;\n        }\n        var oldMode = this.mode;\n        var focusInCell = contains(cell.element, document.activeElement);\n        var focusInActiveRowContent = this.mode === 2 /* Content */ && this.activeRow === cell.rowIndex && el !== cell.element;\n        if (focusInCell) {\n            this.mode = 2 /* Content */;\n            this.cursor.reset(cell.rowIndex, cell.colIndex);\n            this.activateRow();\n        }\n        else if (!focusInActiveRowContent) {\n            this.mode = 1 /* Cursor */;\n            this.deactivateElements();\n            var alreadyActive = this.cursor.isActive(cell.rowIndex, cell.colIndex);\n            var isCursor = oldMode === 1 /* Cursor */ && alreadyActive;\n            if (!isCursor) {\n                this.cursor.reset(cell.rowIndex, cell.colIndex);\n            }\n        }\n    };\n    NavigationService.prototype.tryFocus = function (el) {\n        this.activateElements();\n        var focusable = findFocusableChild(el);\n        if (focusable) {\n            var cell = targetCell(focusable);\n            if (cell) {\n                this.cursor.reset(cell.rowIndex, cell.colIndex);\n                this.deactivateElements();\n                this.enterCell();\n            }\n            focusable.focus();\n        }\n        else {\n            this.deactivateElements();\n        }\n        return !!focusable;\n    };\n    NavigationService.prototype.needsViewport = function () {\n        return this.meta && this.meta.isVirtual;\n    };\n    NavigationService.prototype.setViewport = function (firstItemIndex, lastItemIndex) {\n        this.viewport = new NavigationViewport(firstItemIndex, lastItemIndex);\n        if (this.meta && this.meta.isVirtual && lastItemIndex > 0) {\n            var dataRowIndex = Math.max(0, this.activeRow - this.meta.headerRows);\n            var ahead = firstItemIndex - dataRowIndex;\n            var behind = dataRowIndex - lastItemIndex;\n            if (ahead > 0) {\n                this.cursor.reset(firstItemIndex + this.meta.headerRows + 1);\n            }\n            else if (behind > 0) {\n                this.cursor.reset(lastItemIndex + this.meta.headerRows - 1);\n            }\n        }\n    };\n    NavigationService.prototype.enterCell = function () {\n        var cell = this.cursor.cell;\n        if (!cell) {\n            return;\n        }\n        var group = cell.focusGroup;\n        var focusable = group && group.canFocus();\n        this.mode = focusable ? 2 /* Content */ : 1 /* Cursor */;\n        this.cursor.announce();\n        if (focusable) {\n            this.activateRow();\n            group.focus();\n        }\n    };\n    NavigationService.prototype.leaveCell = function () {\n        var cell = this.cursor.cell;\n        if (!cell) {\n            return;\n        }\n        var group = cell.focusGroup;\n        var focusable = group && group.canFocus();\n        if (!focusable) {\n            this.deactivateElements();\n        }\n        this.mode = 1 /* Cursor */;\n        this.cursor.announce();\n    };\n    NavigationService.prototype.activateElements = function () {\n        this.focusRoot.activate();\n    };\n    NavigationService.prototype.deactivateElements = function () {\n        this.focusRoot.deactivate();\n    };\n    NavigationService.prototype.activateRow = function () {\n        this.cursor.row.cells\n            .forEach(function (cell) { return cell.focusGroup && cell.focusGroup.activate(); });\n    };\n    NavigationService.prototype.onCursorKeydown = function (args) {\n        var _this = this;\n        var preventDefault = false;\n        var modifier = args.ctrlKey || args.metaKey;\n        var step = modifier ? 5 : 1;\n        if (!this.onCellKeydown(args)) {\n            return;\n        }\n        switch (args.keyCode) {\n            case 40 /* down */:\n                preventDefault = this.cursor.moveDown(step);\n                break;\n            case 38 /* up */:\n                preventDefault = this.cursor.moveUp(step);\n                break;\n            case 39 /* right */:\n                preventDefault = this.localization.rtl ? this.cursor.moveLeft() : this.cursor.moveRight();\n                break;\n            case 37 /* left */:\n                preventDefault = this.localization.rtl ? this.cursor.moveRight() : this.cursor.moveLeft();\n                break;\n            case 34 /* page_down */:\n                if (this.metadata.isVirtual && this.viewport) {\n                    this.cursor.reset(this.viewport.lastItemIndex + this.meta.headerRows);\n                    preventDefault = true;\n                }\n                else if (this.metadata.hasPager) {\n                    this.zone.run(function () { return _this.pagerContextService.nextPage(); });\n                    preventDefault = true;\n                }\n                break;\n            case 33 /* page_up */:\n                if (this.metadata.isVirtual && this.viewport) {\n                    var viewportSize = this.viewport.lastItemIndex - this.viewport.firstItemIndex;\n                    var nextItemIndex = Math.max(0, this.viewport.firstItemIndex - viewportSize);\n                    this.cursor.reset(nextItemIndex + this.meta.headerRows);\n                    preventDefault = true;\n                }\n                else if (this.metadata.hasPager) {\n                    this.zone.run(function () { return _this.pagerContextService.prevPage(); });\n                    preventDefault = true;\n                }\n                break;\n            case 36 /* home */:\n                if (modifier) {\n                    if (this.meta.isVirtual) {\n                        this.cursor.reset(this.meta.headerRows, 0);\n                    }\n                    else {\n                        this.cursor.reset(this.model.firstRow.index, 0);\n                    }\n                }\n                else {\n                    var row = this.cursor.row;\n                    var cells = row.cells;\n                    var firstCell = cells[0];\n                    this.cursor.reset(row.index, firstCell.colIndex);\n                }\n                preventDefault = true;\n                break;\n            case 35 /* end */:\n                if (modifier) {\n                    var colIndex = lastCell(this.model.lastRow).colIndex;\n                    if (this.meta.isVirtual) {\n                        var lastRowIndex = this.meta.dataRows - 1;\n                        this.cursor.reset(this.meta.headerRows + lastRowIndex, colIndex);\n                    }\n                    else {\n                        this.cursor.reset(this.model.lastRow.index, colIndex);\n                    }\n                }\n                else {\n                    var row = this.cursor.row;\n                    var colIndex = lastCell(row).colIndex;\n                    this.cursor.reset(row.index, colIndex);\n                }\n                preventDefault = true;\n                break;\n            case 13 /* enter */:\n            case 113 /* f2 */:\n                var groupItem_1 = this.cursor.row.groupItem;\n                if (groupItem_1) {\n                    this.zone.run(function () {\n                        return _this.groupsService.toggleRow(groupItem_1.index, groupItem_1.data);\n                    });\n                }\n                else {\n                    this.enterCell();\n                    if (!this.cursor.cell.focusGroup.isNavigable()) {\n                        preventDefault = true;\n                    }\n                }\n                break;\n            default:\n                if (!args.ctrlKey && !args.altKey && isPrintableCharacter(args.key)) {\n                    this.enterCell();\n                }\n        }\n        if (preventDefault) {\n            args.preventDefault();\n        }\n    };\n    NavigationService.prototype.onContentKeydown = function (args) {\n        if (!this.onCellKeydown(args)) {\n            return;\n        }\n        var confirm = !args.defaultPrevented && args.keyCode === 13 /* enter */ && isTextInput(args.srcElement);\n        if (args.keyCode === 27 /* esc */ || args.keyCode === 113 /* f2 */ || confirm) {\n            this.leaveCell();\n            this.cursor.reset();\n        }\n        else if (isNavigationKey(args.keyCode) && this.cursor.cell.focusGroup.isNavigable()) {\n            this.onCursorKeydown(args);\n            if (args.defaultPrevented) {\n                this.leaveCell();\n            }\n        }\n    };\n    NavigationService.prototype.onCellKeydown = function (args) {\n        if (this.editService.isEditingCell()) {\n            var confirm_1 = args.keyCode === 13 /* enter */;\n            var cancel = args.keyCode === 27 /* esc */;\n            var navigate = isNavigationKey(args.keyCode);\n            if (confirm_1) {\n                this.editService.closeCell(args);\n            }\n            else if (cancel) {\n                this.editService.cancelCell();\n                this.cd.detectChanges();\n            }\n            else if (navigate) {\n                return false;\n            }\n        }\n        this.cellKeydown.emit(new CellKeydownEvent(args));\n        return true;\n    };\n    return NavigationService;\n}());\nexport { NavigationService };\n",null]}