{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/timelist.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/timelist.component.js","mtime":1529128645535},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:component-selector-name  component-selector-type */\nimport { Component, ChangeDetectionStrategy, EventEmitter, ElementRef, HostBinding, HostListener, ViewChild, Renderer2, NgZone, Injector, Input, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\nimport { map } from 'rxjs/operators/map';\nimport { cloneDate } from '@progress/kendo-date-math';\nimport { VirtualizationComponent } from '../virtualization/virtualization.component';\nimport { MAX_TIME, MIDNIGHT_DATE } from '../defaults';\nimport { TIME_PART } from './models/time-part.default';\nimport { DOMService } from './services/dom.service';\nimport { HoursService } from './services/hours.service';\nimport { MinutesService } from './services/minutes.service';\nimport { SecondsService } from './services/seconds.service';\nimport { DayPeriodService } from './services/dayperiod.service';\nvar SNAP_THRESHOLD = 0.05; //% of the item height\nvar SCROLL_THRESHOLD = 2; //< 2px threshold\nvar nil = function () { return (null); };\nvar getters = {\n    35: function (data, _) { return data[data.length - 1]; },\n    36: function (data, _) { return data[0]; },\n    38: function (data, index) { return data[index - 1]; },\n    40: function (data, index) { return data[index + 1]; }\n};\nvar services = (_a = {},\n    _a[TIME_PART.dayperiod] = DayPeriodService,\n    _a[TIME_PART.hour] = HoursService,\n    _a[TIME_PART.minute] = MinutesService,\n    _a[TIME_PART.second] = SecondsService,\n    _a);\n/**\n * @hidden\n */\nvar TimeListComponent = /*@__PURE__*/ (function () {\n    function TimeListComponent(element, injector, dom, renderer, zone) {\n        this.element = element;\n        this.injector = injector;\n        this.dom = dom;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.min = cloneDate(MIDNIGHT_DATE);\n        this.max = cloneDate(MAX_TIME);\n        this.step = 1;\n        this.valueChange = new EventEmitter();\n        this.animateToIndex = true;\n        this.isActive = false;\n        this.skip = 0;\n        this.total = 60;\n        this.data = [];\n        this.indexToScroll = -1;\n    }\n    Object.defineProperty(TimeListComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimeListComponent.prototype, \"componentClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimeListComponent.prototype.keydown = function (e) {\n        var getter = getters[e.keyCode] || nil;\n        var dataItem = getter(this.data, this.service.selectedIndex(this.value));\n        if (dataItem) {\n            this.handleChange(dataItem);\n            e.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimeListComponent.prototype.handleBlur = function () {\n        this.isActive = false;\n    };\n    /**\n     * @hidden\n     */\n    TimeListComponent.prototype.handleFocus = function () {\n        this.isActive = true;\n    };\n    /**\n     * @hidden\n     */\n    TimeListComponent.prototype.handleClick = function () {\n        this.focus();\n    };\n    TimeListComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.part) {\n            this.service = this.injector.get(services[this.part.type]);\n            this.service.configure(this.serviceSettings());\n        }\n        var value = this.value;\n        var valueChanges = changes.value || {};\n        var _a = this.service.limitRange(this.min, this.max, value), min = _a[0], max = _a[1];\n        if (this.service.isRangeChanged(min, max) || changes.min || changes.max || changes.step) {\n            this.data = [];\n            this.service.configure(this.serviceSettings({ min: min, max: max }));\n        }\n        // Skip the rendering of the list whenever possible\n        if (!this.data.length || this.hasMissingValue(valueChanges)) {\n            this.animateToIndex = false;\n            this.data = this.service.data(value);\n        }\n        this.animateToIndex = this.animateToIndex && this.textHasChanged(valueChanges);\n        this.total = this.service.total(value);\n        this.indexToScroll = this.selectedIndex(value);\n    };\n    TimeListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.animateToIndex = true;\n        this.dom.ensureHeights();\n        this.itemHeight = this.dom.itemHeight;\n        this.listHeight = this.dom.timeListHeight;\n        this.topOffset = (this.listHeight - this.itemHeight) / 2;\n        this.bottomOffset = this.listHeight - this.itemHeight;\n        this.topThreshold = this.itemHeight * SNAP_THRESHOLD;\n        this.bottomThreshold = this.itemHeight * (1 - SNAP_THRESHOLD);\n        var translate = \"translateY(\" + this.topOffset + \"px)\";\n        this.style = { transform: translate, '-ms-transform': translate };\n        this.scrollSubscription = this.virtualization\n            .scroll$()\n            .pipe(debounceTime(100), map(function (e) { return e.target.scrollTop; }), map(function (top) { return _this.itemOffset(top); }), map(function (itemOffset) { return _this.virtualization.itemIndex(itemOffset); }))\n            .subscribe(function (index) {\n            _this.virtualization.scrollToIndex(index);\n            _this.handleChange(_this.data[index]);\n        });\n        this.zone.runOutsideAngular(function () {\n            _this.unsubscribeMouseOver = _this.renderer.listen(_this.element.nativeElement, 'mouseover', function () {\n                if (!_this.isActive) {\n                    _this.focus();\n                }\n            });\n        });\n    };\n    TimeListComponent.prototype.ngOnDestroy = function () {\n        this.scrollSubscription.unsubscribe();\n        if (this.unsubscribeMouseOver) {\n            this.unsubscribeMouseOver();\n            this.unsubscribeMouseOver = null;\n        }\n    };\n    TimeListComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.scrollOnce(function (index) { return _this.virtualization.scrollToIndex(index); });\n    };\n    TimeListComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        this.scrollOnce(function (index) {\n            var action = _this.animateToIndex ? 'animateToIndex' : 'scrollToIndex';\n            _this.virtualization[action](index);\n            _this.animateToIndex = true;\n        });\n    };\n    TimeListComponent.prototype.handleChange = function (dataItem) {\n        var candidate = this.service.apply(this.value, dataItem.value);\n        if (this.value.getTime() === candidate.getTime()) {\n            return;\n        }\n        this.indexToScroll = this.data.indexOf(dataItem);\n        this.value = candidate;\n        this.valueChange.emit(candidate);\n    };\n    /**\n     * Focuses the host element of the TimeList.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timelist.focus()\">Focus TimeList</button>\n     *  <kendo-timelist #timelist></kendo-timelist>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TimeListComponent.prototype.focus = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.focus();\n    };\n    /**\n     * Blurs the TimeList component.\n     */\n    TimeListComponent.prototype.blur = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.blur();\n    };\n    TimeListComponent.prototype.itemOffset = function (scrollTop) {\n        var valueIndex = this.selectedIndex(this.value);\n        var activeIndex = this.virtualization.activeIndex();\n        var offset = this.virtualization.itemOffset(activeIndex);\n        var distance = Math.abs(Math.ceil(scrollTop) - offset);\n        if (valueIndex === activeIndex && distance < SCROLL_THRESHOLD) {\n            return offset;\n        }\n        var scrollUp = valueIndex > activeIndex;\n        var moveToNext = scrollUp && distance >= this.bottomThreshold || !scrollUp && distance > this.topThreshold;\n        return moveToNext ? this.virtualization.itemOffset(activeIndex + 1) : offset;\n    };\n    TimeListComponent.prototype.hasMissingValue = function (_a) {\n        var previousValue = _a.previousValue, currentValue = _a.currentValue;\n        var isPreviousMissing = previousValue && !this.service.valueInList(previousValue);\n        var isCurrentMissing = currentValue && !this.service.valueInList(currentValue);\n        return isPreviousMissing || isCurrentMissing;\n    };\n    TimeListComponent.prototype.scrollOnce = function (action) {\n        if (this.indexToScroll !== -1) {\n            action(this.indexToScroll);\n            this.indexToScroll = -1;\n        }\n    };\n    TimeListComponent.prototype.serviceSettings = function (settings) {\n        var defaults = {\n            boundRange: false,\n            insertUndividedMax: false,\n            max: this.max,\n            min: this.min,\n            part: this.part,\n            step: this.step\n        };\n        var result = Object.assign({}, defaults, settings);\n        result.boundRange = result.part.type !== 'hour';\n        return result;\n    };\n    TimeListComponent.prototype.selectedIndex = function (value) {\n        if (!value) {\n            return -1;\n        }\n        return this.service.selectedIndex(value);\n    };\n    TimeListComponent.prototype.textHasChanged = function (_a) {\n        var previousValue = _a.previousValue, currentValue = _a.currentValue;\n        if (!previousValue || !currentValue) {\n            return false;\n        }\n        var oldData = this.data[this.selectedIndex(previousValue)];\n        var newData = this.data[this.selectedIndex(currentValue)];\n        return oldData && newData && oldData.text !== newData.text;\n    };\n    return TimeListComponent;\n}());\nexport { TimeListComponent };\nvar _a;\n",null]}