{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/templates/decade-cell-template.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/templates/decade-cell-template.directive.js","mtime":1529128638572},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, TemplateRef } from '@angular/core';\n/**\n * Used for rendering the decade cell content of the Calendar.\n *\n * To define the decade cell template, nest an `<ng-template>` tag with the `kendoCalendarDecadeCellTemplate` directive\n * inside the component tag.\n *\n * The template context is set to the current component. To get a reference to the current date, use the `let-date` directive.\n * To provide more details about the current decade cell, get a reference to the current `cellContext`\n * by using the `let-cellContext` directive.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * styles: ['.custom { color: red; }'],\n * template: `\n *  <kendo-calendar [activeView]=\"activeView\">\n *    <ng-template kendoCalendarDecadeCellTemplate let-context=\"cellContext\">\n *      <span class=\"custom\">{{context.formattedValue}}</span>\n *    </ng-template>\n *  </kendo-calendar>\n * `\n * })\n * class AppComponent {\n *  public activeView: CalendarView = 'decade';\n * }\n * ```\n *\n * For more examples, refer to the section on [templates]({% slug overview_calendar %}#toc-templates).\n */\nvar DecadeCellTemplateDirective = /*@__PURE__*/ (function () {\n    function DecadeCellTemplateDirective(templateRef) {\n        this.templateRef = templateRef;\n    }\n    return DecadeCellTemplateDirective;\n}());\nexport { DecadeCellTemplateDirective };\n",null]}