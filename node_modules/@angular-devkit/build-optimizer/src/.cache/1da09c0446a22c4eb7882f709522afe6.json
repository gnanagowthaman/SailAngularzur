{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/rendering/table-body.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/rendering/table-body.component.js","mtime":1529128665333},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, NgZone, Renderer2, ElementRef } from '@angular/core';\nimport { DetailsService } from './details/details.service';\nimport { GroupsService } from '../grouping/groups.service';\nimport { ChangeNotificationService } from '../data/change-notification.service';\nimport { isChanged, isPresent } from '../utils';\nimport { EditService } from '../editing/edit.service';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { columnsToRender, columnsSpan } from \"../columns/column-common\";\nimport { closest, closestInScope, hasClasses, isFocusable, matchesClasses, matchesNodeName } from './common/dom-queries';\nimport { DomEventsService } from '../common/dom-events.service';\nimport { SelectionService } from \"../selection/selection.service\";\nimport { ColumnInfoService } from \"../common/column-info.service\";\nimport { hasFilterRow } from '../filtering/filterable';\nimport { NavigationService } from '../navigation/navigation.service';\nvar NON_DATA_CELL_CLASSES = 'k-hierarchy-cell k-detail-cell k-group-cell';\nvar NON_DATA_ROW_CLASSES = 'k-grouping-row k-group-footer k-detail-row k-grid-norecords';\nvar IGNORE_TARGET_CLASSSES = 'k-icon';\nvar IGNORE_CONTAINER_CLASSES = 'k-widget k-grid-ignore-click';\nvar columnCellIndex = function (cell, cells) {\n    var cellIndex = 0;\n    for (var idx = 0; idx < cells.length; idx++) {\n        if (cells[idx] === cell) {\n            return cellIndex;\n        }\n        if (!hasClasses(cells[idx], 'k-hierarchy-cell k-group-cell')) {\n            cellIndex++;\n        }\n    }\n};\n/**\n * @hidden\n */\nvar TableBodyComponent = /*@__PURE__*/ (function () {\n    function TableBodyComponent(detailsService, groupsService, changeNotification, editService, localization, ngZone, renderer, element, domEvents, selectionService, columnInfoService, navigationService) {\n        var _this = this;\n        this.detailsService = detailsService;\n        this.groupsService = groupsService;\n        this.changeNotification = changeNotification;\n        this.editService = editService;\n        this.localization = localization;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.element = element;\n        this.domEvents = domEvents;\n        this.selectionService = selectionService;\n        this.columnInfoService = columnInfoService;\n        this.navigationService = navigationService;\n        this.columns = [];\n        this.groups = [];\n        this.skip = 0;\n        this.noRecordsText = this.localization.get('noRecords');\n        this.skipGroupDecoration = false;\n        this.showGroupFooters = false;\n        this.lockedColumnsCount = 0;\n        this.totalColumnsCount = 0;\n        this.rowClass = function () { return null; };\n        this.cellKeydownSubscription = this.navigationService.cellKeydown.subscribe(function (args) { return _this.cellKeydownHandler(args); });\n    }\n    Object.defineProperty(TableBodyComponent.prototype, \"newDataItem\", {\n        get: function () {\n            return this.editService.newDataItem;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"unlockedColumnsCount\", {\n        // Number of unlocked columns in the next table, if any\n        get: function () {\n            return this.totalColumnsCount - this.lockedColumnsCount - this.columns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableBodyComponent.prototype.toggleRow = function (index, dataItem) {\n        this.detailsService.toggleRow(index, dataItem);\n        return false;\n    };\n    TableBodyComponent.prototype.trackByFn = function (_, item) {\n        return item.data ? item.data : item;\n    };\n    TableBodyComponent.prototype.isExpanded = function (index) {\n        return this.detailsService.isExpanded(index);\n    };\n    TableBodyComponent.prototype.detailButtonStyles = function (index) {\n        var expanded = this.isExpanded(index);\n        return { 'k-minus': expanded, 'k-plus': !expanded };\n    };\n    TableBodyComponent.prototype.isGroup = function (item) {\n        return item.type === 'group';\n    };\n    TableBodyComponent.prototype.isDataItem = function (item) {\n        return !this.isGroup(item) && !this.isFooter(item);\n    };\n    TableBodyComponent.prototype.isFooter = function (item) {\n        return item.type === 'footer';\n    };\n    TableBodyComponent.prototype.isInExpandedGroup = function (item) {\n        return this.groupsService.isInExpandedGroup(item.groupIndex, false);\n    };\n    TableBodyComponent.prototype.isParentGroupExpanded = function (item) {\n        return this.groupsService.isInExpandedGroup(item.index || item.groupIndex);\n    };\n    TableBodyComponent.prototype.isOdd = function (item) {\n        return item.index % 2 !== 0;\n    };\n    TableBodyComponent.prototype.isSelectable = function () {\n        return this.selectable && this.selectable.enabled !== false;\n    };\n    TableBodyComponent.prototype.isRowSelected = function (item) {\n        return this.selectionService.isSelected(item.index);\n    };\n    TableBodyComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged(\"columns\", changes, false)) {\n            this.changeNotification.notify();\n        }\n    };\n    TableBodyComponent.prototype.logicalRowIndex = function (rowIndex) {\n        var absoluteRowIndex = 1 + this.skip + rowIndex;\n        var addRowOffset = this.editService.hasNewItem ? 1 : 0;\n        var filterRowOffset = hasFilterRow(this.filterable) ? 1 : 0;\n        var headerRowCount = this.columnInfoService.totalLevels + filterRowOffset + addRowOffset;\n        return absoluteRowIndex + headerRowCount;\n    };\n    TableBodyComponent.prototype.addRowLogicalIndex = function () {\n        return this.columnInfoService.totalLevels + 1;\n    };\n    TableBodyComponent.prototype.logicalColIndex = function (colIndex) {\n        return this.lockedColumnsCount + colIndex;\n    };\n    TableBodyComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            var clickHandler = _this.clickHandler.bind(_this);\n            var mousedownSubscription = _this.renderer.listen(_this.element.nativeElement, 'mousedown', clickHandler);\n            var clickSubscription = _this.renderer.listen(_this.element.nativeElement, 'click', clickHandler);\n            var contextmenuSubscription = _this.renderer.listen(_this.element.nativeElement, 'contextmenu', clickHandler);\n            _this.clickSubscription = function () {\n                mousedownSubscription();\n                clickSubscription();\n                contextmenuSubscription();\n            };\n        });\n        var originalNoRecordText = this.localization.get('noRecords');\n        this.localization.changes.subscribe(function () {\n            if (_this.noRecordsText === originalNoRecordText) {\n                _this.noRecordsText = _this.localization.get('noRecords');\n                originalNoRecordText = _this.noRecordsText;\n            }\n        });\n    };\n    TableBodyComponent.prototype.ngOnDestroy = function () {\n        if (this.clickSubscription) {\n            this.clickSubscription();\n        }\n        this.cellKeydownSubscription.unsubscribe();\n    };\n    Object.defineProperty(TableBodyComponent.prototype, \"columnsSpan\", {\n        get: function () {\n            return columnsSpan(this.columns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"colSpan\", {\n        get: function () {\n            return this.columnsSpan + this.groups.length + (isPresent(this.detailTemplate) ? 1 : 0);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TableBodyComponent.prototype, \"footerColumns\", {\n        get: function () {\n            return columnsToRender(this.columns);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableBodyComponent.prototype.showGroupHeader = function (item) {\n        return !item.data.skipHeader;\n    };\n    TableBodyComponent.prototype.clickHandler = function (eventArg) {\n        var target = eventArg.target;\n        var cell = closest(target, matchesNodeName('td'));\n        var row = closest(cell, matchesNodeName('tr'));\n        var body = closest(row, matchesNodeName('tbody'));\n        if (cell && !hasClasses(cell, NON_DATA_CELL_CLASSES) &&\n            !hasClasses(row, NON_DATA_ROW_CLASSES) &&\n            body === this.element.nativeElement) {\n            this.editService.preventCellClose();\n            var focusable = target !== cell && isFocusable(target, false);\n            if (!focusable && !matchesNodeName('label')(target) && !hasClasses(target, IGNORE_TARGET_CLASSSES) &&\n                !closestInScope(target, matchesClasses(IGNORE_CONTAINER_CLASSES), cell)) {\n                var args = this.cellClickArgs(cell, row, eventArg);\n                if (eventArg.type === 'mousedown') {\n                    this.domEvents.cellMousedown.emit(args);\n                }\n                else {\n                    if (args.isEditedColumn || !this.editService.closeCell(eventArg)) {\n                        this.domEvents.cellClick.emit(Object.assign(args, {\n                            isEdited: args.isEditedRow || args.isEditedColumn\n                        }));\n                    }\n                }\n            }\n        }\n    };\n    TableBodyComponent.prototype.cellKeydownHandler = function (args) {\n        var body = closest(args.rowElement, matchesNodeName('tbody'));\n        if (body !== this.element.nativeElement) {\n            return;\n        }\n        if (args.keyCode === 13 /* enter */) {\n            var clickArgs = this.cellClickArgs(args.cellElement, args.rowElement, args.originalEvent);\n            this.domEvents.cellClick.emit(clickArgs);\n        }\n    };\n    TableBodyComponent.prototype.cellClickArgs = function (cell, row, eventArg) {\n        var index = columnCellIndex(cell, row.cells);\n        var column = this.columns.toArray()[index];\n        var columnIndex = this.lockedColumnsCount + index;\n        var rowIndex = row.getAttribute('data-kendo-grid-item-index');\n        rowIndex = rowIndex ? parseInt(rowIndex, 10) : -1;\n        var dataItem = rowIndex === -1 ? this.editService.newDataItem : this.data.at(rowIndex - this.skip);\n        var isEditedColumn = this.editService.isEditedColumn(rowIndex, column);\n        var isEditedRow = this.editService.isEdited(rowIndex);\n        return {\n            column: column,\n            columnIndex: columnIndex,\n            dataItem: dataItem,\n            isEditedColumn: isEditedColumn,\n            isEditedRow: isEditedRow,\n            originalEvent: eventArg,\n            rowIndex: rowIndex,\n            type: eventArg.type\n        };\n    };\n    return TableBodyComponent;\n}());\nexport { TableBodyComponent };\n",null]}