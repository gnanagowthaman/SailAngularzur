{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/navigation-model.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/navigation-model.js","mtime":1529128659917},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var findByIndex = function (arr, index) {\n    return arr.find(function (item) { return item.index === index; });\n};\nvar indexComparer = function (a, b) { return a.index - b.index; };\nvar expandColSpan = function (cell, row) {\n    if (cell.colSpan > 1) {\n        cell.parent = cell;\n        for (var i = cell.colIndex + 1; i < cell.colIndex + cell.colSpan; i++) {\n            row.cells[i] = { colIndex: i, parent: cell, rowIndex: cell.rowIndex };\n        }\n    }\n};\nvar expandRowSpan = function (row, prevRow) {\n    return prevRow.cells\n        .filter(function (cell) { return cell.rowSpan && cell.rowSpan + prevRow.index > row.index; })\n        .forEach(function (cell) {\n        var colIndex = cell.colIndex;\n        row.cells[colIndex] = { colIndex: colIndex, parent: cell, rowIndex: row.index };\n    });\n};\nvar expandAllRowSpans = function (row, allRows) {\n    return allRows\n        .filter(function (r) { return r.index < row.index; })\n        .forEach(function (prevRow) { return expandRowSpan(row, prevRow); });\n};\n/**\n * @hidden\n *\n * Contains information for the currently rendered rows and cells.\n */\nvar NavigationModel = /*@__PURE__*/ (function () {\n    function NavigationModel() {\n        this.rows = [];\n    }\n    Object.defineProperty(NavigationModel.prototype, \"firstRow\", {\n        get: function () {\n            return this.rows[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NavigationModel.prototype, \"lastRow\", {\n        get: function () {\n            return this.rows[this.rows.length - 1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NavigationModel.prototype.registerCell = function (cell) {\n        var row = findByIndex(this.rows, cell.logicalRowIndex);\n        if (!row) {\n            return;\n        }\n        var colIndex = cell.logicalColIndex;\n        var modelCell = {\n            colIndex: colIndex,\n            rowIndex: row.index,\n            colSpan: cell.colSpan,\n            rowSpan: cell.rowSpan,\n            focusGroup: cell.focusGroup\n        };\n        row.cells[colIndex] = modelCell;\n        if (cell.groupItem) {\n            row.groupItem = cell.groupItem;\n        }\n        expandColSpan(modelCell, row);\n    };\n    NavigationModel.prototype.registerRow = function (row) {\n        this.unregisterRow(row);\n        var modelRow = { index: row.logicalRowIndex, cells: [] };\n        expandAllRowSpans(modelRow, this.rows);\n        this.rows.push(modelRow);\n        this.rows.sort(indexComparer);\n    };\n    NavigationModel.prototype.unregisterRow = function (row) {\n        this.rows = this.rows.filter(function (r) { return r.index !== row.logicalRowIndex; });\n    };\n    NavigationModel.prototype.findRowByIndex = function (index) {\n        return findByIndex(this.rows, index);\n    };\n    NavigationModel.prototype.findRowByPosition = function (pos) {\n        var maxPos = this.rows.length - 1;\n        var normalizedPos = Math.max(0, Math.min(pos, maxPos));\n        return this.rows[normalizedPos];\n    };\n    NavigationModel.prototype.rowPosition = function (row) {\n        return this.rows.indexOf(row);\n    };\n    return NavigationModel;\n}());\nexport { NavigationModel };\n",null]}