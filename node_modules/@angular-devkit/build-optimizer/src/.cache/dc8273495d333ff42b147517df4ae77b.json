{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/textbox/textbox-container.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/textbox/textbox-container.component.js","mtime":1529128638998},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectorRef, ContentChild, Component, ElementRef, EventEmitter, HostBinding, Input, Inject, Optional, Renderer2, isDevMode } from '@angular/core';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { TextBoxDirective } from './textbox.directive';\nimport { TextAreaDirective } from './textarea.directive';\nimport { NgControl } from '@angular/forms';\nimport { guid } from '../common/dom-utils';\nvar isFunction = function (x) { return Object.prototype.toString.call(x) === '[object Function]'; };\n/**\n * Represents the Kendo UI TextBoxContainer component for Angular.\n * Provides floating labels to `input` elements.\n *\n * @example\n * ```ng-template\n * <kendo-textbox-container floatingLabel=\"First name\">\n *   <input kendoTextBox />\n * </kendo-textbox-container>\n * ```\n */\nvar TextBoxContainerComponent = /*@__PURE__*/ (function () {\n    function TextBoxContainerComponent(elementRef, renderer, changeDetectorRef, rtl) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * @hidden\n         */\n        this.focused = false;\n        /**\n         * @hidden\n         */\n        this.empty = true;\n        /**\n         * @hidden\n         */\n        this.invalid = false;\n        this._subscriptions = [];\n        this.direction = rtl ? 'rtl' : 'ltr';\n        this.renderer.removeAttribute(this.elementRef.nativeElement, \"id\");\n    }\n    Object.defineProperty(TextBoxContainerComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxContainerComponent.prototype, \"textareaElementClass\", {\n        get: function () {\n            return !!this.textarea;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxContainerComponent.prototype, \"focusedClass\", {\n        get: function () {\n            return this.focused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxContainerComponent.prototype, \"emptyClass\", {\n        get: function () {\n            return this.empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxContainerComponent.prototype, \"invalidClass\", {\n        get: function () {\n            return this.invalid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TextBoxContainerComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (!this.formControl && !this.textbox && !this.textarea) {\n            if (isDevMode()) {\n                throw new Error(\"The TextBoxContainer requires an element with the kendoTextBox or kendoTextArea directive\" +\n                    \" or a forms-bound component to function properly.\");\n            }\n            return;\n        }\n        var control = this.textbox || this.textarea || this.formControl.valueAccessor;\n        var setFocus = function (isFocused) {\n            return function () {\n                _this.focused = isFocused;\n                _this.updateState();\n                _this.changeDetectorRef.markForCheck();\n            };\n        };\n        if (control.onFocus instanceof EventEmitter) {\n            var focus_1 = control.onFocus.subscribe(setFocus(true));\n            this._subscriptions.push(focus_1);\n        }\n        if (control.onBlur instanceof EventEmitter) {\n            var blur_1 = control.onBlur.subscribe(setFocus(false));\n            this._subscriptions.push(blur_1);\n        }\n        var updateState = function () { return _this.updateState(); };\n        updateState();\n        if (this.formControl) {\n            var s = this.formControl.valueChanges.subscribe(updateState);\n            this._subscriptions.push(s);\n        }\n        if ('id' in control) {\n            if (this.id && control.id) {\n                // input wins\n                this.id = control.id;\n            }\n            else if (this.id) {\n                control.id = this.id;\n            }\n            else if (control.id) {\n                this.id = control.id;\n            }\n            else {\n                var id = \"_\" + guid();\n                control.id = id;\n                this.id = id;\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    TextBoxContainerComponent.prototype.ngOnDestroy = function () {\n        this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        this._subscriptions = [];\n    };\n    TextBoxContainerComponent.prototype.updateState = function () {\n        var formControl = this.formControl;\n        var empty = function (value) {\n            // zero is not an empty value (e.g. NumericTextBox)\n            if (value === 0) {\n                return false;\n            }\n            // empty arrays are an empty value (e.g. MultiSelect)\n            if (Array.isArray(value) && !value.length) {\n                return true;\n            }\n            return !value;\n        };\n        if (formControl) {\n            var valueAccessor = formControl.valueAccessor;\n            if (isFunction(valueAccessor.isEmpty)) {\n                this.empty = valueAccessor.isEmpty();\n            }\n            else {\n                this.empty = empty(formControl.value);\n            }\n            this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);\n        }\n        else if (this.textarea) {\n            this.empty = empty(this.textarea.value);\n        }\n        else {\n            this.empty = empty(this.textbox.value);\n        }\n        this.changeDetectorRef.markForCheck();\n    };\n    return TextBoxContainerComponent;\n}());\nexport { TextBoxContainerComponent };\n",null]}