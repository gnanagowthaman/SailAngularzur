{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/grid.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/grid.component.js","mtime":1529128654455},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, QueryList, ViewChild, isDevMode, NgZone, ViewChildren, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';\nimport { ZoneAwareEventEmitter } from './common/event-emitter';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map } from 'rxjs/operators/map';\nimport { tap } from 'rxjs/operators/tap';\nimport { take } from 'rxjs/operators/take';\nimport { filter } from 'rxjs/operators/filter';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { merge } from 'rxjs/observable/merge';\nimport { ColumnComponent, isColumnComponent } from './columns/column.component';\nimport { isSpanColumnComponent } from './columns/span-column.component';\nimport { isColumnGroupComponent } from './columns/column-group.component';\nimport { DetailTemplateDirective } from './rendering/details/detail-template.directive';\nimport { isArray, anyChanged, isChanged, isPresent, isUniversal, observe, isTruthy } from './utils';\nimport { BrowserSupportService } from './layout/browser-support.service';\nimport { DataResultIterator, DataCollection } from './data/data.collection';\nimport { SelectionService } from './selection/selection.service';\nimport { Selection } from \"./selection/selection-default\";\nimport { EditService } from './editing/edit.service';\nimport { DetailsService } from './rendering/details/details.service';\nimport { GroupsService } from './grouping/groups.service';\nimport { ColumnsContainer } from './columns/columns-container';\nimport { GroupInfoService } from './grouping/group-info.service';\nimport { ChangeNotificationService } from './data/change-notification.service';\nimport { NoRecordsTemplateDirective } from './rendering/no-records-template.directive';\nimport { ColumnBase } from './columns/column-base';\nimport { syncRowsHeight } from './layout/row-sync';\nimport { CELL_CONTEXT, EMPTY_CELL_CONTEXT } from './rendering/common/cell-context';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { FilterService } from './filtering/filter.service';\nimport { PagerTemplateDirective } from './pager/pager-template.directive';\nimport { PagerContextService } from \"./pager/pager-context.service\";\nimport { PDFService } from './pdf/pdf.service';\nimport { PDFExportEvent } from './pdf/pdf-export-event';\nimport { SuspendService } from './scrolling/suspend.service';\nimport { ResponsiveService } from \"./layout/responsive.service\";\nimport { ExcelService } from './excel/excel.service';\nimport { ColumnList } from './columns/column-list';\nimport { ToolbarTemplateDirective } from \"./rendering/toolbar/toolbar-template.directive\";\nimport { columnsToRender, expandColumns, expandColumnsWithSpan, isValidFieldName, sumColumnWidths } from \"./columns/column-common\";\nimport { ScrollSyncService } from \"./scrolling/scroll-sync.service\";\nimport { ResizeService } from \"./layout/resize.service\";\nimport { closest, matchesClasses, matchesNodeName } from './rendering/common/dom-queries';\nimport { LocalDataChangesService } from './editing/local-data-changes.service';\nimport { DomEventsService } from './common/dom-events.service';\nimport { ColumnResizingService } from \"./column-resizing/column-resizing.service\";\nimport { hasFilterRow } from './filtering/filterable';\nimport { SinglePopupService } from './filtering/menu/single-popup.service';\nimport { DragAndDropService } from './dragdrop/drag-and-drop.service';\nimport { DragHintService } from './dragdrop/drag-hint.service';\nimport { DropCueService } from './dragdrop/drop-cue.service';\nimport { ColumnReorderService } from './dragdrop/column-reorder.service';\nimport { ColumnReorderEvent } from './dragdrop/column-reorder-event';\nimport { NavigationService } from './navigation/navigation.service';\nimport { NavigationMetadata } from './navigation/navigation-metadata';\nimport { IdService } from './common/id.service';\nimport { ColumnInfoService } from \"./common/column-info.service\";\nimport { FocusRoot } from './navigation/focus-root';\nimport { ScrollRequestService } from './scrolling/scroll-request.service';\nvar createControl = function (source) {\n    return function (acc, key) {\n        acc[key] = new FormControl(source[key]);\n        return acc;\n    };\n};\nvar validateColumnsField = function (columns) {\n    return expandColumns(columns.toArray())\n        .filter(isColumnComponent)\n        .filter(function (_a) {\n        var field = _a.field;\n        return !isValidFieldName(field);\n    })\n        .forEach(function (_a) {\n        var field = _a.field;\n        return console.warn(\"\\n                Grid column field name '\" + field + \"' does not look like a valid JavaScript identifier.\\n                Identifiers can contain only alphanumeric characters (including \\\"$\\\" or \\\"_\\\"), and may not start with a digit.\\n                Please use only valid identifier names to ensure error-free operation.\\n            \");\n    });\n};\nvar handleExpandCollapseService = function (service, expandEmitter, collapseEmitter, map) {\n    return (service.changes.pipe(filter(function (_a) {\n        var dataItem = _a.dataItem;\n        return isPresent(dataItem);\n    }))\n        .subscribe(function (x) { return x.expand ? expandEmitter.emit(map(x)) : collapseEmitter.emit(map(x)); }));\n};\n/**\n * Represents the Kendo UI Grid component for Angular.\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid [data]=\"gridData\">\n *        </kendo-grid>\n *    `\n * })\n * class AppComponent {\n *    public gridData: any[] = products;\n * }\n *\n * const products = [{\n *    \"ProductID\": 1,\n *    \"ProductName\": \"Chai\",\n *    \"UnitPrice\": 18.0000,\n *    \"Discontinued\": true\n *  }, {\n *    \"ProductID\": 2,\n *    \"ProductName\": \"Chang\",\n *    \"UnitPrice\": 19.0000,\n *    \"Discontinued\": false\n *  }\n * ];\n * ```\n */\nvar GridComponent = /*@__PURE__*/ (function () {\n    function GridComponent(supportService, selectionService, wrapper, groupInfoService, groupsService, changeNotification, detailsService, editService, filterService, pdfService, responsiveService, renderer, excelService, ngZone, scrollSyncService, domEvents, columnResizingService, changeDetectorRef, columnReorderService, columnInfoService, navigationService, localization) {\n        var _this = this;\n        this.selectionService = selectionService;\n        this.wrapper = wrapper;\n        this.groupInfoService = groupInfoService;\n        this.groupsService = groupsService;\n        this.changeNotification = changeNotification;\n        this.detailsService = detailsService;\n        this.editService = editService;\n        this.filterService = filterService;\n        this.pdfService = pdfService;\n        this.responsiveService = responsiveService;\n        this.renderer = renderer;\n        this.excelService = excelService;\n        this.ngZone = ngZone;\n        this.scrollSyncService = scrollSyncService;\n        this.domEvents = domEvents;\n        this.columnResizingService = columnResizingService;\n        this.changeDetectorRef = changeDetectorRef;\n        this.columnReorderService = columnReorderService;\n        this.columnInfoService = columnInfoService;\n        this.navigationService = navigationService;\n        /**\n         * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count.\n         */\n        this.data = [];\n        /**\n         * Defines the scroll mode used by the Grid.\n         *\n         * The available options are:\n         *  - `none`&mdash;Renders no scrollbar.\n         *  - `scrollable`&mdash;This is the default scroll mode. It requires the setting of the `height` option.\n         *  - `virtual`&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.\n         */\n        this.scrollable = 'scrollable';\n        /**\n         * Enables the single-row [selection]({% slug selection_grid %}) of the Grid.\n         */\n        this.selectable = false;\n        /**\n         * Enables the [filtering]({% slug filtering_grid %}) of the Grid columns that have their `field` option set.\n         */\n        this.filterable = false;\n        /**\n         * Enables the [sorting]({% slug sorting_grid %}) of the Grid columns that have their `field` option set.\n         */\n        this.sortable = false;\n        /**\n         * Configures the pager of the Grid.\n         *\n         * The available options are:\n         *\n         * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.\n         * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.\n         * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.\n         * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.\n         * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.\n         */\n        this.pageable = false;\n        /**\n         * If set to `true`, the user can group the Grid by dragging the column header cells.\n         * By default, grouping is disabled.\n         */\n        this.groupable = false;\n        /**\n         * If set to `true`, the user can use dedicated shortcuts to interact with the Grid.\n         * By default, navigation is disabled and the Grid content is accessible in the normal tab sequence.\n         */\n        this.navigable = false;\n        /**\n         * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their header cells\n         * (see the [basic usage example]({% slug resizing_columns_grid %})).\n         *\n         * @default false\n         */\n        this.resizable = false;\n        /**\n         * If set to `true`, the user can reorder columns by dragging their header cells.\n         * (see the [basic usage example]({% slug reordering_columns_grid %})).\n         *\n         * @default false\n         */\n        this.reorderable = false;\n        /**\n         * Specifies if the loading indicator of the Grid will be displayed.\n         *\n         * @default false\n         */\n        this.loading = false;\n        /**\n         * Fires when the Grid filter is modified through the UI.\n         * You have to handle the event yourself and filter the data.\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires when the page of the Grid is changed.\n         * You have to handle the event yourself and page the data.\n         */\n        this.pageChange = new EventEmitter();\n        /**\n         * Fires when the grouping of the Grid is changed.\n         * You have to handle the event yourself and group the data.\n         */\n        this.groupChange = new ZoneAwareEventEmitter(this.ngZone);\n        /**\n         * Fires when the sorting of the Grid is changed.\n         * You have to handle the event yourself and sort the data.\n         */\n        this.sortChange = new EventEmitter();\n        /**\n         * Fires when the user selects a Grid row.\n         * Emits the [`SelectionEvent`]({% slug api_grid_selectionevent %}#toc-selectionchange).\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires when the data state of the Grid is changed.\n         */\n        this.dataStateChange = new EventEmitter();\n        /**\n         * Fires when the user expands a group header.\n         */\n        this.groupExpand = new EventEmitter();\n        /**\n         * Fires when the user collapses a group header.\n         */\n        this.groupCollapse = new EventEmitter();\n        /**\n         * Fires when the user expands a master row.\n         */\n        this.detailExpand = new EventEmitter();\n        /**\n         * Fires when the user collapses a master row.\n         */\n        this.detailCollapse = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Edit** command button to edit a row.\n         */\n        this.edit = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Cancel** command button to close a row.\n         */\n        this.cancel = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Save** command button to save changes in a row.\n         */\n        this.save = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Remove** command button to remove a row.\n         */\n        this.remove = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Add** command button to add a new row.\n         */\n        this.add = new EventEmitter();\n        /**\n         * Fires when the user leaves an edited cell.\n         */\n        this.cellClose = new EventEmitter();\n        /**\n         * Fires when the user clicks a cell.\n         */\n        this.cellClick = new ZoneAwareEventEmitter(this.ngZone);\n        /**\n         * Fires when the user clicks the **Export to PDF** command button.\n         */\n        this.pdfExport = new EventEmitter();\n        /**\n         * Fires when the user clicks the **Export to Excel** command button.\n         */\n        this.excelExport = new EventEmitter();\n        /**\n         * Fires when the user completes the resizing of the column.\n         */\n        this.columnResize = new ZoneAwareEventEmitter(this.ngZone);\n        /**\n         * Fires when the user completes the reordering of the column.\n         */\n        this.columnReorder = new EventEmitter();\n        this.columns = new QueryList();\n        this.footer = new QueryList();\n        this.selectionDirective = false;\n        this.columnsContainer = new ColumnsContainer(function () {\n            return _this.columnList.filterHierarchy(function (column) {\n                column.matchesMedia = _this.matchesMedia(column);\n                return column.isVisible;\n            });\n        });\n        this.view = new DataCollection(function () { return new DataResultIterator(_this.data, _this.skip, _this.showGroupFooters); });\n        this.shouldGenerateColumns = true;\n        this._sort = new Array();\n        this._group = new Array();\n        this._skip = 0;\n        this.cachedWindowWidth = 0;\n        this._rowSelected = null;\n        this.columnResizingInProgress = false;\n        this.rtl = false;\n        this._rowClass = function () { return null; };\n        this.localizationSubscription = localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.rtl = rtl;\n            _this.direction = _this.rtl ? 'rtl' : 'ltr';\n        });\n        this.scrollbarWidth = supportService.scrollbarWidth;\n        this.groupInfoService.registerColumnsContainer(function () { return _this.columnList; });\n        this.columnInfoService.init(this.columnsContainer);\n        if (selectionService) {\n            this.selectionSubscription = selectionService.changes.subscribe(function (event) {\n                _this.ngZone.run(function () { return _this.selectionChange.emit(event); });\n            });\n        }\n        this.groupExpandCollapseSubscription = handleExpandCollapseService(groupsService, this.groupExpand, this.groupCollapse, function (_a) {\n            var group = _a.dataItem, index = _a.index;\n            return ({ group: group, groupIndex: index });\n        });\n        this.detailsServiceSubscription = handleExpandCollapseService(detailsService, this.detailExpand, this.detailCollapse, function (_a) {\n            var dataItem = _a.dataItem, index = _a.index;\n            return ({ dataItem: dataItem, index: index });\n        });\n        this.filterSubscription = this.filterService.changes.subscribe(function (x) {\n            _this.filterChange.emit(x);\n        });\n        this.attachStateChangesEmitter();\n        this.attachEditHandlers();\n        this.attachDomEventHandlers();\n        this.pdfSubscription = this.pdfService.exportClick.subscribe(this.emitPDFExportEvent.bind(this));\n        this.excelSubscription = this.excelService.exportClick.subscribe(this.saveAsExcel.bind(this));\n        this.columnsContainerChange();\n        this.columnResizingSubscription = this.columnResizingService\n            .changes\n            .pipe(tap(function (e) { return _this.columnResizingInProgress = e.type !== 'end'; }), filter(function (e) { return e.type === 'end'; }))\n            .subscribe(this.notifyResize.bind(this));\n        this.columnList = new ColumnList(this.columns);\n        this.columnReorderSubscription = this.columnReorderService\n            .changes.subscribe(this.reorder.bind(this));\n    }\n    Object.defineProperty(GridComponent.prototype, \"skip\", {\n        /**\n         * Defines the number of records to be skipped by the pager.\n         * Required by the [paging]({% slug paging_grid %}) functionality.\n         */\n        get: function () {\n            return this._skip;\n        },\n        set: function (value) {\n            if (value >= 0) {\n                this._skip = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"sort\", {\n        /**\n         */\n        get: function () {\n            return this._sort;\n        },\n        /**\n         * The descriptors by which the data will be sorted.\n         */\n        set: function (value) {\n            if (isArray(value)) {\n                this._sort = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"group\", {\n        /**\n         */\n        get: function () {\n            return this._group;\n        },\n        /**\n         * The descriptors by which the data will be grouped.\n         */\n        set: function (value) {\n            if (isArray(value)) {\n                this._group = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showTopToolbar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.toolbarTemplate && ['top', 'both'].indexOf(this.toolbarTemplate.position) > -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showBottomToolbar\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.toolbarTemplate && ['bottom', 'both'].indexOf(this.toolbarTemplate.position) > -1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"isLocked\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showPager\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return !this.isVirtual && this.pageable !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showGroupPanel\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.groupable && this.groupable.enabled !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"groupableEmptyText\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.groupable.emptyText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"navigatable\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.navigable;\n        },\n        /**\n         * @hidden\n         *\n         * Alias for navigable for users migrating from Kendo UI for jQuery\n         */\n        set: function (value) {\n            this.navigable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"rowClass\", {\n        get: function () {\n            return this._rowClass;\n        },\n        /**\n         * Defines a function that is executed for every data row in the component.\n         *\n         * @example\n         * ```ts-preview\n         * import { Component, ViewEncapsulation } from '@angular/core';\n         * import { RowClassArgs } from '@progress/kendo-angular-grid';\n         *\n         * _@Component({\n         *    selector: 'my-app',\n         *    encapsulation: ViewEncapsulation.None,\n         *    styles: [`\n         *        .k-grid tr.even { background-color: #f45c42; }\n         *        .k-grid tr.odd { background-color: #41f4df; }\n         *    `],\n         *    template: `\n         *        <kendo-grid [data]=\"gridData\" [rowClass]=\"rowCallback\">\n         *        </kendo-grid>\n         *    `\n         * })\n         * class AppComponent {\n         *    public gridData: any[] = products;\n         *\n         *    public rowCallback(context: RowClassArgs) {\n         *        const isEven = context.index % 2 == 0;\n         *        return {\n         *            even: isEven,\n         *            odd: !isEven\n         *        };\n         *    }\n         * }\n         *\n         * const products = [{\n         *    \"ProductID\": 1,\n         *    \"ProductName\": \"Chai\",\n         *    \"UnitPrice\": 18.0000,\n         *    \"Discontinued\": true\n         *  }, {\n         *    \"ProductID\": 2,\n         *    \"ProductName\": \"Chang\",\n         *    \"UnitPrice\": 19.0000,\n         *    \"Discontinued\": false\n         *  }\n         * ];\n         * ```\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"rowClass must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._rowClass = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"rowSelected\", {\n        get: function () {\n            return this._rowSelected;\n        },\n        /**\n         * Defines a Boolean function that is executed for each data row in the component.\n         * It determines whether the row will be selected.\n         * For a basic usage example, refer to the section on\n         * [setting the selected rows]({% slug selection_grid %}#toc-setting-the-selected-rows) of the Grid.\n         */\n        set: function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"rowSelected must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._rowSelected = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedClasses\", {\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"virtualClasses\", {\n        get: function () {\n            return this.isVirtual;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"columnResizing\", {\n        get: function () {\n            return this.columnResizingInProgress;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"noScrollbarClass\", {\n        get: function () {\n            return this.scrollbarWidth === 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"headerPadding\", {\n        get: function () {\n            if (isUniversal()) {\n                return \"\";\n            }\n            var padding = Math.max(0, this.scrollbarWidth - 1) + 'px';\n            var right = this.rtl ? 0 : padding;\n            var left = this.rtl ? padding : 0;\n            return \"0 \" + right + \" 0 \" + left;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showGroupFooters\", {\n        get: function () {\n            return columnsToRender(this.columnList.toArray()).filter(function (column) { return column.groupFooterTemplateRef; }).length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"showFooter\", {\n        get: function () {\n            return this.columnList.filter(function (column) { return column.footerTemplateRef; }).length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"ariaRowCount\", {\n        get: function () {\n            return this.totalColumnLevels + 1 + this.view.total;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"ariaColCount\", {\n        get: function () {\n            return this.visibleColumns.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"isVirtual\", {\n        get: function () {\n            return this.scrollable === 'virtual';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"isScrollable\", {\n        get: function () {\n            return this.scrollable !== 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"visibleColumns\", {\n        get: function () {\n            return this.columnsContainer.allColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedColumns\", {\n        get: function () {\n            return this.columnsContainer.lockedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"nonLockedColumns\", {\n        get: function () {\n            return this.columnsContainer.nonLockedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedLeafColumns\", {\n        get: function () {\n            return this.columnsContainer.lockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"nonLockedLeafColumns\", {\n        get: function () {\n            return this.columnsContainer.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"leafColumns\", {\n        get: function () {\n            return this.columnsContainer.leafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"totalColumnLevels\", {\n        get: function () {\n            return this.columnsContainer.totalLevels;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"lockedWidth\", {\n        get: function () {\n            var groupCellsWidth = this.group.length * 30; // this should be the value of group-cell inside the theme!\n            return expandColumns(this.lockedLeafColumns.toArray()).reduce(function (prev, curr) { return prev + (curr.width || 0); }, groupCellsWidth);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"nonLockedWidth\", {\n        get: function () {\n            if (!this.rtl && this.lockedLeafColumns.length) {\n                return sumColumnWidths(expandColumns(this.nonLockedLeafColumns.toArray()));\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"selectableSettings\", {\n        get: function () {\n            if (this.selectionService) {\n                return this.selectionService.options;\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridComponent.prototype, \"navigationMetadata\", {\n        get: function () {\n            var isVirtual = this.isVirtual;\n            var pageSize = this.pageSize;\n            var dataRows = isVirtual ? this.view.total : pageSize;\n            var addRowOffset = this.editService.hasNewItem ? 1 : 0;\n            var filterRowOffset = hasFilterRow(this.filterable) ? 1 : 0;\n            var headerRows = this.totalColumnLevels + 1 + filterRowOffset + addRowOffset;\n            return new NavigationMetadata(dataRows, headerRows, isVirtual, this.showPager);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Expands the specified master row.\n     *\n     * @param {number} index - The absolute index of the master row.\n     */\n    GridComponent.prototype.expandRow = function (index) {\n        if (!this.detailsService.isExpanded(index)) {\n            this.detailsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * Collapses the specified master row.\n     *\n     * @param {number} index - The absolute index of the master row.\n     */\n    GridComponent.prototype.collapseRow = function (index) {\n        if (this.detailsService.isExpanded(index)) {\n            this.detailsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * Expands a group header item for the given index.\n     * For example, `0_1` expands the second inner group of the first master group.\n     *\n     * > When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,\n     * > the `expandGroup` method is not supported.\n     *\n     * @param {string} index - The underscore separated hierarchical index of the group.\n     */\n    GridComponent.prototype.expandGroup = function (index) {\n        if (!this.groupsService.isExpanded(index)) {\n            this.groupsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * Collapses a group header item for the given index.\n     * For example, `0_1` collapses the second inner group of the first master group.\n     *\n     * > When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,\n     * > the `collapseGroup` method is not supported.\n     *\n     * @param {string} index - The underscore separated hierarchical index of the group.\n     */\n    GridComponent.prototype.collapseGroup = function (index) {\n        if (this.groupsService.isExpanded(index)) {\n            this.groupsService.toggleRow(index, null);\n        }\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.resetGroupsState = function () {\n        this.groupsService.reset();\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.expandGroupChildren = function (groupIndex) {\n        this.groupsService.expandChildren(groupIndex);\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.onDataChange = function () {\n        this.autoGenerateColumns();\n        this.changeNotification.notify();\n        this.pdfService.dataChanged.emit();\n        if (isPresent(this.defaultSelection)) {\n            this.defaultSelection.reset();\n        }\n        this.initSelectionService();\n    };\n    GridComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged(\"data\", changes)) {\n            this.onDataChange();\n        }\n        if (this.lockedLeafColumns.length && anyChanged([\"pageSize\", \"skip\", \"sort\", \"group\"], changes)) {\n            this.changeNotification.notify();\n        }\n        if (anyChanged([\"data\", \"pageSize\", \"scrollable\"], changes)) {\n            this.navigationService.metadata = this.navigationMetadata;\n        }\n        if (isChanged(\"height\", changes, false)) {\n            this.renderer.setStyle(this.wrapper.nativeElement, 'height', this.height + \"px\");\n        }\n        if (isChanged(\"filterable\", changes) && this.lockedColumns.length) {\n            this.syncHeaderHeight(this.ngZone.onStable.asObservable().pipe(take(1)));\n        }\n    };\n    GridComponent.prototype.ngAfterViewInit = function () {\n        this.attachScrollSync();\n        this.attachElementEventHandlers();\n    };\n    GridComponent.prototype.ngAfterContentChecked = function () {\n        this.columnsContainer.refresh();\n        this.verifySettings();\n        this.initSelectionService();\n    };\n    GridComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.shouldGenerateColumns = !this.columns.length;\n        this.autoGenerateColumns();\n        this.columnList = new ColumnList(this.columns);\n        this.columnsChangeSubscription = this.columns.changes.subscribe(function () { return _this.verifySettings(); });\n    };\n    GridComponent.prototype.ngOnInit = function () {\n        if (this.navigable) {\n            this.navigationService.init(this.navigationMetadata);\n        }\n    };\n    GridComponent.prototype.ngOnDestroy = function () {\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n        if (this.stateChangeSubscription) {\n            this.stateChangeSubscription.unsubscribe();\n        }\n        if (this.groupExpandCollapseSubscription) {\n            this.groupExpandCollapseSubscription.unsubscribe();\n        }\n        if (this.detailsServiceSubscription) {\n            this.detailsServiceSubscription.unsubscribe();\n        }\n        if (this.editServiceSubscription) {\n            this.editServiceSubscription.unsubscribe();\n        }\n        if (this.pdfSubscription) {\n            this.pdfSubscription.unsubscribe();\n        }\n        if (this.filterSubscription) {\n            this.filterSubscription.unsubscribe();\n        }\n        if (this.columnsChangeSubscription) {\n            this.columnsChangeSubscription.unsubscribe();\n        }\n        if (this.excelSubscription) {\n            this.excelSubscription.unsubscribe();\n        }\n        if (this.columnsContainerChangeSubscription) {\n            this.columnsContainerChangeSubscription.unsubscribe();\n        }\n        if (this.scrollSyncService) {\n            this.scrollSyncService.destroy();\n        }\n        if (this.detachElementEventHandlers) {\n            this.detachElementEventHandlers();\n        }\n        if (this.defaultSelection) {\n            this.defaultSelection.destroy();\n        }\n        if (this.cellClickSubscription) {\n            this.cellClickSubscription.unsubscribe();\n        }\n        if (this.footerChangeSubscription) {\n            this.footerChangeSubscription.unsubscribe();\n        }\n        this.ngZone = null;\n        if (this.columnResizingSubscription) {\n            this.columnResizingSubscription.unsubscribe();\n        }\n        if (this.columnReorderSubscription) {\n            this.columnReorderSubscription.unsubscribe();\n        }\n        if (this.localizationSubscription) {\n            this.localizationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.attachScrollSync = function () {\n        var _this = this;\n        if (isUniversal()) {\n            return;\n        }\n        if (this.header) {\n            this.scrollSyncService.registerEmitter(this.header.nativeElement, \"header\");\n        }\n        if (this.footer) {\n            this.footerChangeSubscription = observe(this.footer)\n                .subscribe(function (footers) {\n                return footers\n                    .map(function (footer) { return footer.nativeElement; })\n                    .filter(isPresent)\n                    .forEach(function (element) {\n                    return _this.scrollSyncService.registerEmitter(element, \"footer\");\n                });\n            });\n        }\n    };\n    /**\n     * Switches the specified table row in the edit mode.\n     *\n     * @param {number} index - The row index that will be switched in the edit mode.\n     * @param {FormGroup} group - The [`FormGroup`](https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html)\n     * that describes the edit form.\n     */\n    GridComponent.prototype.editRow = function (index, group) {\n        this.editService.editRow(index, group);\n        this.focusEditElement(\"tr[data-kendo-grid-item-index=\\\"\" + index + \"\\\"]\");\n    };\n    /**\n     * Closes the editor for a given row.\n     *\n     * @param {number} index - The row index that will be switched out of the edit mode. If no index is provided, it is assumed\n     * that the new item editor will be closed.\n     */\n    GridComponent.prototype.closeRow = function (index) {\n        this.editService.close(index);\n    };\n    /**\n     * Creates a new row editor.\n     *\n     * @param {FormGroup} group - The [`FormGroup`](https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html) that describes\n     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.\n     */\n    GridComponent.prototype.addRow = function (group) {\n        var isFormGroup = group instanceof FormGroup;\n        if (!isFormGroup) {\n            var fields = Object.keys(group).reduce(createControl(group), {}); // FormBuilder?\n            group = new FormGroup(fields);\n        }\n        this.editService.addRow(group);\n        this.focusEditElement('.k-grid-add-row');\n    };\n    /**\n     * Puts the cell that is specified by the table row and column in edit mode.\n     *\n     * @param {number} rowIndex - The row index that will be switched in the edit mode.\n     * @param {number|string|any} column - The leaf column index, or the field name or the column instance that should be edited.\n     * @param {FormGroup} group - The [`FormGroup`](https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html)\n     * that describes the edit form.\n     */\n    GridComponent.prototype.editCell = function (rowIndex, column, group) {\n        var instance = this.columnInstance(column);\n        this.editService.editCell(rowIndex, instance, group);\n        this.focusEditElement('.k-grid-edit-cell');\n    };\n    /**\n     * Closes the current cell in edit mode and fires the `cellClose` event.\n     */\n    GridComponent.prototype.closeCell = function () {\n        this.editService.closeCell();\n    };\n    /**\n     * Closes the current cell in edit mode.\n     */\n    GridComponent.prototype.cancelCell = function () {\n        this.editService.cancelCell();\n    };\n    /**\n     * Initiates the PDF export.\n     */\n    GridComponent.prototype.saveAsPDF = function () {\n        this.pdfService.save(this);\n    };\n    /**\n     * Initiates the Excel export.\n     */\n    GridComponent.prototype.saveAsExcel = function () {\n        this.excelService.save(this);\n    };\n    /**\n     * Applies the minimum possible width for the specified column,\n     * so that the whole text fits without wrapping. This method expects the Grid\n     * to be resizable (set `resizable` to `true`).\n     *\n     * It makes sense to execute this method only\n     * after the Grid is already populated with data.\n     *\n     * @example\n     * ```ts-preview\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid\n     *            #grid\n     *            [data]=\"gridData\"\n     *            [resizable]=\"true\"\n     *            style=\"height: 300px\">\n     *            <ng-template kendoGridToolbarTemplate>\n     *                 <button class=\"k-button\" (click)=\"grid.autoFitColumn(groupColumn)\">\n     *                     Auto-fit the group column\n     *                 </button>\n     *            </ng-template>\n     *            <kendo-grid-column-group #groupColumn title=\"Product Info\">\n     *                <kendo-grid-column\n     *                    field=\"ProductID\"\n     *                    [width]=\"50\"\n     *                    [minResizableWidth]=\"30\"\n     *                    title=\"ID\">\n     *                </kendo-grid-column>\n     *\n     *                <kendo-grid-column\n     *                    field=\"ProductName\"\n     *                    title=\"Product Name\">\n     *                </kendo-grid-column>\n     *            </kendo-grid-column-group>\n     *\n     *            <kendo-grid-column\n     *                field=\"UnitPrice\"\n     *                title=\"Unit Price\"\n     *                [width]=\"180\"\n     *                filter=\"numeric\"\n     *                format=\"{0:c}\">\n     *            </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    GridComponent.prototype.autoFitColumn = function (column) {\n        this.columnResizingService.autoFit(column);\n    };\n    /**\n     * Applies the minimum possible width for the specified columns,\n     * so that the whole text fits without wrapping.\n     * If no argument is supplied, `autoFitColumns` auto-fits\n     * the content of current Grid columns. This method expects the Grid\n     * to be resizable (set `resizable` to `true`).\n     *\n     * It makes sense to execute this method only\n     * after the Grid is already populated with data.\n     *\n     * @example\n     * ```ts-preview\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *      <kendo-grid\n     *          #grid\n     *          [data]=\"gridData\"\n     *          [resizable]=\"true\"\n     *          style=\"height: 300px\">\n     *          <ng-template kendoGridToolbarTemplate>\n     *              <button class=\"k-button\" (click)=\"grid.autoFitColumns([firstColumn, lastColumn])\">\n     *                  Auto-fit the first and last column\n     *              </button>\n     *              <button class=\"k-button\" (click)=\"grid.autoFitColumns()\">\n     *                  Auto-fit all columns\n     *              </button>\n     *          </ng-template>\n     *          <kendo-grid-column-group title=\"Product Info\">\n     *              <kendo-grid-column\n     *                  #firstColumn\n     *                  field=\"ProductID\"\n     *                  [width]=\"50\"\n     *                  [minResizableWidth]=\"30\"\n     *                  title=\"ID\">\n     *              </kendo-grid-column>\n     *\n     *              <kendo-grid-column\n     *                  field=\"ProductName\"\n     *                  title=\"Product Name\"\n     *                  >\n     *              </kendo-grid-column>\n     *          </kendo-grid-column-group>\n     *\n     *          <kendo-grid-column\n     *              #lastColumn\n     *              field=\"UnitPrice\"\n     *              title=\"Unit Price\"\n     *              [width]=\"180\"\n     *              filter=\"numeric\"\n     *              format=\"{0:c}\">\n     *          </kendo-grid-column>\n     *      </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    GridComponent.prototype.autoFitColumns = function (columns) {\n        if (columns === void 0) {\n            columns = this.columns;\n        }\n        columns.forEach(this.autoFitColumn.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.notifyPageChange = function (source, event) {\n        if (source === \"list\" && !this.isVirtual) {\n            return;\n        }\n        this.pageChange.emit(event);\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.focusEditElement = function (containerSelector) {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            _this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                var wrapper = _this.wrapper.nativeElement;\n                if (!_this.setEditFocus(wrapper.querySelector(containerSelector)) && _this.isLocked) {\n                    _this.setEditFocus(wrapper.querySelector(\".k-grid-content \" + containerSelector));\n                }\n            });\n        });\n    };\n    /**\n     * Changes the position of the specified column.\n     * The reordering of columns operates only on the level\n     * which is inferred by the source column.\n     * For the `reorderColumn` method to work properly,\n     * the `source` column has to be visible.\n     *\n     * @param {ColumnBase} source - The column whose position will be changed.\n     * @param {number} destIndex - The new position of the column.\n     * @param {ColumnReorderConfig} options - Additional options.\n     *\n     * @example\n     * ```ts-preview\n     * _@Component({\n     *    selector: 'my-app',\n     *    template: `\n     *        <kendo-grid\n     *            #grid\n     *            [data]=\"gridData\"\n     *            [reorderable]=\"true\"\n     *            style=\"height: 300px\">\n     *            <ng-template kendoGridToolbarTemplate>\n     *                 <button class=\"k-button\"\n     *                     (click)=\"grid.reorderColumn(groupColumn, 2, { before: true })\">\n     *                     Move the group column before the last one.\n     *                 </button>\n     *            </ng-template>\n     *            <kendo-grid-column-group #groupColumn title=\"Product Info\">\n     *                <kendo-grid-column\n     *                    field=\"ProductID\"\n     *                    [width]=\"50\"\n     *                    title=\"ID\">\n     *                </kendo-grid-column>\n     *\n     *                <kendo-grid-column\n     *                    field=\"ProductName\"\n     *                    title=\"Product Name\">\n     *                </kendo-grid-column>\n     *            </kendo-grid-column-group>\n     *\n     *            <kendo-grid-column\n     *                field=\"UnitPrice\"\n     *                title=\"Unit Price\"\n     *                [width]=\"180\"\n     *                format=\"{0:c}\">\n     *            </kendo-grid-column>\n     *\n     *            <kendo-grid-column\n     *                field=\"Discontinued\"\n     *                title=\"Discontinued\"\n     *                [width]=\"100\">\n     *            </kendo-grid-column>\n     *        </kendo-grid>\n     *    `\n     * })\n     * class AppComponent {\n     *    public gridData: any[] = products;\n     * }\n     *\n     * const products = [{\n     *    \"ProductID\": 1,\n     *    \"ProductName\": \"Chai\",\n     *    \"UnitPrice\": 18.0000,\n     *    \"Discontinued\": true\n     *  }, {\n     *    \"ProductID\": 2,\n     *    \"ProductName\": \"Chang\",\n     *    \"UnitPrice\": 19.0000,\n     *    \"Discontinued\": false\n     *  }\n     * ];\n     * ```\n     */\n    GridComponent.prototype.reorderColumn = function (source, destIndex, options) {\n        if (options === void 0) {\n            options = { before: false };\n        }\n        var columnsForLevel = this.columnsForLevel(source.level);\n        var target = columnsForLevel[destIndex];\n        if (!target) {\n            return;\n        }\n        var lastNonLocked = target.isLocked &&\n            !source.isLocked &&\n            this.columnsContainer.nonLockedColumns.length === 1;\n        if (lastNonLocked) {\n            return;\n        }\n        if (isSpanColumnComponent(target) && !options.before) {\n            target = target.childColumns.last;\n        }\n        this.reorder({\n            before: options.before,\n            source: source,\n            target: target\n        });\n    };\n    /**\n     * @hidden\n     */\n    GridComponent.prototype.reorder = function (_a) {\n        var _this = this;\n        var target = _a.target, source = _a.source, before = _a.before;\n        this.ngZone.run(function () {\n            var columnsForLevel = _this.columnsForLevel(source.level);\n            var newIndex = columnsForLevel.indexOf(target);\n            if (target.parent && target.parent.isSpanColumn) {\n                newIndex = columnsForLevel.indexOf(target.parent);\n                if (before) {\n                    target = target.parent;\n                }\n            }\n            var args = new ColumnReorderEvent({\n                column: source,\n                oldIndex: columnsForLevel.indexOf(source),\n                newIndex: newIndex\n            });\n            _this.columnReorder.emit(args);\n            if (args.isDefaultPrevented()) {\n                return;\n            }\n            _this.updateColumnIndices({ source: source, target: target, before: before });\n            if (source.locked !== target.locked) {\n                source.locked = target.locked;\n            }\n            _this.columnsContainer.refresh();\n        });\n    };\n    GridComponent.prototype.updateColumnIndices = function (_a) {\n        var source = _a.source, target = _a.target, before = _a.before;\n        var expandedColumns = expandColumnsWithSpan(this.columnsForLevel(source.level));\n        var sourceColumnIndex = expandedColumns.indexOf(source);\n        var nextSourceIndex = 0;\n        var nextIndex = 0;\n        var toSkip = 1;\n        // Possible only when called from the API.\n        if (source.isSpanColumn) {\n            toSkip += source.childColumns.length;\n        }\n        var i = 0;\n        while (i < expandedColumns.length) {\n            var column = expandedColumns[i];\n            if (column === target) {\n                nextSourceIndex = before ? nextIndex : nextIndex + 1;\n                nextIndex = before ? nextIndex + toSkip : nextIndex;\n                column.orderIndex = nextIndex;\n                if (nextSourceIndex === nextIndex + 1) {\n                    nextIndex += toSkip;\n                }\n            }\n            else if (column === source) {\n                i += toSkip;\n                continue;\n            }\n            else {\n                column.orderIndex = nextIndex;\n            }\n            nextIndex++;\n            i++;\n        }\n        for (i = sourceColumnIndex; i < sourceColumnIndex + toSkip; i++) {\n            expandedColumns[i].orderIndex = nextSourceIndex++;\n        }\n    };\n    GridComponent.prototype.columnsForLevel = function (level) {\n        return this.columnsContainer\n            .allColumns.filter(function (column) { return column.level === level; });\n    };\n    GridComponent.prototype.initSelectionService = function () {\n        if (!this.selectionDirective && !isPresent(this.defaultSelection)) {\n            this.defaultSelection = new Selection(this, this.changeDetectorRef);\n        }\n        this.selectionService.init({\n            rowSelected: this.rowSelected,\n            selectable: this.selectable,\n            view: this.view\n        });\n        if (!this.selectionDirective && !this.selectableSettings.enabled) {\n            this.defaultSelection.reset();\n        }\n    };\n    GridComponent.prototype.setEditFocus = function (element) {\n        if (element) {\n            return this.navigationService.tryFocus(element);\n        }\n    };\n    GridComponent.prototype.columnInstance = function (column) {\n        var instance;\n        if (typeof column === 'number') {\n            instance = this.columnsContainer.lockedLeafColumns.toArray()\n                .concat(this.columnsContainer.nonLockedLeafColumns.toArray())[column];\n        }\n        else if (typeof column === 'string') {\n            instance = this.columnList.filter(function (item) { return item.field === column; })[0];\n        }\n        else {\n            instance = column;\n        }\n        if (!instance && isDevMode()) {\n            throw new Error(\"Invalid column \" + column);\n        }\n        return instance;\n    };\n    GridComponent.prototype.verifySettings = function () {\n        if (isDevMode()) {\n            if (this.lockedLeafColumns.length && this.detailTemplate) {\n                throw new Error('Having both detail template and locked columns is not supported.');\n            }\n            if (this.lockedLeafColumns.length && !this.nonLockedLeafColumns.length) {\n                throw new Error('There should be at least one non-locked column');\n            }\n            if (this.lockedLeafColumns.length && expandColumns(this.columnList.toArray()).filter(function (x) { return !x.width; }).length) {\n                throw new Error('Locked columns feature requires all columns to have set width.');\n            }\n            if (this.lockedLeafColumns.length && !this.isScrollable) {\n                throw new Error('Locked columns are only supported when scrolling is enabled.');\n            }\n            if (this.columnList.filter(isColumnGroupComponent).filter(function (x) { return x.children.length < 2; }).length) {\n                throw new Error('ColumnGroupComponent should contain ColumnComponent or CommandColumnComponent.');\n            }\n            if (this.columnList.filter(function (x) { return x.locked && x.parent && !x.parent.isLocked; }).length) {\n                throw new Error('Locked child columns require their parent columns to be locked.');\n            }\n            if ((this.rowHeight || this.detailRowHeight) && !this.isVirtual) {\n                throw new Error('Row height and detail row height settings require virtual scrolling mode to be enabled.');\n            }\n            validateColumnsField(this.columnList);\n        }\n    };\n    GridComponent.prototype.autoGenerateColumns = function () {\n        if (this.shouldGenerateColumns && !this.columns.length && this.view.length) {\n            this.columns.reset(Object.keys(this.view.at(0)).map(function (field) {\n                var column = new ColumnComponent();\n                column.field = field;\n                return column;\n            }));\n        }\n    };\n    GridComponent.prototype.attachStateChangesEmitter = function () {\n        var _this = this;\n        this.stateChangeSubscription =\n            merge(this.pageChange.pipe(map(function (x) {\n                return ({\n                    filter: _this.filter, group: _this.group, skip: x.skip, sort: _this.sort, take: x.take\n                });\n            })), this.sortChange.pipe(map(function (sort) { return ({ filter: _this.filter, group: _this.group, skip: _this.skip, sort: sort, take: _this.pageSize }); })), this.groupChange.pipe(map(function (group) {\n                return ({\n                    filter: _this.filter, group: group, skip: _this.skip, sort: _this.sort, take: _this.pageSize\n                });\n            })), this.filterChange.pipe(map(function (filter) {\n                return ({\n                    filter: filter, group: _this.group, skip: 0, sort: _this.sort, take: _this.pageSize\n                });\n            })))\n                .subscribe(function (x) {\n                _this.closeCell();\n                _this.cancelCell();\n                _this.dataStateChange.emit(x);\n            });\n    };\n    GridComponent.prototype.attachEditHandlers = function () {\n        if (!this.editService) {\n            return;\n        }\n        this.editServiceSubscription = this.editService\n            .changes.subscribe(this.emitCRUDEvent.bind(this));\n    };\n    GridComponent.prototype.emitCRUDEvent = function (args) {\n        var action = args.action, rowIndex = args.rowIndex, formGroup = args.formGroup;\n        var dataItem = this.view.at(rowIndex - this.skip);\n        if (action !== 'add' && !dataItem) {\n            dataItem = formGroup.value;\n        }\n        this.closeCell();\n        Object.assign(args, {\n            dataItem: dataItem,\n            sender: this\n        });\n        switch (action) {\n            case 'add':\n                this.add.emit(args);\n                break;\n            case 'cancel':\n                this.cancel.emit(args);\n                break;\n            case 'edit':\n                this.edit.emit(args);\n                break;\n            case 'remove':\n                this.remove.emit(args);\n                break;\n            case 'save':\n                this.save.emit(args);\n                break;\n            case 'cellClose':\n                this.cellClose.emit(args);\n                break;\n            default: break;\n        }\n    };\n    GridComponent.prototype.attachDomEventHandlers = function () {\n        var _this = this;\n        this.cellClickSubscription = this.domEvents.cellClick.subscribe(function (args) {\n            _this.cellClick.emit(Object.assign({ sender: _this }, args));\n        });\n    };\n    GridComponent.prototype.attachElementEventHandlers = function () {\n        var _this = this;\n        if (isUniversal()) {\n            return;\n        }\n        var wrapper = this.wrapper.nativeElement;\n        var ariaRoot = this.ariaRoot.nativeElement;\n        this.ngZone.runOutsideAngular(function () {\n            var resizeCheck = _this.resizeCheck.bind(_this);\n            var resizeSubscription = _this.renderer.listen('window', 'resize', resizeCheck);\n            var orientationSubscription = _this.renderer.listen('window', 'orientationchange', resizeCheck);\n            var documentClickSubscription = _this.renderer.listen('document', 'click', function (args) {\n                if (_this.editService.shouldCloseCell() &&\n                    !closest(args.target, matchesClasses('k-animation-container k-grid-ignore-click'))) {\n                    _this.editService.closeCell(args);\n                }\n            });\n            var windowBlurSubscription = _this.renderer.listen('window', 'blur', function (args) {\n                var activeElement = document.activeElement;\n                if (activeElement && !(matchesNodeName('input')(activeElement) && activeElement.type === 'file' &&\n                    closest(activeElement, matchesClasses('k-grid-edit-cell')) &&\n                    closest(activeElement, matchesNodeName('kendo-grid')) === _this.wrapper.nativeElement)) {\n                    _this.editService.closeCell(args);\n                }\n                _this.domEvents.windowBlur.emit(args);\n            });\n            var clickSubscription = _this.renderer.listen(wrapper, 'click', function (args) {\n                return _this.domEvents.click.emit(args);\n            });\n            var keydownSubscription = _this.renderer.listen(wrapper, 'keydown', function (args) {\n                return _this.domEvents.keydown.emit(args);\n            });\n            // focusIn and focusOut are relative to the element with ARIA role \"grid\"\n            var focused = false;\n            var focusInSubscription = _this.renderer.listen(ariaRoot, 'focusin', function (args) {\n                _this.domEvents.focus.emit(args);\n                if (!focused) {\n                    _this.domEvents.focusIn.emit(args);\n                    focused = true;\n                }\n            });\n            var focusOutSubscription = _this.renderer.listen(ariaRoot, 'focusout', function (args) {\n                var next = args.relatedTarget || document.activeElement;\n                var outside = !closest(next, function (node) { return node === ariaRoot; });\n                if (outside) {\n                    _this.domEvents.focusOut.emit(args);\n                    focused = false;\n                }\n            });\n            _this.detachElementEventHandlers = function () {\n                resizeSubscription();\n                orientationSubscription();\n                documentClickSubscription();\n                windowBlurSubscription();\n                clickSubscription();\n                keydownSubscription();\n                focusInSubscription();\n                focusOutSubscription();\n            };\n        });\n    };\n    GridComponent.prototype.matchesMedia = function (c) {\n        return this.responsiveService.matchesMedia(c.media);\n    };\n    GridComponent.prototype.resizeCheck = function () {\n        var _this = this;\n        if (window.innerWidth !== this.cachedWindowWidth) {\n            this.cachedWindowWidth = window.innerWidth;\n            var hasChanges_1 = false;\n            this.columnList.filterHierarchy(function (column) {\n                var matchesMedia = _this.matchesMedia(column);\n                if (column.matchesMedia !== matchesMedia) {\n                    hasChanges_1 = true;\n                    column.matchesMedia = matchesMedia;\n                }\n                return column.isVisible;\n            });\n            if (hasChanges_1) {\n                this.ngZone.run(function () {\n                    _this.changeDetectorRef.markForCheck();\n                });\n            }\n        }\n    };\n    GridComponent.prototype.emitPDFExportEvent = function () {\n        var args = new PDFExportEvent();\n        this.pdfExport.emit(args);\n        if (!args.isDefaultPrevented()) {\n            this.saveAsPDF();\n        }\n    };\n    GridComponent.prototype.syncHeaderHeight = function (observable) {\n        var _this = this;\n        return observable\n            .pipe(filter(function () { return isPresent(_this.lockedHeader); }))\n            .subscribe(function () {\n            return syncRowsHeight(_this.lockedHeader.nativeElement.children[0], _this.header.nativeElement.children[0]);\n        });\n    };\n    GridComponent.prototype.columnsContainerChange = function () {\n        var _this = this;\n        this.columnsContainerChangeSubscription =\n            this.syncHeaderHeight(this.columnsContainer.changes.pipe(filter(function () { return _this.lockedColumns.length > 0; }), switchMap(function () { return _this.ngZone.onStable.asObservable().pipe(take(1)); })));\n    };\n    GridComponent.prototype.notifyResize = function (e) {\n        var args = e.resizedColumns\n            .filter(function (item) { return isTruthy(item.column.resizable) && !item.column.isColumnGroup; })\n            .map(function (item) {\n            return ({\n                column: item.column,\n                newWidth: item.column.width,\n                oldWidth: item.oldWidth\n            });\n        });\n        this.columnResize.emit(args);\n    };\n    return GridComponent;\n}());\nexport { GridComponent };\n",null]}