{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/dragdrop/draggable-column.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/dragdrop/draggable-column.directive.js","mtime":1529128643303},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, Host, Input, NgZone, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DraggableDirective } from '../common/draggable.directive';\nimport { DragAndDropService } from './drag-and-drop.service';\nimport { DragHintService } from './drag-hint.service';\nimport { DropCueService } from './drop-cue.service';\nimport { and, not, or } from '../utils';\nimport { NavigationService } from '../navigation/navigation.service';\nimport { of } from 'rxjs/observable/of';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { delay } from 'rxjs/operators/delay';\nimport { filter } from 'rxjs/operators/filter';\nimport { tap } from 'rxjs/operators/tap';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { switchMapTo } from 'rxjs/operators/switchMapTo';\nimport { map } from 'rxjs/operators/map';\nimport { isFocusable, matchesNodeName } from '../rendering/common/dom-queries';\n/**\n * @hidden\n */\nvar stopPropagation = function (event) {\n    event.stopPropagation();\n    event.preventDefault();\n};\n/**\n * @hidden\n */\nvar preventOnDblClick = function (release) {\n    return function (mouseDown) {\n        return of(mouseDown).pipe(delay(150), takeUntil(release));\n    };\n};\nvar hasClass = function (className) { return function (el) { return new RegExp(\"(^| )\" + className + \"( |$)\").test(el.className); }; };\nvar isDeleteButton = or(hasClass(\"k-i-group-delete\"), hasClass(\"k-button-icon\"));\nvar isSortIcon = or(hasClass(\"k-i-sort-asc-sm\"), hasClass(\"k-i-sort-desc-sm\"));\nvar skipButtons = and(not(isDeleteButton), not(isSortIcon), not(isFocusable), not(matchesNodeName(\"label\")));\nvar elementUnderCursor = function (_a) {\n    var clientX = _a.clientX, clientY = _a.clientY;\n    return document.elementFromPoint(clientX, clientY);\n};\nvar hideThenShow = function (element, cont) {\n    element.style.display = 'none';\n    var result = cont();\n    element.style.display = 'block';\n    return result;\n};\n/**\n * @hidden\n */\nvar DraggableColumnDirective = /*@__PURE__*/ (function () {\n    function DraggableColumnDirective(draggable, element, zone, service, hint, cue, nav) {\n        this.draggable = draggable;\n        this.element = element;\n        this.zone = zone;\n        this.service = service;\n        this.hint = hint;\n        this.cue = cue;\n        this.nav = nav;\n        this.context = {};\n        this.drag = new EventEmitter();\n        this.subscriptions = new Subscription();\n    }\n    Object.defineProperty(DraggableColumnDirective.prototype, \"kendoDraggableColumn\", {\n        set: function (enabled) {\n            this.enabled = enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DraggableColumnDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions.add(this.zone.runOutsideAngular(function () {\n            return _this.draggable.kendo.press.pipe(filter(function (_) { return _this.enabled; }), filter(function (_a) {\n                var target = _a.originalEvent.target;\n                return skipButtons(target);\n            }), tap(function (_a) {\n                var event = _a.originalEvent;\n                stopPropagation(event);\n                _this.nav.navigateTo(event.target);\n            }), switchMap(preventOnDblClick(_this.draggable.kendo.release)), tap(function (down) {\n                _this.hint.create(down, _this.element.nativeElement, _this.context.hint);\n                _this.cue.create();\n            }), switchMap(function (down) {\n                return _this.draggable.kendo.drag.pipe(tap(_this.hint.attach()), tap(_this.cue.attach()), takeUntil(_this.draggable.kendo.release), map(function (move) { return ({ move: move, down: down }); }));\n            }), tap(_this.performDrag.bind(_this)), switchMapTo(_this.draggable.kendo.release)).subscribe(_this.drop.bind(_this));\n        }));\n    };\n    DraggableColumnDirective.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    DraggableColumnDirective.prototype.drop = function (upEvent) {\n        this.hint.remove();\n        this.cue.remove();\n        this.service.notifyDrop(this, upEvent);\n    };\n    DraggableColumnDirective.prototype.performDrag = function (_a) {\n        var move = _a.move;\n        this.hint.move(move);\n        var cursorElement = this.elementUnderCursor(move.originalEvent);\n        if (cursorElement) {\n            this.service.notifyDrag(this, cursorElement, move);\n        }\n        this.drag.emit({\n            draggable: this,\n            mouseEvent: move\n        });\n    };\n    DraggableColumnDirective.prototype.elementUnderCursor = function (mouseEvent) {\n        this.hint.hide();\n        var target = elementUnderCursor(mouseEvent);\n        if (target && /k-grouping-dropclue/.test(target.className)) {\n            target = hideThenShow(target, elementUnderCursor.bind(this, mouseEvent));\n        }\n        this.hint.show();\n        return target;\n    };\n    return DraggableColumnDirective;\n}());\nexport { DraggableColumnDirective };\n",null]}