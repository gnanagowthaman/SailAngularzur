{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/for.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/for.directive.js","mtime":1529128637709},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:directive-class-suffix directive-selector */\nimport { Directive, Input, IterableDiffers, TemplateRef, ViewContainerRef } from '@angular/core';\n/**\n * @hidden\n */\nvar KForOfContext = /*@__PURE__*/ (function () {\n    function KForOfContext($implicit, kForOf, index, count) {\n        this.$implicit = $implicit;\n        this.kForOf = kForOf;\n        this.index = index;\n        this.count = count;\n    }\n    Object.defineProperty(KForOfContext.prototype, \"first\", {\n        get: function () { return this.index === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KForOfContext.prototype, \"last\", {\n        get: function () { return this.index === this.count - 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KForOfContext.prototype, \"even\", {\n        get: function () { return this.index % 2 === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(KForOfContext.prototype, \"odd\", {\n        get: function () { return !this.even; },\n        enumerable: true,\n        configurable: true\n    });\n    return KForOfContext;\n}());\nexport { KForOfContext };\n/**\n * @hidden\n */\nvar KForOf = /*@__PURE__*/ (function () {\n    function KForOf(_viewContainer, _template, _differs) {\n        this._viewContainer = _viewContainer;\n        this._template = _template;\n        this._differs = _differs;\n        this._differ = null;\n    }\n    Object.defineProperty(KForOf.prototype, \"kForTemplate\", {\n        set: function (value) {\n            if (value) {\n                this._template = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    KForOf.prototype.ngOnChanges = function (changes) {\n        if ('kForOf' in changes) {\n            var value = changes.kForOf.currentValue;\n            if (this._differ || !value) {\n                return;\n            }\n            try {\n                this._differ = this._differs.find(value).create(this.kForTrackBy);\n            }\n            catch (e) {\n                throw new Error(\"Cannot find a differ supporting object '\" + value + \"' of type '\" + getTypeNameForDebugging(value) + \"'.\");\n            }\n        }\n    };\n    KForOf.prototype.ngDoCheck = function () {\n        if (this._differ) {\n            var changes = this._differ.diff(this.kForOf);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    };\n    KForOf.prototype._applyChanges = function (changes) {\n        var viewContainerLength = this._viewContainer.length;\n        var dataLength = this.kForOf.length;\n        var tuples = {};\n        changes.forEachOperation(function (record, _, currentIndex) {\n            if (currentIndex !== null) {\n                tuples[currentIndex] = record.item;\n            }\n        });\n        for (var i = viewContainerLength; i < dataLength; i++) {\n            this._viewContainer.createEmbeddedView(this._template, new KForOfContext(null, this.kForOf, -1, -1), i);\n        }\n        for (var i = this._viewContainer.length; i > dataLength; i--) {\n            this._viewContainer.remove(i);\n        }\n        for (var i = 0; i < this._viewContainer.length; i++) {\n            var view = this._viewContainer.get(i);\n            view.context.index = i;\n            view.context.count = length;\n            view.context.$implicit = tuples[i] || null;\n        }\n    };\n    return KForOf;\n}());\nexport { KForOf };\n/**\n * @hidden\n */\nexport function getTypeNameForDebugging(type) {\n    return type.name || typeof type;\n}\n",null]}