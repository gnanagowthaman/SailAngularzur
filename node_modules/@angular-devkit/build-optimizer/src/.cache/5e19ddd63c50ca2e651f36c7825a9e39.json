{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/virtualization/services/scroller.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/virtualization/services/scroller.service.js","mtime":1529128648039},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nvar normalize = function (x) { return Math.max(x, 0); };\n/**\n * @hidden\n */\nvar ScrollAction = /*@__PURE__*/ (function () {\n    function ScrollAction(offset) {\n        this.offset = offset;\n    }\n    return ScrollAction;\n}());\nexport { ScrollAction };\n/**\n * @hidden\n */\nvar PageAction = /*@__PURE__*/ (function () {\n    function PageAction(skip) {\n        this.skip = skip;\n    }\n    return PageAction;\n}());\nexport { PageAction };\n/**\n * @hidden\n */\nvar ScrollerService = /*@__PURE__*/ (function () {\n    function ScrollerService(scrollObservable) {\n        this.scrollObservable = scrollObservable;\n        this.firstLoaded = 0;\n        this.bottomOffset = 0;\n        this.topOffset = 0;\n    }\n    ScrollerService.prototype.create = function (rowHeightService, skip, take, total, topOffset, bottomOffset) {\n        var _this = this;\n        if (topOffset === void 0) {\n            topOffset = 0;\n        }\n        if (bottomOffset === void 0) {\n            bottomOffset = 0;\n        }\n        this.rowHeightService = rowHeightService;\n        this.firstLoaded = skip;\n        this.lastLoaded = skip + take;\n        this.take = take;\n        this.total = total;\n        this.lastScrollTop = 0;\n        this.topOffset = topOffset;\n        this.bottomOffset = bottomOffset;\n        var subject = new ReplaySubject(2);\n        var offsetBufferRows = this.rowsForHeight(topOffset);\n        var skipWithOffset = normalize(skip - offsetBufferRows);\n        subject.next(new ScrollAction(this.rowOffset(skipWithOffset)));\n        if (offsetBufferRows) {\n            subject.next(new PageAction(skipWithOffset));\n        }\n        this.subscription = Observable.create(function (observer) {\n            _this.unsubscribe();\n            _this.scrollSubscription = _this.scrollObservable.subscribe(function (x) { return _this.onScroll(x, observer); });\n        }).subscribe(function (x) { return subject.next(x); });\n        return subject;\n    };\n    ScrollerService.prototype.destroy = function () {\n        this.unsubscribe();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    ScrollerService.prototype.onScroll = function (_a, observer) {\n        var scrollTop = _a.scrollTop, offsetHeight = _a.offsetHeight;\n        if (this.lastScrollTop === scrollTop) {\n            return;\n        }\n        var up = this.lastScrollTop >= scrollTop;\n        this.lastScrollTop = scrollTop;\n        var firstItemIndex = this.rowHeightService.index(normalize(scrollTop - this.topOffset));\n        var lastItemIndex = this.rowHeightService.index(normalize(scrollTop + offsetHeight - this.bottomOffset));\n        if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {\n            this.firstLoaded = firstItemIndex;\n            observer.next(new ScrollAction(this.rowOffset(firstItemIndex)));\n            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n            observer.next(new PageAction(this.firstLoaded));\n        }\n        if (up && firstItemIndex <= this.firstLoaded) {\n            var nonVisibleBuffer = Math.floor(this.take * 0.3);\n            this.firstLoaded = normalize(firstItemIndex - nonVisibleBuffer);\n            observer.next(new ScrollAction(this.rowOffset(this.firstLoaded)));\n            this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);\n            observer.next(new PageAction(this.firstLoaded));\n        }\n    };\n    ScrollerService.prototype.rowOffset = function (index) {\n        return this.rowHeightService.offset(index) + this.topOffset;\n    };\n    ScrollerService.prototype.rowsForHeight = function (height) {\n        return Math.ceil(height / this.rowHeightService.height(0));\n    };\n    ScrollerService.prototype.unsubscribe = function () {\n        if (this.scrollSubscription) {\n            this.scrollSubscription.unsubscribe();\n            this.scrollSubscription = null;\n        }\n    };\n    return ScrollerService;\n}());\nexport { ScrollerService };\n",null]}