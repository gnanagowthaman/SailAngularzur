{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/focus-group.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/focus-group.js","mtime":1529128658084},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { FocusRoot } from './focus-root';\n/**\n * @hidden\n */\nvar FocusGroup = /*@__PURE__*/ (function () {\n    function FocusGroup(root) {\n        this.root = root;\n        this.active = true;\n        this.children = [];\n        this.root.registerGroup(this);\n    }\n    Object.defineProperty(FocusGroup.prototype, \"focusableChildren\", {\n        get: function () {\n            return this.children.filter(function (el) { return el.canFocus(); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FocusGroup.prototype, \"isActive\", {\n        get: function () {\n            return this.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FocusGroup.prototype.ngOnDestroy = function () {\n        this.root.unregisterGroup(this);\n    };\n    FocusGroup.prototype.registerElement = function (element) {\n        this.unregisterElement(element);\n        this.children.push(element);\n    };\n    FocusGroup.prototype.unregisterElement = function (element) {\n        this.children = this.children.filter(function (f) { return f !== element; });\n    };\n    /**\n     * Returns a boolean value indicating if the group should receive focus when the cell is focused.\n     *\n     * The condition is to have a single \"simple\" focusable element such as a button or a checkbox.\n     */\n    FocusGroup.prototype.isNavigable = function () {\n        var focusable = this.focusableChildren;\n        return focusable.length === 1 && focusable[0].isNavigable();\n    };\n    FocusGroup.prototype.canFocus = function () {\n        return this.focusableChildren.length > 0;\n    };\n    FocusGroup.prototype.focus = function () {\n        if (this.canFocus() && !this.hasFocus()) {\n            this.focusableChildren[0].focus();\n        }\n    };\n    FocusGroup.prototype.activate = function () {\n        this.toggleState(true);\n    };\n    FocusGroup.prototype.deactivate = function () {\n        this.toggleState(false);\n    };\n    FocusGroup.prototype.hasFocus = function () {\n        return this.children.reduce(function (focused, element) { return focused || element.hasFocus(); }, false);\n    };\n    FocusGroup.prototype.toggleState = function (value) {\n        if (this.active !== value) {\n            this.active = value;\n            this.children.forEach(function (f) { return f.updateState(); });\n        }\n    };\n    return FocusGroup;\n}());\nexport { FocusGroup };\n",null]}