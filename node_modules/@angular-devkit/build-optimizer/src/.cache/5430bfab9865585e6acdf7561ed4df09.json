{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/services/bus-view.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/services/bus-view.service.js","mtime":1529128638222},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter, Injectable, Injector } from '@angular/core';\nimport { CenturyViewService } from '../services/century-view.service';\nimport { DecadeViewService } from '../services/decade-view.service';\nimport { MonthViewService } from '../services/month-view.service';\nimport { YearViewService } from '../services/year-view.service';\nimport { CalendarViewEnum } from '../models/view.enum';\nvar services = (_a = {},\n    _a[CalendarViewEnum.month] = MonthViewService,\n    _a[CalendarViewEnum.year] = YearViewService,\n    _a[CalendarViewEnum.decade] = DecadeViewService,\n    _a[CalendarViewEnum.century] = CenturyViewService,\n    _a);\nvar viewOffset = function (view, offset) {\n    var candidate = CalendarViewEnum[CalendarViewEnum[view + offset]];\n    return candidate !== undefined ? candidate : view;\n};\n/**\n * @hidden\n */\nvar BusViewService = /*@__PURE__*/ (function () {\n    function BusViewService(injector) {\n        this.injector = injector;\n        this.viewChanged = new EventEmitter();\n        this.bottom = CalendarViewEnum.month;\n        this.top = CalendarViewEnum.century;\n    }\n    BusViewService.prototype.configure = function (bottom, top) {\n        this.bottom = bottom;\n        this.top = top;\n    };\n    BusViewService.prototype.service = function (view) {\n        var serviceType = services[view];\n        return serviceType ? this.injector.get(serviceType) : null;\n    };\n    BusViewService.prototype.moveDown = function (view) {\n        this.move(view, -1);\n    };\n    BusViewService.prototype.moveUp = function (view) {\n        this.move(view, 1);\n    };\n    BusViewService.prototype.moveToBottom = function (activeView) {\n        if (activeView === this.bottom) {\n            return;\n        }\n        this.viewChanged.emit({ view: this.bottom });\n    };\n    BusViewService.prototype.canMoveDown = function (view) {\n        return this.bottom < view;\n    };\n    BusViewService.prototype.canMoveUp = function (view) {\n        return view < this.top;\n    };\n    BusViewService.prototype.clamp = function (view) {\n        if (view < this.bottom) {\n            return this.bottom;\n        }\n        if (view > this.top) {\n            return this.top;\n        }\n        return view;\n    };\n    BusViewService.prototype.move = function (view, offset) {\n        var candidate = this.clamp(viewOffset(view, offset));\n        if (candidate === view) {\n            return;\n        }\n        this.viewChanged.emit({ view: candidate });\n    };\n    return BusViewService;\n}());\nexport { BusViewService };\nvar _a;\n",null]}