{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-buttons/dist/es/button/button.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-buttons/dist/es/button/button.directive.js","mtime":1529128637510},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Renderer2 as Renderer, Output, Optional } from '@angular/core';\nimport { KendoButtonService } from './button.service';\nimport { isDocumentAvailable } from '../util';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\n/**\n * Represents the Kendo UI Button component for Angular.\n */\nvar ButtonDirective = /*@__PURE__*/ (function () {\n    function ButtonDirective(element, renderer, service, localization) {\n        var _this = this;\n        this.service = service;\n        /**\n         * Provides visual styling that indicates if the Button is active.\n         * By default, `togglable` is set to `false`.\n         */\n        this.togglable = false;\n        /**\n         * Adds visual weight to the Button and makes it primary.\n         */\n        this.primary = false;\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         * The available values are:\n         * * `bare`\n         * * `flat`\n         * * `outline`\n         */\n        this.look = 'default';\n        this.isDisabled = false;\n        this.isIcon = false;\n        this.isIconClass = false;\n        /**\n         * Sets the selected state of the Button.\n         */\n        this.selected = false;\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabIndex = 0;\n        /**\n         * Fires each time the selected state of a togglable button is changed.\n         *\n         * The event argument is the new selected state (boolean).\n         */\n        this.selectedChange = new EventEmitter();\n        this.direction = localization.rtl ? 'rtl' : 'ltr';\n        this.localizationChangeSubscription = localization.changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.element = element.nativeElement;\n        this.renderer = renderer;\n    }\n    Object.defineProperty(ButtonDirective.prototype, \"icon\", {\n        /**\n         * Defines the name for an existing icon in a Kendo UI theme.\n         * The icon is rendered inside the Button by a `span.k-icon` element.\n         */\n        set: function (icon) {\n            var _this = this;\n            if (icon) {\n                this.iconSetter(icon, function () {\n                    _this.isIcon = true;\n                    var classes = 'k-icon k-i-' + icon;\n                    _this.addIcon(classes);\n                });\n            }\n            else {\n                this.isIcon = false;\n                this.updateIconNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"iconClass\", {\n        /**\n         * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;\n         * which are applied to a `span` element inside the Button. Allows the usage of custom icons.\n         */\n        set: function (iconClassName) {\n            var _this = this;\n            if (iconClassName) {\n                this.iconSetter(iconClassName, function () {\n                    _this.isIconClass = true;\n                    _this.addIcon(iconClassName);\n                });\n            }\n            else {\n                this.isIconClass = false;\n                this.updateIconNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"imageUrl\", {\n        /**\n         * Defines a URL which is used for an `img` element inside the Button.\n         * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.\n         */\n        set: function (imageUrl) {\n            if (imageUrl) {\n                this.iconSetter(imageUrl, this.addImgIcon.bind(this));\n            }\n            else {\n                this.removeImageNode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"disabled\", {\n        /**\n         * If set to `true`, it disables the Button.\n         */\n        set: function (disabled) {\n            this.isDisabled = disabled;\n            this.renderer.setProperty(this.element, 'disabled', disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classButton\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classDisabled\", {\n        get: function () {\n            return this.isDisabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classPrimary\", {\n        get: function () {\n            return this.primary;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isBare\", {\n        get: function () {\n            return this.look === 'bare';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isFlat\", {\n        get: function () {\n            return this.look === 'flat';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"isOutline\", {\n        get: function () {\n            return this.look === 'outline';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonDirective.prototype, \"classActive\", {\n        get: function () {\n            return this.selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ButtonDirective.prototype.onClick = function () {\n        if (!this.togglable) {\n            return;\n        }\n        if (!this.disabled && this.service) {\n            this.service.click(this);\n        }\n        if (!this.service) {\n            this.setSelected(!this.selected);\n        }\n    };\n    Object.defineProperty(ButtonDirective.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ButtonDirective.prototype.ngAfterViewChecked = function () {\n        var hasIcon = this.isIcon || this.isIconClass || this.imageNode;\n        var hasText = this.hasText();\n        this.toggleClass('k-button-icon', hasIcon && !hasText);\n        this.toggleClass('k-button-icontext', hasIcon && hasText);\n    };\n    ButtonDirective.prototype.ngOnDestroy = function () {\n        this.imageNode = null;\n        this.iconNode = null;\n        this.renderer = null;\n        this.localizationChangeSubscription.unsubscribe();\n    };\n    /**\n     * Focuses the Button component.\n     */\n    ButtonDirective.prototype.focus = function () {\n        if (isDocumentAvailable()) {\n            this.element.focus();\n        }\n    };\n    /**\n     * Blurs the Button component.\n     */\n    ButtonDirective.prototype.blur = function () {\n        if (isDocumentAvailable()) {\n            this.element.blur();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ButtonDirective.prototype.setAttribute = function (attribute, value) {\n        this.renderer.setAttribute(this.element, attribute, value);\n    };\n    /**\n     * @hidden\n     *\n     * Internal setter that triggers selectedChange\n     */\n    ButtonDirective.prototype.setSelected = function (value) {\n        var changed = this.selected !== value;\n        this.selected = value;\n        if (changed) {\n            this.selectedChange.emit(value);\n        }\n    };\n    ButtonDirective.prototype.hasText = function () {\n        if (isDocumentAvailable()) {\n            return this.element.innerText.length > 0;\n        }\n        else {\n            return false;\n        }\n    };\n    ButtonDirective.prototype.addImgIcon = function (imageUrl) {\n        var renderer = this.renderer;\n        if (this.imageNode) {\n            renderer.setProperty(this.imageNode, 'src', imageUrl);\n        }\n        else if (isDocumentAvailable()) {\n            this.imageNode = renderer.createElement('img');\n            renderer.setProperty(this.imageNode, 'src', imageUrl);\n            renderer.setProperty(this.imageNode, 'className', 'k-image');\n            renderer.setAttribute(this.imageNode, 'role', 'presentation');\n            this.prependChild(this.imageNode);\n        }\n    };\n    ButtonDirective.prototype.addIcon = function (classNames) {\n        var renderer = this.renderer;\n        if (this.iconNode) {\n            renderer.setProperty(this.iconNode, 'className', classNames);\n        }\n        else if (isDocumentAvailable()) {\n            this.iconNode = renderer.createElement('span');\n            renderer.setProperty(this.iconNode, 'className', classNames);\n            renderer.setAttribute(this.iconNode, 'role', 'presentation');\n            this.prependChild(this.iconNode);\n        }\n    };\n    ButtonDirective.prototype.prependChild = function (node) {\n        var _this = this;\n        setTimeout(function () {\n            if (_this.renderer && node !== _this.element.firstChild) {\n                _this.renderer.insertBefore(_this.element, node, _this.element.firstChild);\n            }\n        });\n    };\n    ButtonDirective.prototype.iconSetter = function (icon, insertIcon) {\n        if (icon) {\n            insertIcon(icon);\n        }\n    };\n    ButtonDirective.prototype.removeImageNode = function () {\n        if (this.imageNode && this.renderer.parentNode(this.imageNode)) {\n            this.renderer.removeChild(this.element, this.imageNode);\n            this.imageNode = null;\n        }\n    };\n    ButtonDirective.prototype.removeIconNode = function () {\n        if (this.iconNode && this.renderer.parentNode(this.iconNode)) {\n            this.renderer.removeChild(this.element, this.iconNode);\n            this.iconNode = null;\n        }\n    };\n    ButtonDirective.prototype.updateIconNode = function () {\n        if (!this.isIcon && !this.isIconClass) {\n            this.removeIconNode();\n        }\n    };\n    ButtonDirective.prototype.toggleClass = function (className, add) {\n        if (add) {\n            this.renderer.addClass(this.element, className);\n        }\n        else {\n            this.renderer.removeClass(this.element, className);\n        }\n    };\n    return ButtonDirective;\n}());\nexport { ButtonDirective };\n",null]}