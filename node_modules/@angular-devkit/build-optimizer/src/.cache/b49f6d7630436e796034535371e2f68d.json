{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selectall-checkbox.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selectall-checkbox.directive.js","mtime":1529128667275},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, HostBinding, Renderer2, ElementRef, Input, Output, EventEmitter, NgZone } from '@angular/core';\nimport { SelectionService } from './selection.service';\nimport { isPresent } from \"../utils\";\n/**\n * Represents the select-all checkbox feature of the Grid.\n */\nvar SelectAllCheckboxDirective = /*@__PURE__*/ (function () {\n    function SelectAllCheckboxDirective(selectionService, el, renderer, ngZone) {\n        var _this = this;\n        this.selectionService = selectionService;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        /**\n         * Fires when the user clicks the select-all checkbox (`kendoGridSelectAllCheckbox`).\n         * For more information, refer to the section on the\n         * [select-all feature]({% slug selection_grid %}#toc-select-all-feature) of the Grid.\n         */\n        this.selectAllChange = new EventEmitter();\n        this.type = \"checkbox\";\n        this.stateSet = false;\n        this.ngZone.runOutsideAngular(function () {\n            _this.destroyClick = _this.renderer.listen(_this.el.nativeElement, \"click\", _this.onClick.bind(_this));\n        });\n    }\n    SelectAllCheckboxDirective.prototype.ngAfterContentChecked = function () {\n        this.setState();\n    };\n    SelectAllCheckboxDirective.prototype.ngOnChanges = function () {\n        this.stateSet = true;\n    };\n    SelectAllCheckboxDirective.prototype.ngOnDestroy = function () {\n        if (this.destroyClick) {\n            this.destroyClick();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SelectAllCheckboxDirective.prototype.onClick = function () {\n        var _this = this;\n        var isChecked = this.el.nativeElement.checked;\n        var options = this.selectionService.options;\n        this.selectAllChange.emit(isChecked ? \"checked\" : \"unchecked\");\n        if (options.enabled && options.mode === \"multiple\") {\n            this.ngZone.run(function () {\n                _this.selectionService.updateAll(isChecked);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    SelectAllCheckboxDirective.prototype.setState = function () {\n        var state = this.stateSet ? this.stateToBool() : this.selectionService.selectAllState;\n        var elem = this.el.nativeElement;\n        this.renderer.setProperty(elem, \"indeterminate\", !isPresent(state));\n        this.renderer.setProperty(elem, \"checked\", isPresent(state) ? state : false);\n    };\n    /**\n     * @hidden\n     */\n    SelectAllCheckboxDirective.prototype.stateToBool = function () {\n        switch (this.state) {\n            case \"checked\":\n                return true;\n            case \"unchecked\":\n                return false;\n            default:\n                return undefined;\n        }\n    };\n    return SelectAllCheckboxDirective;\n}());\nexport { SelectAllCheckboxDirective };\n",null]}