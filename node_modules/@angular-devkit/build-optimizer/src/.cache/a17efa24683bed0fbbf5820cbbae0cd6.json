{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-excel-export/dist/es/excel-export.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-excel-export/dist/es/excel-export.component.js","mtime":1519741763000},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ContentChildren, Input, QueryList, Inject, Optional } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { workbookOptions, toDataURL, isWorkbookOptions } from './ooxml/workbook';\nimport { ColumnBase } from './columns/column-base';\n/**\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\nvar ExcelExportComponent = /*@__PURE__*/ (function () {\n    function ExcelExportComponent(rtl) {\n        this.rtl = rtl;\n        /**\n         * Specifies the file name of the file exported to Excel.\n         * @default \"Export.xlsx\"\n         */\n        this.fileName = 'Export.xlsx';\n        /**\n         * @hidden\n         */\n        this.columns = new QueryList();\n        this.saveFile = this.saveFile.bind(this);\n    }\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that is to be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     */\n    ExcelExportComponent.prototype.save = function (exportData) {\n        this.toDataURL(exportData).then(this.saveFile);\n    };\n    /**\n     * Returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) based on the specified columns and data.\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    ExcelExportComponent.prototype.workbookOptions = function (exportData) {\n        var currentData = this.getExportData(exportData);\n        var options = workbookOptions({\n            columns: this.columns,\n            data: currentData.data,\n            group: currentData.group,\n            filterable: this.filterable,\n            creator: this.creator,\n            date: this.date,\n            rtl: this.rtl,\n            paddingCellOptions: this.paddingCellOptions,\n            headerPaddingCellOptions: this.headerPaddingCellOptions\n        });\n        return options;\n    };\n    /**\n     * Returns a promise which will be resolved with the file data URI.\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that are to be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    ExcelExportComponent.prototype.toDataURL = function (exportData) {\n        var options = isWorkbookOptions(exportData) ?\n            exportData :\n            this.workbookOptions(exportData);\n        return toDataURL(options);\n    };\n    ExcelExportComponent.prototype.getExportData = function (exportData) {\n        var result;\n        if (exportData) {\n            if (Array.isArray(exportData)) {\n                result = {\n                    data: exportData\n                };\n            }\n            else {\n                result = exportData;\n            }\n        }\n        else {\n            result = {\n                data: this.data,\n                group: this.group\n            };\n        }\n        return result;\n    };\n    ExcelExportComponent.prototype.saveFile = function (dataURL) {\n        saveAs(dataURL, this.fileName, {\n            forceProxy: this.forceProxy,\n            proxyURL: this.proxyURL\n        });\n    };\n    return ExcelExportComponent;\n}());\nexport { ExcelExportComponent };\n",null]}