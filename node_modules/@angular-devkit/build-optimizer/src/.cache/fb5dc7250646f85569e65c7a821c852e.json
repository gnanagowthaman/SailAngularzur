{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/data/data.iterators.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/data/data.iterators.js","mtime":1529128642403},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\n/* tslint:disable:use-life-cycle-interface */\nimport { iterator } from 'rxjs/symbol/iterator';\nimport { isPresent } from '../utils';\nvar isGroupItem = function (source) {\n    return source.items !== undefined &&\n        source.field !== undefined;\n};\nvar isVirtualGroupItem = function (source) {\n    return source.offset !== undefined &&\n        source.skipHeader !== undefined;\n};\nvar flattenGroups = function (groups) {\n    return (groups.reduce(function (acc, curr) {\n        if (isGroupItem(curr)) {\n            return acc.concat(flattenGroups(curr.items));\n        }\n        return acc.concat([curr]);\n    }, []) // tslint:disable-line:align\n    );\n};\n/**\n * @hidden\n */\nexport var itemAt = function (data, index) {\n    var first = data[0];\n    if (isPresent(first) && isGroupItem(first)) {\n        return flattenGroups(data)[index];\n    }\n    return data[index];\n};\n/**\n * @hidden\n */\nexport var getIterator = function (data, _a) {\n    var footers = _a.footers, level = _a.level, dataIndex = _a.dataIndex, parentGroupIndex = _a.parentGroupIndex, groupIndex = _a.groupIndex;\n    var first = data[0];\n    if (isPresent(first) && isGroupItem(first)) {\n        if (isVirtualGroupItem(first)) {\n            groupIndex = isPresent(first.offset) ? first.offset : groupIndex;\n        }\n        //tslint:disable-next-line:no-use-before-declare\n        return new GroupIterator(data, footers, level, dataIndex, parentGroupIndex, groupIndex);\n    }\n    //tslint:disable-next-line:no-use-before-declare\n    return new ItemIterator(data, dataIndex, parentGroupIndex);\n};\nvar ArrayIterator = /*@__PURE__*/ (function () {\n    function ArrayIterator(arr, idx) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.arr = arr || [];\n    }\n    ArrayIterator.prototype[iterator] = function () {\n        return this;\n    };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.arr.length ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : { done: true, value: undefined };\n    };\n    return ArrayIterator;\n}());\n/**\n * @hidden\n */\nvar Iterator = /*@__PURE__*/ (function () {\n    function Iterator(arr, dataIndex, resultMap) {\n        if (dataIndex === void 0) {\n            dataIndex = 0;\n        }\n        if (resultMap === void 0) {\n            resultMap = function (x) { return x; };\n        }\n        this.dataIndex = dataIndex;\n        this.resultMap = resultMap;\n        var iter = arr[iterator];\n        this._innerIterator = iter ? arr[iterator]() : new ArrayIterator(arr);\n    }\n    Iterator.prototype[iterator] = function () {\n        return this;\n    };\n    Iterator.prototype.next = function () {\n        return this.resultMap(this._innerIterator.next(), this.dataIndex++);\n    };\n    return Iterator;\n}());\nexport { Iterator };\n/**\n * @hidden\n */\nvar ItemIterator = (function (_super) {\n    tslib_1.__extends(ItemIterator, _super);\n    function ItemIterator(arr, dataIndex, groupIndex) {\n        return _super.call(this, arr, dataIndex, function (x, idx) {\n            return ({\n                done: x.done,\n                value: {\n                    data: x.value,\n                    groupIndex: groupIndex,\n                    index: idx,\n                    type: 'data'\n                }\n            });\n        }) || this;\n    }\n    Object.defineProperty(ItemIterator.prototype, \"index\", {\n        /**\n         * The index of the next record.\n         * @readonly\n         * @type {number}\n         */\n        get: function () {\n            return this.dataIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ItemIterator;\n}(Iterator));\nexport { ItemIterator };\nvar prefix = function (s, n) {\n    var p = s ? s + \"_\" : s;\n    return \"\" + p + n;\n};\n/**\n * @hidden\n */\nvar GroupIterator = /*@__PURE__*/ (function () {\n    function GroupIterator(arr, outputFooters, level, dataIndex, parentIndex, groupIndex) {\n        if (outputFooters === void 0) {\n            outputFooters = false;\n        }\n        if (level === void 0) {\n            level = 0;\n        }\n        if (dataIndex === void 0) {\n            dataIndex = 0;\n        }\n        if (parentIndex === void 0) {\n            parentIndex = \"\";\n        }\n        if (groupIndex === void 0) {\n            groupIndex = 0;\n        }\n        this.arr = arr;\n        this.outputFooters = outputFooters;\n        this.level = level;\n        this.dataIndex = dataIndex;\n        this.parentIndex = parentIndex;\n        this.groupIndex = groupIndex;\n        this.currentGroupIndex = \"\";\n        this.arr = arr || [];\n        this._iterator = new Iterator(this.arr, this.dataIndex);\n    }\n    GroupIterator.prototype[iterator] = function () {\n        return this;\n    };\n    GroupIterator.prototype.nextGroupItem = function () {\n        this.current = this._iterator.next().value;\n        this._innerIterator = null;\n        if (this.current) {\n            this.currentGroupIndex = prefix(this.parentIndex, this.groupIndex++);\n            return {\n                done: false,\n                value: {\n                    data: this.current,\n                    index: this.currentGroupIndex,\n                    level: this.level,\n                    type: 'group'\n                }\n            };\n        }\n        else {\n            this.current = null;\n            return { done: true, value: undefined };\n        }\n    };\n    GroupIterator.prototype.footerItem = function () {\n        if (this.current) {\n            var group = this.current;\n            this.current = null;\n            return {\n                done: false,\n                value: {\n                    data: group,\n                    groupIndex: this.currentGroupIndex,\n                    level: this.level,\n                    type: 'footer'\n                }\n            };\n        }\n        else {\n            this.current = null;\n            return { done: true, value: undefined };\n        }\n    };\n    GroupIterator.prototype.innerIterator = function (group) {\n        if (!this._innerIterator) {\n            this._innerIterator = getIterator(group.items, {\n                dataIndex: this.dataIndex,\n                footers: this.outputFooters,\n                level: this.level + 1,\n                parentGroupIndex: this.currentGroupIndex\n            });\n        }\n        return this._innerIterator;\n    };\n    GroupIterator.prototype.nextDataItem = function (group) {\n        var iterator = this.innerIterator(group);\n        var result = iterator.next();\n        if (isPresent(result.value) && !result.done && result.value.type === \"data\") {\n            this.dataIndex = result.value.index + 1;\n        }\n        return !result.done ? result : undefined;\n    };\n    GroupIterator.prototype.next = function () {\n        if (!isPresent(this.current)) {\n            return this.nextGroupItem();\n        }\n        var item = this.nextDataItem(this.current);\n        return item ? item : (this.outputFooters ? this.footerItem() : this.nextGroupItem());\n    };\n    Object.defineProperty(GroupIterator.prototype, \"index\", {\n        /**\n         * The index of the last iterated data record.\n         * @readonly\n         * @type {number}\n         */\n        get: function () {\n            return this.dataIndex + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GroupIterator;\n}());\nexport { GroupIterator };\n",null]}