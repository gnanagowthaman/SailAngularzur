{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/grouping/group-panel.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/grouping/group-panel.component.js","mtime":1529128654826},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, QueryList, ViewChildren, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from \"rxjs/Subscription\";\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { and, isNullOrEmptyString, observe, or } from '../utils';\nimport { GroupInfoService } from './group-info.service';\nimport { DropTargetDirective } from '../dragdrop/drop-target.directive';\nimport { DragHintService } from '../dragdrop/drag-hint.service';\nimport { DropCueService } from '../dragdrop/drop-cue.service';\nimport { position, isTargetBefore } from '../dragdrop/common';\nimport { from } from 'rxjs/observable/from';\nimport { merge } from 'rxjs/observable/merge';\nimport { tap } from 'rxjs/operators/tap';\nimport { filter } from 'rxjs/operators/filter';\nimport { switchMapTo } from 'rxjs/operators/switchMapTo';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nvar withoutField = function (_a) {\n    var field = _a.field;\n    return isNullOrEmptyString(field);\n};\nvar alreadyGrouped = function (_a) {\n    var groups = _a.groups, field = _a.field;\n    return groups.some(function (group) { return group.field === field; });\n};\nvar overSameTarget = function (_a) {\n    var target = _a.target, field = _a.field;\n    return target.field === field;\n};\nvar overLastTarget = function (_a) {\n    var target = _a.target;\n    return target.lastTarget;\n};\nvar isLastGroup = function (_a) {\n    var groups = _a.groups, field = _a.field;\n    return groups.map(function (group) { return group.field; }).indexOf(field) === groups.length - 1;\n};\nvar isNotGroupable = function (groupsService) {\n    return function (_a) {\n        var field = _a.field;\n        return !groupsService.isGroupable(field);\n    };\n};\nvar columnRules = function (groupService) { return or(withoutField, alreadyGrouped, isNotGroupable(groupService)); };\nvar indicatorRules = or(overSameTarget, and(overLastTarget, isLastGroup));\n/**\n * @hidden\n */\nvar GroupPanelComponent = /*@__PURE__*/ (function () {\n    function GroupPanelComponent(hint, cue, groupInfoService, localization, cd) {\n        this.hint = hint;\n        this.cue = cue;\n        this.groupInfoService = groupInfoService;\n        this.localization = localization;\n        this.cd = cd;\n        this.change = new EventEmitter();\n        this.groups = [];\n        this.dropTargets = new QueryList();\n        this.subscription = new Subscription();\n    }\n    Object.defineProperty(GroupPanelComponent.prototype, \"groupHeaderClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GroupPanelComponent.prototype, \"text\", {\n        get: function () {\n            return this.emptyText ? this.emptyText : this.localization.get('groupPanelEmpty');\n        },\n        set: function (value) {\n            this.emptyText = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GroupPanelComponent.prototype.ngAfterViewInit = function () {\n        this.subscription.add(observe(this.dropTargets)\n            .subscribe(this.attachTargets.bind(this)));\n    };\n    GroupPanelComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription.add(this.localization.changes.subscribe(function () { return _this.cd.markForCheck(); }));\n    };\n    GroupPanelComponent.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        if (this.targetSubscription) {\n            this.targetSubscription.unsubscribe();\n        }\n    };\n    GroupPanelComponent.prototype.directionChange = function (group) {\n        var index = this.groups.findIndex(function (x) { return x.field === group.field; });\n        var groups = this.groups.slice(0, index).concat([group], this.groups.slice(index + 1));\n        this.change.emit(groups);\n    };\n    GroupPanelComponent.prototype.insert = function (field, index) {\n        var groups = this.groups.filter(function (x) { return x.field !== field; });\n        if (groups.length || this.groups.length === 0) {\n            this.change.emit(groups.slice(0, index).concat([{ field: field }], groups.slice(index)));\n        }\n    };\n    GroupPanelComponent.prototype.remove = function (group) {\n        this.change.emit(this.groups.filter(function (x) { return x.field !== group.field; }));\n    };\n    GroupPanelComponent.prototype.canDrop = function (draggable, target) {\n        var isIndicator = draggable.type === 'groupIndicator';\n        var rules = isIndicator\n            ? indicatorRules\n            : columnRules(this.groupInfoService);\n        return !rules({\n            field: draggable.field,\n            groups: this.groups,\n            target: target\n        });\n    };\n    GroupPanelComponent.prototype.attachTargets = function () {\n        var _this = this;\n        if (this.targetSubscription) {\n            this.targetSubscription.unsubscribe();\n        }\n        this.targetSubscription = new Subscription();\n        var enterStream = this.dropTargets\n            .reduce(function (acc, target) { return merge(acc, target.enter); }, from([]));\n        var leaveStream = this.dropTargets\n            .reduce(function (acc, target) { return merge(acc, target.leave); }, from([]));\n        var dropStream = this.dropTargets\n            .reduce(function (acc, target) { return merge(acc, target.drop); }, from([]));\n        this.targetSubscription.add(enterStream.pipe(tap(function (_) { return _this.hint.removeLock(); }), filter(function (_a) {\n            var draggable = _a.draggable, target = _a.target;\n            return _this.canDrop(draggable.context, target.context);\n        }), tap(this.enter.bind(this)), switchMapTo(dropStream.pipe(takeUntil(leaveStream.pipe(tap(this.leave.bind(this))))))).subscribe(this.drop.bind(this)));\n    };\n    GroupPanelComponent.prototype.enter = function (_a) {\n        var draggable = _a.draggable, target = _a.target;\n        this.hint.enable();\n        var before = target.context.lastTarget || isTargetBefore(draggable.element.nativeElement, target.element.nativeElement);\n        this.cue.position(position(target.element.nativeElement, before));\n    };\n    GroupPanelComponent.prototype.leave = function () {\n        this.hint.disable();\n        this.cue.hide();\n    };\n    GroupPanelComponent.prototype.drop = function (_a) {\n        var target = _a.target, draggable = _a.draggable;\n        var field = draggable.context.field;\n        var index = this.dropTargets.toArray().indexOf(target);\n        this.insert(field, index);\n    };\n    return GroupPanelComponent;\n}());\nexport { GroupPanelComponent };\n",null]}