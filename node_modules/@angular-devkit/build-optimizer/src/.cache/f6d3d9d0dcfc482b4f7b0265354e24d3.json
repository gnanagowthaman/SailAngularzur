{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/numerictextbox/utils.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/numerictextbox/utils.js","mtime":1529128638158},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { POINT } from './constants';\n/**\n * @hidden\n */\nexport var numericRegex = function (options) {\n    var autoCorrect = options.autoCorrect, decimals = options.decimals, min = options.min;\n    var separator = options.separator;\n    if (separator === POINT) {\n        separator = '\\\\' + separator;\n    }\n    var signPattern = autoCorrect && min !== null && min >= 0 ? '' : '-?';\n    var numberPattern;\n    if (decimals === 0) {\n        numberPattern = '\\\\d*';\n    }\n    else {\n        numberPattern = \"(?:(?:\\\\d+(\" + separator + \"\\\\d*)?)|(?:\" + separator + \"\\\\d*))?\";\n    }\n    return new RegExp(\"^\" + signPattern + numberPattern + \"$\");\n};\n/**\n * @hidden\n */\nexport var decimalPart = function (value) {\n    return value >= 0 ? Math.floor(value) : Math.ceil(value);\n};\n/**\n * @hidden\n */\nexport var noop = function (_) { }; // tslint:disable-line:no-empty\n/**\n * @hidden\n */\nexport var defined = function (value) {\n    return typeof value !== 'undefined';\n};\n/**\n * @hidden\n */\nexport var isNumber = function (value) {\n    return !isNaN(value) && value !== null;\n};\n/**\n * @hidden\n */\nexport function pad(value, digits) {\n    var count = digits - String(value).length;\n    var result = value;\n    if (count > 0) {\n        var padString = new Array(count + 1).join(\"0\");\n        result = parseFloat(value + padString);\n    }\n    return result;\n}\n",null]}