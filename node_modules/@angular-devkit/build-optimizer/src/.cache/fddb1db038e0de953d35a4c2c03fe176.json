{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/pager/pager-context.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/pager/pager-context.service.js","mtime":1529128660185},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Subject } from \"rxjs/Subject\";\n/**\n * @hidden\n */\nvar PagerContextService = /*@__PURE__*/ (function () {\n    function PagerContextService() {\n        this.changes = new Subject();\n        this.pageChange = new Subject();\n    }\n    Object.defineProperty(PagerContextService.prototype, \"currentPage\", {\n        get: function () {\n            return this.skip / this.pageSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PagerContextService.prototype.notifyChanges = function (changes) {\n        this.total = changes.total;\n        this.pageSize = changes.pageSize;\n        this.skip = changes.skip;\n        this.changes.next(changes);\n    };\n    PagerContextService.prototype.changePage = function (page) {\n        this.pageChange.next({ skip: page * this.pageSize, take: this.pageSize });\n    };\n    PagerContextService.prototype.changePageSize = function (value) {\n        this.pageChange.next({ skip: 0, take: value });\n    };\n    PagerContextService.prototype.nextPage = function () {\n        var nextPage = this.currentPage + 1;\n        if (nextPage * this.pageSize <= this.total) {\n            this.changePage(nextPage);\n        }\n    };\n    PagerContextService.prototype.prevPage = function () {\n        var prevPage = this.currentPage - 1;\n        if (prevPage * this.pageSize >= 0) {\n            this.changePage(prevPage);\n        }\n    };\n    return PagerContextService;\n}());\nexport { PagerContextService };\n",null]}