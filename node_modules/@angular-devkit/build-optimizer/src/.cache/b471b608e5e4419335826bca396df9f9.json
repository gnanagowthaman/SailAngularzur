{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selection-default.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selection-default.js","mtime":1529128667331},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:no-input-rename */\nimport { Input, EventEmitter, Output } from '@angular/core';\nimport { isPresent } from \"../utils\";\n/**\n * @hidden\n */\nvar Selection = /*@__PURE__*/ (function () {\n    function Selection(grid, cd) {\n        this.grid = grid;\n        this.cd = cd;\n        /**\n         * Defines the collection that will store the selected item keys.\n         */\n        this.selectedKeys = [];\n        /**\n         * Fires when the `selectedKeys` collection has been updated.\n         */\n        this.selectedKeysChange = new EventEmitter();\n        this.init();\n    }\n    Selection.prototype.init = function () {\n        var _this = this;\n        if (!isPresent(this.grid.rowSelected)) {\n            this.grid.rowSelected = function (row) {\n                return _this.selectedKeys.indexOf(_this.getItemKey(row)) >= 0;\n            };\n        }\n        this.selectionChangeSubscription = this.grid\n            .selectionChange\n            .subscribe(this.onSelectionChange.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    Selection.prototype.destroy = function () {\n        this.selectionChangeSubscription.unsubscribe();\n    };\n    /**\n     * @hidden\n     */\n    Selection.prototype.reset = function () {\n        this.selectedKeys.splice(0, this.selectedKeys.length);\n    };\n    Selection.prototype.getItemKey = function (row) {\n        if (this.selectionKey) {\n            if (typeof this.selectionKey === \"string\") {\n                return row.dataItem[this.selectionKey];\n            }\n            if (typeof this.selectionKey === \"function\") {\n                return this.selectionKey(row);\n            }\n        }\n        return row.index;\n    };\n    Selection.prototype.onSelectionChange = function (selection) {\n        var _this = this;\n        selection.deselectedRows.forEach(function (item) {\n            var itemKey = _this.getItemKey(item);\n            var itemIndex = _this.selectedKeys.indexOf(itemKey);\n            if (itemIndex >= 0) {\n                _this.selectedKeys.splice(itemIndex, 1);\n            }\n        });\n        if (this.grid.selectableSettings.mode === \"single\" && this.selectedKeys.length > 0) {\n            this.reset();\n        }\n        selection.selectedRows.forEach(function (item) {\n            var itemKey = _this.getItemKey(item);\n            if (_this.selectedKeys.indexOf(itemKey) < 0) {\n                _this.selectedKeys.push(itemKey);\n            }\n        });\n        this.cd.markForCheck();\n        this.selectedKeysChange.emit(this.selectedKeys);\n    };\n    return Selection;\n}());\nexport { Selection };\n",null]}