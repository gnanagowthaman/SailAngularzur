{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-data-query/dist/es/odata-filtering.operators.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-data-query/dist/es/odata-filtering.operators.js","mtime":1529128637629},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { isCompositeFilterDescriptor } from './filtering/filter-descriptor.interface';\nimport { compose, either } from './funcs';\nimport { formatDate, normalizeField, quote, toLower, isDateValue, isStringValue, serializeFilters, encodeValue } from './filter-serialization.common';\nvar fnFormatter = function (operator) { return function (_a) {\n    var field = _a.field, value = _a.value;\n    return operator + \"(\" + field + \",\" + value + \")\";\n}; };\nvar singleOperatorFormatter = function (operator) { return function (_a) {\n    var field = _a.field, value = _a.value;\n    return field + \" \" + operator + \" \" + value;\n}; };\nvar stringFormat = function (formatter) { return compose(formatter, encodeValue, quote, toLower, normalizeField); };\nvar stringFnOperator = function (operator) { return stringFormat(fnFormatter(operator)); };\nvar stringOperator = function (operator) { return stringFormat(singleOperatorFormatter(operator)); };\nvar numericOperator = function (operator) { return compose(singleOperatorFormatter(operator), normalizeField); };\nvar dateOperator = function (operator) { return compose(singleOperatorFormatter(operator), normalizeField, formatDate); };\nvar ifDate = function (operator) { return either(isDateValue, dateOperator(operator), numericOperator(operator)); };\nvar typedOperator = function (operator) { return either(isStringValue, stringOperator(operator), ifDate(operator)); };\nvar appendEqual = function (str) { return str + \" eq -1\"; };\nvar filterOperators = {\n    contains: stringFnOperator(\"contains\"),\n    doesnotcontain: compose(appendEqual, stringFnOperator(\"indexof\")),\n    endswith: stringFnOperator(\"endswith\"),\n    eq: typedOperator(\"eq\"),\n    gt: typedOperator(\"gt\"),\n    gte: typedOperator(\"ge\"),\n    isempty: function (_a) {\n        var field = _a.field;\n        return field + \" eq ''\";\n    },\n    isnotempty: function (_a) {\n        var field = _a.field;\n        return field + \" ne ''\";\n    },\n    isnotnull: function (_a) {\n        var field = _a.field;\n        return field + \" ne null\";\n    },\n    isnull: function (_a) {\n        var field = _a.field;\n        return field + \" eq null\";\n    },\n    lt: typedOperator(\"lt\"),\n    lte: typedOperator(\"le\"),\n    neq: typedOperator(\"ne\"),\n    startswith: stringFnOperator(\"startswith\")\n};\nvar join = function (x) { return \" \" + x.logic + \" \"; };\nvar serialize = function (x) { return filterOperators[x.operator](x); };\nvar serializeAll = serializeFilters(function (filter) { return either(isCompositeFilterDescriptor, serializeAll, serialize)(filter); }, join);\n/**\n * @hidden\n */\nexport var serializeFilter = function (filter) {\n    if (filter.filters && filter.filters.length) {\n        return \"$filter=\" + serializeAll(filter);\n    }\n    return \"\";\n};\n",null]}