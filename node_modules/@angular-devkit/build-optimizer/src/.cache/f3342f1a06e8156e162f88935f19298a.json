{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-data-query/dist/es/odata.operators.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-data-query/dist/es/odata.operators.js","mtime":1529128637641},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { either, constant } from './funcs';\nvar serializeSort = function (orderby) {\n    var str = orderby\n        .filter(function (sort) { return isPresent(sort.dir); })\n        .map(function (sort) {\n        var order = sort.field.replace(/\\./g, \"/\");\n        return sort.dir === \"desc\" ? order + \" desc\" : order;\n    }).join(\",\");\n    return str ? \"$orderby=\" + str : str;\n};\nvar emptyString = constant('');\nvar concat = function (a) { return function (b) { return a + b; }; };\nvar serializeKey = function (strings, val) { return either(isPresent, concat(strings[0]), emptyString)(val); };\nvar rules = function (key, state) {\n    return ({\n        \"filter\": serializeFilter(state.filter || {}),\n        \"skip\": (_a = [\"$skip=\", \"\"], _a.raw = [\"$skip=\", \"\"], serializeKey(_a, state.skip)),\n        \"sort\": serializeSort(state.sort || []),\n        \"take\": (_b = [\"$top=\", \"\"], _b.raw = [\"$top=\", \"\"], serializeKey(_b, state.take))\n    }[key]);\n    var _a, _b;\n};\n/**\n * Converts a [`State`]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @returns {string} - The serialized state.\n */\nexport var toODataString = function (state) { return (Object.keys(state)\n    .map(function (x) { return rules(x, state); })\n    .filter(isNotNullOrEmptyString)\n    .join('&')); };\n",null]}