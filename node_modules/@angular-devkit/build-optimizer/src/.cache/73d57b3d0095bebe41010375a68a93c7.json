{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/filtering/menu/single-popup.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/filtering/menu/single-popup.service.js","mtime":1529128649627},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { Injectable, Renderer2, NgZone } from '@angular/core';\nimport { isPresent } from '../../utils';\nimport { PreventableEvent } from '../../common/preventable-event';\nimport { Subject } from 'rxjs/Subject';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { ScrollSyncService } from '../../scrolling/scroll-sync.service';\nvar contains = function (node, predicate) {\n    while (node) {\n        if (predicate(node)) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n};\nvar CloseEvent = (function (_super) {\n    tslib_1.__extends(CloseEvent, _super);\n    function CloseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return CloseEvent;\n}(PreventableEvent));\n/**\n * @hidden\n */\nvar SinglePopupService = /*@__PURE__*/ (function () {\n    function SinglePopupService(popupService, renderer, ngZone, scrollSyncService, localization) {\n        var _this = this;\n        this.popupService = popupService;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.localization = localization;\n        this.onClose = new Subject();\n        this.scrollSubscription = scrollSyncService.changes.subscribe(function () { return _this.destroy(); });\n    }\n    SinglePopupService.prototype.open = function (anchor, template, popupRef) {\n        var _this = this;\n        var toggle = isPresent(popupRef) && this.popupRef === popupRef;\n        this.destroy();\n        if (!toggle) {\n            var direction = this.localization.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchorAlign: { vertical: 'bottom', horizontal: direction },\n                popupAlign: { vertical: 'top', horizontal: direction },\n                anchor: anchor,\n                popupClass: \"k-grid-filter-popup\",\n                content: template,\n                positionMode: \"absolute\"\n            });\n            this.popupViewPortLeaveSubscription = this.popupRef.popupAnchorViewportLeave\n                .subscribe(function () { return _this.destroy(); });\n            this.attachClose(anchor);\n        }\n        return this.popupRef;\n    };\n    SinglePopupService.prototype.destroy = function () {\n        if (this.popupRef) {\n            this.detachClose();\n            this.popupViewPortLeaveSubscription.unsubscribe();\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n    };\n    SinglePopupService.prototype.ngOnDestroy = function () {\n        this.destroy();\n        this.scrollSubscription.unsubscribe();\n    };\n    SinglePopupService.prototype.detachClose = function () {\n        if (this.removeClick) {\n            this.removeClick();\n        }\n    };\n    SinglePopupService.prototype.attachClose = function (skipElement) {\n        var _this = this;\n        this.detachClose();\n        this.ngZone.runOutsideAngular(function () {\n            return _this.removeClick = _this.renderer.listen(\"document\", \"click\", function (_a) {\n                var target = _a.target;\n                if (!contains(target, function (x) { return _this.popupRef.popupElement === x || x === skipElement; })) {\n                    var args = new CloseEvent();\n                    _this.onClose.next(args);\n                    if (!args.isDefaultPrevented()) {\n                        _this.destroy();\n                    }\n                }\n            });\n        });\n    };\n    return SinglePopupService;\n}());\nexport { SinglePopupService };\n",null]}