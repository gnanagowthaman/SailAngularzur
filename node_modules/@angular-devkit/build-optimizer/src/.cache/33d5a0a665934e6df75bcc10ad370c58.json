{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/calendar.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/calendar.component.js","mtime":1529128637641},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:no-forward-ref */\nimport { Component, ChangeDetectorRef, ChangeDetectionStrategy, ContentChild, EventEmitter, ElementRef, Renderer2, isDevMode, forwardRef, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { cloneDate, isEqual } from '@progress/kendo-date-math';\nimport { NavigationComponent } from './navigation.component';\nimport { ViewListComponent } from './view-list.component';\nimport { DOMService } from './services/dom.service';\nimport { BusViewService } from './services/bus-view.service';\nimport { NavigationService } from './services/navigation.service';\nimport { ScrollSyncService } from './services/scroll-sync.service';\nimport { CellTemplateDirective } from './templates/cell-template.directive';\nimport { MonthCellTemplateDirective } from './templates/month-cell-template.directive';\nimport { YearCellTemplateDirective } from './templates/year-cell-template.directive';\nimport { DecadeCellTemplateDirective } from './templates/decade-cell-template.directive';\nimport { CenturyCellTemplateDirective } from './templates/century-cell-template.directive';\nimport { WeekNumberCellTemplateDirective } from './templates/weeknumber-cell-template.directive';\nimport { CalendarViewEnum } from './models/view.enum';\nimport { minValidator } from '../validators/min.validator';\nimport { maxValidator } from '../validators/max.validator';\nimport { MIN_DATE, MAX_DATE } from '../defaults';\nimport { dateInRange, getToday, guid, hasExistingValue, noop } from '../util';\nvar BOTTOM_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-bottomview';\nvar TOP_VIEW_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-topview';\nvar MIN_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-min';\nvar MAX_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/api/CalendarComponent/#toc-max';\nvar VALUE_DOC_LINK = 'http://www.telerik.com/kendo-angular-ui/components/dateinputs/calendar/#toc-using-with-json';\nvar virtualizationProp = function (x) { return x ? x.virtualization : null; };\n/**\n * @hidden\n */\nexport var CALENDAR_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * @hidden\n */\nexport var CALENDAR_RANGE_VALIDATORS = {\n    multi: true,\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return CalendarComponent; }) //tslint:disable-line:no-use-before-declare\n};\n/**\n * Represents the Kendo UI Calendar component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-calendar></kendo-calendar>\n * `\n * })\n * class AppComponent { }\n * ```\n */\nvar CalendarComponent = /*@__PURE__*/ (function () {\n    function CalendarComponent(bus, dom, element, navigator, renderer, cdr, scrollSyncService) {\n        this.bus = bus;\n        this.dom = dom;\n        this.element = element;\n        this.navigator = navigator;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.scrollSyncService = scrollSyncService;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Determines whether the built-in min or max validators are enforced when validating a form.\n         */\n        this.rangeValidation = false;\n        /**\n         * Sets or gets the `disabled` property of the Calendar and\n         * determines whether the component is active\n         * (see the [basic usage example]({% slug disabled_calendar %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets or gets the `tabindex` property of the Calendar. Based on the\n         * [HTML `tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) behavior,\n         * it determines whether the component is focusable.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets or gets the `navigation` property of the Calendar\n         * and determines whether the navigation side-bar is displayed\n         * (see the [basic usage example]({% slug sidebar_calendar %})).\n         */\n        this.navigation = true;\n        /**\n         * Defines the active view that the Calendar initially renders\n         * (see the [basic usage example]({% slug activeview_calendar %})).\n         * By default, the active view is `month`.\n         *\n         * > You have to set `activeView` within the `topView`-`bottomView` range.\n         */\n        this.activeView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the bottommost view, to which the user can navigate\n         * (see the [basic usage example]({% slug dates_calendar %}#toc-partial-dates)).\n         */\n        this.bottomView = CalendarViewEnum[CalendarViewEnum.month];\n        /**\n         * Defines the topmost view, to which the user can navigate\n         * (see the [basic usage example]({% slug sidebar_calendar %}#toc-partial-dates)).\n         */\n        this.topView = CalendarViewEnum[CalendarViewEnum.century];\n        /**\n         * Determines whether to display a week number column in the `month` view\n         * (see the [basic usage example]({% slug weeknumcolumn_calendar %})).\n         */\n        this.weekNumber = false;\n        /**\n         * Fires when the active view is changed.\n         *\n         * For more information, refer to the section on [events]({% slug overview_calendar %}#toc-events).\n         */\n        this.activeViewChange = new EventEmitter();\n        /**\n         * Fires when the active view date is changed.\n         *\n         * For more information, refer to the section on [events]({% slug overview_calendar %}#toc-events).\n         */\n        this.activeViewDateChange = new EventEmitter();\n        /**\n         * Fires when the value is changed.\n         *\n         * For more information, refer to the section on [events]({% slug overview_calendar %}#toc-events).\n         */\n        this.valueChange = new EventEmitter();\n        this.isActive = false;\n        this.cellUID = guid();\n        this._min = new Date(MIN_DATE);\n        this._max = new Date(MAX_DATE);\n        this._focusedDate = getToday();\n        this.propagateChange = noop;\n        this.propagateTouched = noop;\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this.syncNavigation = true;\n        this.setClasses(element.nativeElement);\n    }\n    Object.defineProperty(CalendarComponent.prototype, \"focusedDate\", {\n        get: function () {\n            return this._focusedDate;\n        },\n        /**\n         * Sets or gets the `focusedDate` property of the Calendar and\n         * defines the focused date of the component\n         * (see the [basic usage example]({% slug dates_calendar %}#toc-focused-dates)).\n         *\n         * > If the Calendar is out of the min or max range, it normalizes the defined `focusedDate`.\n         */\n        set: function (focusedDate) {\n            this._focusedDate = focusedDate || getToday();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Sets or gets the `min` property of the Calendar and\n         * defines the minimum allowed date value\n         * (see the [basic usage example]({% slug dateranges_calendar %})).\n         * By default, the `min` value is `1900-1-1`.\n         */\n        set: function (min) {\n            this._min = min || new Date(MIN_DATE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Sets or gets the `max` property of the Calendar and\n         * defines the maximum allowed date value\n         * (see the [basic usage example]({% slug dateranges_calendar %})).\n         * By default, the `max` value is `2099-12-31`.\n         */\n        set: function (max) {\n            this._max = max || new Date(MAX_DATE);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"value\", {\n        /**\n         * Sets or gets the `value` property of the Calendar and defines the selected value of the component.\n         *\n         * > The `value` has to be a valid\n         * [JavaScript `Date`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n         */\n        get: function () {\n            return this._value;\n        },\n        set: function (candidate) {\n            this.verifyValue(candidate);\n            this._value = cloneDate(candidate);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"activeViewEnum\", {\n        get: function () {\n            var activeView = CalendarViewEnum[this.activeView];\n            return activeView < this.bottomViewEnum ? this.bottomViewEnum : activeView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"bottomViewEnum\", {\n        get: function () {\n            return CalendarViewEnum[this.bottomView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"topViewEnum\", {\n        get: function () {\n            return CalendarViewEnum[this.topView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"widgetId\", {\n        get: function () {\n            return this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"widgetRole\", {\n        get: function () {\n            return 'grid';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"calendarTabIndex\", {\n        get: function () {\n            return this.disabled ? undefined : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CalendarComponent.prototype, \"ariaActivedescendant\", {\n        get: function () {\n            return this.cellUID + this.focusedDate.getTime();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleBlur = function () {\n        this.propagateTouched();\n        this.isActive = false;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleFocus = function () {\n        this.isActive = true;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleMousedown = function (event) {\n        event.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleClick = function () {\n        if (!this.isActive) {\n            if (this.monthView.isScrolled()) {\n                this.focusedDate = cloneDate(this.focusedDate); //XXX: forces change detect\n            }\n            this.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.keydown = function (event) {\n        var candidate = dateInRange(this.navigator.move(this.focusedDate, this.navigator.action(event), this.activeViewEnum), this.min, this.max);\n        if (isEqual(this.focusedDate, candidate)) {\n            return;\n        }\n        this.focusedDate = candidate;\n        event.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.enter = function () {\n        this.handleDateChange(this.focusedDate);\n    };\n    CalendarComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.dom.calculateHeights(this.element.nativeElement);\n        this.scrollSyncService.configure(this.activeViewEnum);\n        this.viewChangeSubscription = this.bus.viewChanged.subscribe(function (_a) {\n            var view = _a.view;\n            _this.activeView = CalendarViewEnum[view];\n            _this.activeViewChange.emit(_this.activeView);\n            _this.scrollSyncService.configure(view);\n        });\n    };\n    CalendarComponent.prototype.ngOnChanges = function (changes) {\n        this.verifyChanges();\n        this.bus.configure(this.bottomViewEnum, this.topViewEnum);\n        this.scrollSyncService.configure(this.activeViewEnum);\n        var useValue = hasExistingValue(changes, 'value') && !hasExistingValue(changes, 'focusedDate');\n        var focusedDate = dateInRange(cloneDate(useValue ? this.value : this.focusedDate), this.min, this.max);\n        this.focusedDate = !isEqual(this.focusedDate, focusedDate) ? focusedDate : this.focusedDate;\n        if (changes.navigation) {\n            this.syncNavigation = true;\n        }\n        if (changes.min || changes.max) {\n            this.minValidateFn = this.rangeValidation ? minValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? maxValidator(this.max) : noop;\n        }\n    };\n    CalendarComponent.prototype.ngAfterViewChecked = function () {\n        if (!this.syncNavigation) {\n            return;\n        }\n        this.syncNavigation = false;\n        this.scrollSyncService.sync(virtualizationProp(this.navigationView), virtualizationProp(this.monthView));\n    };\n    CalendarComponent.prototype.ngOnDestroy = function () {\n        this.scrollSyncService.destroy();\n        this.viewChangeSubscription.unsubscribe();\n    };\n    /**\n     * Focuses the host element of the Calendar.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"calendar.focus()\">Focus calendar</button>\n     *  <kendo-calendar #calendar></kendo-calendar>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    CalendarComponent.prototype.focus = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.focus();\n    };\n    /**\n     * Blurs the Calendar component.\n     */\n    CalendarComponent.prototype.blur = function () {\n        if (!this.element) {\n            return;\n        }\n        this.element.nativeElement.blur();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleNavigation = function (candidate) {\n        if (this.disabled) {\n            return;\n        }\n        this.focusedDate = cloneDate(candidate) || this.focusedDate;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.handleDateChange = function (candidate) {\n        var canNavigateDown = this.bus.canMoveDown(this.activeViewEnum);\n        var isSameDate = !canNavigateDown && isEqual(candidate, this.value);\n        this.focusedDate = cloneDate(candidate) || this.focusedDate;\n        if (this.disabled || isSameDate) {\n            return;\n        }\n        if (canNavigateDown) {\n            this.bus.moveDown(this.activeViewEnum);\n            return;\n        }\n        this.value = cloneDate(candidate);\n        this.propagateChange(cloneDate(candidate));\n        this.valueChange.emit(cloneDate(candidate));\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.writeValue = function (candidate) {\n        this.verifyValue(candidate);\n        this.focusedDate = dateInRange(cloneDate(candidate) || this.focusedDate, this.min, this.max);\n        this.value = cloneDate(candidate);\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.registerOnChange = function (fn) {\n        this.propagateChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.registerOnTouched = function (fn) {\n        this.propagateTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    CalendarComponent.prototype.activeCellTemplate = function () {\n        switch (this.activeViewEnum) {\n            case CalendarViewEnum.month:\n                return this.monthCellTemplate || this.cellTemplate;\n            case CalendarViewEnum.year:\n                return this.yearCellTemplate;\n            case CalendarViewEnum.decade:\n                return this.decadeCellTemplate;\n            case CalendarViewEnum.century:\n                return this.centuryCellTemplate;\n            default:\n                return null;\n        }\n    };\n    CalendarComponent.prototype.setClasses = function (element) {\n        this.renderer.addClass(element, 'k-widget');\n        this.renderer.addClass(element, 'k-calendar');\n        this.renderer.addClass(element, 'k-calendar-infinite');\n    };\n    CalendarComponent.prototype.verifyChanges = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.min > this.max) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK + \" and \" + MAX_DOC_LINK + \".\");\n        }\n        if (this.bottomViewEnum > this.topViewEnum) {\n            throw new Error(\"The topView should be greater than bottomView. See \" + BOTTOM_VIEW_DOC_LINK + \" and \" + TOP_VIEW_DOC_LINK + \".\");\n        }\n    };\n    CalendarComponent.prototype.verifyValue = function (candidate) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (candidate && !(candidate instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK + \" for possible resolution.\");\n        }\n    };\n    return CalendarComponent;\n}());\nexport { CalendarComponent };\n",null]}