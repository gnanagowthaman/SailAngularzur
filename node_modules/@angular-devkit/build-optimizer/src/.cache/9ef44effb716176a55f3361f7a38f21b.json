{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-popup/dist/es/services/scrollable.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-popup/dist/es/services/scrollable.service.js","mtime":1523964430000},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, NgZone } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { auditTime } from 'rxjs/operators/auditTime';\nimport { DOMService } from './dom.service';\nimport { FRAME_DURATION, isDocumentAvailable } from '../util';\n/**\n * @hidden\n */\nexport var THRESHOLD_DIFF = 1;\n/**\n * @hidden\n */\nvar ScrollableService = /*@__PURE__*/ (function () {\n    function ScrollableService(_dom, _zone) {\n        this._dom = _dom;\n        this._zone = _zone;\n    }\n    ScrollableService.prototype.forElement = function (element) {\n        this.unsubscribe();\n        this.element = element;\n        return this;\n    };\n    ScrollableService.prototype.subscribe = function (callback) {\n        var _this = this;\n        if (!callback || !isDocumentAvailable() || !this.element) {\n            return;\n        }\n        var nativeElement = this._dom.nativeElement(this.element);\n        var parents = this._dom.scrollableParents(this.element);\n        this._zone.runOutsideAngular(function () {\n            var observables = parents.map(function (p) { return fromEvent(p, \"scroll\").pipe(auditTime(FRAME_DURATION)); });\n            var subscriber = function (e) {\n                callback(_this.isVisible(nativeElement, e.target));\n            };\n            _this.subscription = merge.apply(void 0, observables).subscribe(subscriber);\n        });\n    };\n    ScrollableService.prototype.unsubscribe = function () {\n        if (!this.subscription) {\n            return;\n        }\n        this.subscription.unsubscribe();\n    };\n    ScrollableService.prototype.isVisible = function (elem, container) {\n        var elemRect = this._dom.boundingOffset(elem);\n        var containerRect = this._dom.boundingOffset(container);\n        if ((containerRect.top - elemRect.bottom) > THRESHOLD_DIFF) {\n            return false;\n        }\n        if ((containerRect.bottom - elemRect.bottom) < -THRESHOLD_DIFF) {\n            return false;\n        }\n        if ((containerRect.right - elemRect.right) < -THRESHOLD_DIFF) {\n            return false;\n        }\n        if ((containerRect.left - elemRect.left) > THRESHOLD_DIFF) {\n            return false;\n        }\n        return true;\n    };\n    return ScrollableService;\n}());\nexport { ScrollableService };\n",null]}