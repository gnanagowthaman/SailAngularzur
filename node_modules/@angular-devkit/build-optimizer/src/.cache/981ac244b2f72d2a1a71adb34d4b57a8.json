{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/columns/span-column.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/columns/span-column.component.js","mtime":1529128638739},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { forwardRef, Component, SkipSelf, Host, Optional, QueryList, ContentChildren, Input } from '@angular/core';\nimport { CellTemplateDirective } from '../rendering/cell-template.directive';\nimport { EditTemplateDirective } from '../editing/edit-template.directive';\nimport { ColumnBase } from './column-base';\nimport { ColumnComponent } from \"./column.component\";\nimport { isPresent } from \"../utils\";\n/**\n * @hidden\n */\nexport function isSpanColumnComponent(column) {\n    return column.isSpanColumn;\n}\n/**\n * Represents a column which can be spanned over multiple data cells while the individual header and footer cells are retained.\n * This behavior enables you to achieve more flexible layout and, at the same time,\n * keep the built-in UI element for sorting, filtering, and grouping.\n * The columns that will be merged have to be wrapped inside the `<kendo-grid-span-column>` tag.\n * For another basic usage scenario, refer to the article on [spanned columns]({% slug spanned_columns_grid %}).\n *\n * @example\n * ```ts-preview\n *\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *        <kendo-grid\n *              [sortable]=\"true\"\n *              [filterable]=\"true\"\n *              [kendoGridBinding]=\"products\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n *          </kendo-grid-column>\n *          <kendo-grid-span-column>\n *              <kendo-grid-column field=\"ProductName\" title=\"Product Name\">\n *              </kendo-grid-column>\n *              <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" filter=\"numeric\" width=\"180\" format=\"{0:c}\">\n *              </kendo-grid-column>\n *          </kendo-grid-span-column>\n *          <kendo-grid-column field=\"Discontinued\" width=\"120\" filter=\"boolean\">\n *              <ng-template kendoGridCellTemplate let-dataItem>\n *                  <input type=\"checkbox\" [checked]=\"dataItem.Discontinued\" disabled/>\n *              </ng-template>\n *          </kendo-grid-column>\n *        </kendo-grid>\n *    `\n * })\n *\n * class AppComponent {\n *   public products = [{\n *      \"ProductID\": 1,\n *      \"ProductName\": \"Chai\",\n *      \"UnitPrice\": 18.0000,\n *      \"Discontinued\": true\n *    }, {\n *      \"ProductID\": 2,\n *      \"ProductName\": \"Chang\",\n *      \"UnitPrice\": 19.0000,\n *      \"Discontinued\": false\n *    }\n *   ];\n * }\n *\n * ```\n *\n * By default, the data cell displays the data for the specified fields.\n * To further customize the spanned-column functionality,\n * use a [cell template]({% slug api_grid_celltemplatedirective %}).\n *\n * ```html-no-run\n * <kendo-grid-span-column>\n *  <kendo-grid-column field=\"field1\" title=\"Field 1\"></kendo-grid-column>\n *  <kendo-grid-column field=\"field2\" title=\"Field 2\"></kendo-grid-column>\n *    <ng-template kendoGridCellTemplate let-dataItem>\n *        <h5>{{ dataItem.field1 }}</h5>\n *        <p>{{ dataItem.field2 }}</p>\n *    </ng-template>\n *  </kendo-grid-span-column>\n * ```\n */\nvar SpanColumnComponent = (function (_super) {\n    tslib_1.__extends(SpanColumnComponent, _super);\n    function SpanColumnComponent(parent) {\n        var _this = _super.call(this, parent) || this;\n        /*\n         * @hidden\n         */\n        _this.isSpanColumn = true;\n        _this.template = new QueryList();\n        _this.editTemplate = new QueryList();\n        /**\n         * @hidden\n         */\n        _this.childColumns = new QueryList();\n        _this._editable = true;\n        _this._locked = false;\n        if (parent && parent.isSpanColumn) {\n            throw new Error('SpanColumn cannot be nested inside another SpanColumn');\n        }\n        return _this;\n    }\n    Object.defineProperty(SpanColumnComponent.prototype, \"editable\", {\n        get: function () {\n            return isPresent(this.editTemplateRef) && this._editable;\n        },\n        /**\n         * Defines whether the edit template of the column will be rendered. The default value is `false`.\n         *\n         * > To enable the editing functionality for a spanned column, set an edit template for it.\n         *\n         * @example\n         * ```html-no-run\n         * <kendo-grid>\n         *    <kendo-grid-span-column [editable]=\"false\">\n         *      <kendo-grid-column field=\"UnitPrice\">\n         *      </kendo-grid-column>\n         *      <kendo-grid-column field=\"ProductName\">\n         *      </kendo-grid-column>\n         *      <ng-template kendoGridEditTemplate>\n         *         .....\n         *      </ng-template>\n         *    </kendo-grid-span-column>\n         * </kendo-grid>\n         * ```\n         */\n        set: function (value) {\n            this._editable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"templateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var template = this.template.first;\n            return template ? template.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"editTemplateRef\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var editTemplate = this.editTemplate.first;\n            return editTemplate ? editTemplate.templateRef : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"colspan\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.childColumns.filter(function (c) { return c.isVisible; }).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpanColumnComponent.prototype, \"locked\", {\n        get: function () {\n            return this._locked || this.childColumns.some(function (c) { return c.locked; });\n        },\n        /**\n         * Toggles the locked (frozen) state of the columns.\n         * Locked columns are visible at all times during the horizontal scrolling of the Grid.\n         * For the option to work properly, make sure that the Grid is configured to meet the following requirements:\n         * - Scrolling is enabled.\n         * - The `height` option of the Grid is set.\n         * - The widths of all Grid columns are explicitly set in pixels.\n         * In this way, the Grid adjusts the layout of the locked and unlocked columns.\n         *\n         * @default false\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         *    selector: 'my-app',\n         *    template: `\n         *        <kendo-grid [data]=\"gridData\" [scrollable]=\"scrollable\" style=\"height: 200px\">\n         *          <kendo-grid-span-column [locked]=\"true\">\n         *             <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"120\">\n         *             </kendo-grid-column>\n         *             <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"200\">\n         *             </kendo-grid-column>\n         *          </kendo-grid-span-column>\n         *          <kendo-grid-column field=\"UnitPrice\" title=\"Unit Price\" width=\"230\">\n         *          </kendo-grid-column>\n         *        </kendo-grid>\n         *    `\n         * })\n         *\n         * class AppComponent {\n         *    public gridData: any[];\n         *\n         *    constructor() {\n         *        this.gridData = products;\n         *    }\n         * }\n         *\n         * const products = [{\n         *    \"ProductID\": 1,\n         *    \"ProductName\": \"Chai\",\n         *    \"UnitPrice\": 18.0000,\n         *    \"Discontinued\": true\n         *  }, {\n         *    \"ProductID\": 2,\n         *    \"ProductName\": \"Chang\",\n         *    \"UnitPrice\": 19.0000,\n         *    \"Discontinued\": false\n         *  }\n         * ];\n         *\n         * ```\n         */\n        set: function (value) {\n            this._locked = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SpanColumnComponent;\n}(ColumnBase));\nexport { SpanColumnComponent };\n",null]}