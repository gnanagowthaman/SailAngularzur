{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/slider/slider.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/slider/slider.component.js","mtime":1529128638493},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Renderer2, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild, forwardRef, ContentChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { interval } from 'rxjs/observable/interval';\nimport { merge } from 'rxjs/observable/merge';\nimport { filter } from 'rxjs/operators/filter';\nimport { concatMap } from 'rxjs/operators/concatMap';\nimport { startWith } from 'rxjs/operators/startWith';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { SliderUtil as Util } from '@telerik/kendo-inputs-common';\nimport { SliderModel } from './slider-model';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { LabelTemplateDirective } from './label-template.directive';\nimport { Keys } from '../common/enums';\nimport { isChanged } from '../common/changes';\nimport { isButton, isDocumentAvailable, eventValue, decreaseValueToStep, increaseValueToStep, increment, decrement, incrementLarge, decrementLarge } from './utils';\nimport { guid } from '../common/dom-utils';\n/**\n * Represents the Kendo UI Slider component for Angular.\n */\nvar SliderComponent = /*@__PURE__*/ (function () {\n    function SliderComponent(localizationService, renderer, hostElement) {\n        var _this = this;\n        this.localizationService = localizationService;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Makes the Slider side arrow buttons appear. When set to `false`, the buttons are not displayed.\n         */\n        this.showButtons = true;\n        /**\n         * Denotes the location of the tick marks in the Slider.\n         *\n         * The available options are:\n         *   * `before`&mdash;Tick marks are located to the top side of the horizontal track or to the left side of a vertical track.\n         *   * `after`&mdash;Tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.\n         *   * `both`&mdash;Tick marks are located on both sides of the track.\n         *   * `none`&mdash;Tick marks are not visible. The actual elements are not added to the DOM tree.\n         */\n        this.tickPlacement = 'both';\n        /**\n         * Defines the title of the ticks. The default title for each tick is its Slider value.\n         * If a callback function is used, it accepts an argument holding the value of the component and returns a string with the new title.\n         */\n        this.title = Util.identity;\n        /**\n         * If set to `true`, it changes the orientation of the Slider from horizontal to vertical.\n         */\n        this.vertical = false;\n        /**\n         * The minimum value of the Slider. The attribute accepts both integers and floating-point numbers.\n         */\n        this.min = 0;\n        /**\n         * The maximum value of the Slider. The attribute accepts both integers and floating-point numbers.\n         */\n        this.max = 10;\n        /**\n         * The step value of the Slider. The attribute accepts only positive numbers. Can be both integer or a float number.\n         */\n        this.smallStep = 1;\n        /**\n         * Specifies that every n<sup>th</sup> tick will be large and will have a label.\n         * Has to be a positive integer.\n         */\n        this.largeStep = null;\n        /**\n         * If set to `true`, it disables the Slider.\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the Slider is in its read-only state.\n         */\n        this.readonly = false;\n        /**\n         * The current value of the Slider when initially displayed.\n         * The component can use either the `value` binging or `NgModel`, but not both of them at the same time.\n         */\n        this.value = 0;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the input element.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        this.dragging = false;\n        this.decreaseButtonSubscription = Subscription.EMPTY;\n        this.increaseButtonSubscription = Subscription.EMPTY;\n        /**\n         * @hidden\n         */\n        this.ifEnabled = function (callback, event) {\n            if (_this.disabled || _this.readonly) {\n                return;\n            }\n            callback.call(_this, event);\n        };\n        this.ngChange = function (_) { };\n        this.ngTouched = function () { };\n        this.decreaseValue = function () {\n            _this.changeValue(decreaseValueToStep(_this.value, _this.getProps()));\n        };\n        this.increaseValue = function () {\n            _this.changeValue(increaseValueToStep(_this.value, _this.getProps()));\n        };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n        this.hostElement = hostElement.nativeElement;\n    }\n    Object.defineProperty(SliderComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"horizontalClass\", {\n        get: function () {\n            return !this.vertical;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"verticalClass\", {\n        get: function () {\n            return this.vertical;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"sliderClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"transitionsClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"widgetClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"stateDefaultClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"focusedClass\", {\n        get: function () {\n            return this.focused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled ? true : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"ariaReadonly\", {\n        get: function () {\n            return this.readonly ? true : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"ariaMin\", {\n        get: function () {\n            return this.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"ariaMax\", {\n        get: function () {\n            return this.max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"ariaValue\", {\n        get: function () {\n            return this.value ? this.value : this.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"reverse\", {\n        get: function () {\n            return this.localizationService.rtl && !this.vertical;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"keyBinding\", {\n        get: function () {\n            var reverse = this.reverse;\n            return _a = {},\n                _a[Keys.left] = reverse ? increment : decrement,\n                _a[Keys.right] = reverse ? decrement : increment,\n                _a[Keys.down] = decrement,\n                _a[Keys.up] = increment,\n                _a[Keys.page_up] = incrementLarge,\n                _a[Keys.page_down] = decrementLarge,\n                _a[Keys.home] = function (_a) {\n                    var min = _a.min;\n                    return min;\n                },\n                _a[Keys.end] = function (_a) {\n                    var max = _a.max;\n                    return max;\n                },\n                _a;\n            var _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    SliderComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.handleFocus = function () {\n        this.focused = true;\n        this.onFocus.emit();\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.handleBlur = function () {\n        this.focused = false;\n        this.ngTouched();\n        this.onBlur.emit();\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.keydown = function (event) {\n        this.onKeyDown(event);\n    };\n    SliderComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.localizationChangeSubscription = this.localizationService\n            .changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.sizeComponent(false);\n        });\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n    };\n    /**\n     * Focuses the Slider component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"slider.focus()\">Focus</button>\n     *  <kendo-slider #slider></kendo-slider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    SliderComponent.prototype.focus = function () {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.focus();\n    };\n    /**\n     * Blurs the Slider component.\n     */\n    SliderComponent.prototype.blur = function () {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.blur();\n    };\n    SliderComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged('value', changes)) {\n            this.sizeComponent(false);\n        }\n    };\n    SliderComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        if (this.showButtons) {\n            this.increaseButtonSubscription = this.setValueChangeInterval(this.increaseButton.nativeElement, function () { return _this.increaseValue(); });\n            this.decreaseButtonSubscription = this.setValueChangeInterval(this.decreaseButton.nativeElement, function () { return _this.decreaseValue(); });\n        }\n        this.sizeComponent(false);\n        if (this.ticks) {\n            this.ticks.tickElements\n                .changes\n                .subscribe(function () { return _this.sizeComponent(false); });\n        }\n    };\n    SliderComponent.prototype.ngOnDestroy = function () {\n        this.decreaseButtonSubscription.unsubscribe();\n        this.increaseButtonSubscription.unsubscribe();\n        this.localizationChangeSubscription.unsubscribe();\n    };\n    Object.defineProperty(SliderComponent.prototype, \"incrementMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.incrementTitle || this.localizationService.get('increment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"decrementMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.decrementTitle || this.localizationService.get('decrement');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderComponent.prototype, \"dragHandleMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.dragHandleTitle || this.localizationService.get('dragHandle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.onWrapClick = function (args) {\n        var target = args.target;\n        if (!(isButton(target) || isButton(target.parentNode))) {\n            var value = eventValue(args, this.track.nativeElement, this.getProps());\n            this.changeValue(value);\n        }\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.handleDragPress = function (args) {\n        if (args.originalEvent) {\n            args.originalEvent.preventDefault();\n        }\n        this.focus();\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.onHandleDrag = function (args) {\n        this.dragging = true;\n        this.changeValue(eventValue(args, this.track.nativeElement, this.getProps()));\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.onKeyDown = function (e) {\n        var options = this.getProps();\n        var disabled = options.disabled, max = options.max, min = options.min, readonly = options.readonly;\n        var handler = this.keyBinding[e.keyCode];\n        if (disabled || readonly || !handler) {\n            return;\n        }\n        var value = handler(options);\n        this.changeValue(Util.trimValue(max, min, value));\n        e.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.onHandleRelease = function () {\n        this.dragging = false; //needed for animation\n    };\n    //ngModel binding\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.writeValue = function (value) {\n        this.value = value;\n        this.sizeComponent(true);\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.changeValue = function (value) {\n        this.value = value;\n        this.ngChange(value);\n        this.valueChange.emit(value);\n        this.sizeComponent(true);\n    };\n    /**\n     * @hidden\n     */\n    SliderComponent.prototype.sizeComponent = function (animate) {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var wrapper = this.wrapper.nativeElement;\n        var props = this.getProps();\n        var model = new SliderModel(props, wrapper, this.track.nativeElement);\n        model.resizeTrack();\n        if (this.ticks) {\n            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) { return element.nativeElement; }));\n        }\n        this.handleAnimation(animate); //first time the widget is initialized the selection should not be animated\n        model.positionHandle(this.draghandle.nativeElement);\n        model.positionSelection(this.draghandle.nativeElement, this.sliderSelection.nativeElement);\n        if (this.fixedTickWidth) {\n            model.resizeWrapper();\n        }\n    };\n    SliderComponent.prototype.setValueChangeInterval = function (element, callback) {\n        var _this = this;\n        var mousedown = fromEvent(element, 'mousedown');\n        var mouseup = fromEvent(element, 'mouseup');\n        var mouseout = fromEvent(element, 'mouseout');\n        var subscription = mousedown.pipe(filter(function (e) { return e.button === 0; }), filter(function () { return !_this.disabled && !_this.readonly; }), concatMap(function () {\n            return interval(150).pipe(startWith(-1), takeUntil(merge(mouseup, mouseout)));\n        })).subscribe(function () {\n            _this.focus();\n            callback();\n        });\n        return subscription;\n    };\n    SliderComponent.prototype.handleAnimation = function (animate) {\n        var transition = '';\n        if (!animate) {\n            transition = 'none';\n        }\n        this.draghandle.nativeElement.style.transition = transition;\n        this.sliderSelection.nativeElement.style.transition = transition;\n    };\n    SliderComponent.prototype.getProps = function () {\n        return {\n            buttons: this.showButtons,\n            disabled: this.disabled,\n            fixedTickWidth: this.fixedTickWidth,\n            max: this.max,\n            min: this.min,\n            readonly: this.readonly,\n            reverse: this.reverse,\n            smallStep: this.smallStep,\n            value: Util.trimValue(this.max, this.min, this.value),\n            vertical: this.vertical,\n            rtl: this.localizationService.rtl,\n            largeStep: this.largeStep\n        };\n    };\n    return SliderComponent;\n}());\nexport { SliderComponent };\n",null]}