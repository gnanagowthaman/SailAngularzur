{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/rendering/cell.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/rendering/cell.component.js","mtime":1529128662665},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, HostBinding, Input, Inject, Optional } from '@angular/core';\nimport { EditService } from '../editing/edit.service';\nimport { isSpanColumn, isCheckboxColumn } from '../columns/column-base';\nimport { CommandColumnComponent } from '../columns/command-column.component';\nimport { isColumnComponent } from '../columns/column.component';\nimport { columnsToRender } from \"../columns/column-common\";\nimport { isPresent, isNullOrEmptyString, extractFormat } from '../utils';\nimport { CELL_CONTEXT } from './common/cell-context';\nimport { IdService } from '../common/id.service';\n/**\n * @hidden\n */\nvar CellComponent = /*@__PURE__*/ (function () {\n    function CellComponent(editService, idService, cellContext) {\n        this.editService = editService;\n        this.idService = idService;\n        this.cellContext = cellContext;\n        this.isNew = false;\n        this._templateContext = {};\n        this._editTemplateContext = {};\n    }\n    Object.defineProperty(CellComponent.prototype, \"commandCellClass\", {\n        get: function () {\n            return this.isCommand(this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"rowIndex\", {\n        get: function () {\n            return this._rowIndex;\n        },\n        set: function (index) {\n            this._rowIndex = index;\n            this.updateCellContext();\n            if (this.isCommand(this.column)) {\n                this._templateContext = {};\n                //Forces the template to be recreated in ng 5+\n                this._templateContext[\"rowIndex\" + index] = index;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isEdited\", {\n        get: function () {\n            if (!this.isColumnEditable) {\n                return false;\n            }\n            var editContext = this.editService.columnContext(this.rowIndex, this.column);\n            return this.isFieldEditable(editContext, this.column);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"formGroup\", {\n        get: function () {\n            return this.editService.context(this.rowIndex).group;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"templateContext\", {\n        get: function () {\n            var context = this._templateContext;\n            context.isNew = this.isNew;\n            context.column = this.column;\n            context.dataItem = this.dataItem;\n            context.rowIndex = this.rowIndex;\n            context.columnIndex = this.columnIndex;\n            context.$implicit = this.dataItem;\n            return this._templateContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"editTemplateContext\", {\n        get: function () {\n            this._editTemplateContext.$implicit = this.formGroup;\n            this._editTemplateContext.isNew = this.isNew;\n            this._editTemplateContext.column = this.column;\n            this._editTemplateContext.dataItem = this.dataItem;\n            this._editTemplateContext.formGroup = this.formGroup;\n            this._editTemplateContext.rowIndex = this.rowIndex;\n            return this._editTemplateContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"format\", {\n        get: function () {\n            if (isColumnComponent(this.column) && !isNullOrEmptyString(this.column.format)) {\n                return extractFormat(this.column.format);\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isBoundColumn\", {\n        get: function () {\n            return this.column.field && !this.column.templateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isCheckboxColumn\", {\n        get: function () {\n            return isCheckboxColumn(this.column) && !this.column.templateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"selectionCheckboxId\", {\n        get: function () {\n            return this.idService.selectionCheckboxId(this.rowIndex);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isSpanColumn\", {\n        get: function () {\n            return isSpanColumn(this.column) && !this.column.templateRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"childColumns\", {\n        get: function () {\n            return columnsToRender([this.column]);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CellComponent.prototype, \"isColumnEditable\", {\n        get: function () {\n            if (!this.column || this.isCommand(this.column)) {\n                return false;\n            }\n            return this.column.editable !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CellComponent.prototype.ngDoCheck = function () {\n        this.updateCellContext();\n    };\n    CellComponent.prototype.isCommand = function (column) {\n        return column instanceof CommandColumnComponent;\n    };\n    CellComponent.prototype.isFieldEditable = function (editContext, column) {\n        if (!isPresent(editContext)) {\n            return false;\n        }\n        if (isPresent(column.editTemplate)) {\n            return true;\n        }\n        return isPresent(editContext.group) && isPresent(editContext.group.get(column.field));\n    };\n    CellComponent.prototype.updateCellContext = function () {\n        if (this.cellContext) {\n            this.cellContext.rowIndex = this._rowIndex;\n        }\n    };\n    return CellComponent;\n}());\nexport { CellComponent };\n",null]}