{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/services/month-view.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/services/month-view.service.js","mtime":1529128638373},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { addDays, addWeeks, addMonths, cloneDate, dayOfWeek, durationInMonths, getDate, firstDayOfMonth, lastDayOfMonth } from '@progress/kendo-date-math';\nimport { Action } from '../models/navigation-action.enum';\nimport { isInRange, range } from '../../util';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 7;\nvar ROWS_LENGTH = 6;\nvar SATURDAY = 6;\nvar SUNDAY = 0;\nvar ACTIONS = (_a = {},\n    _a[Action.Left] = function (date) { return addDays(date, -1); },\n    _a[Action.Up] = function (date) { return addWeeks(date, -1); },\n    _a[Action.Right] = function (date) { return addDays(date, 1); },\n    _a[Action.Down] = function (date) { return addWeeks(date, 1); },\n    _a[Action.PrevView] = function (date) { return addMonths(date, -1); },\n    _a[Action.NextView] = function (date) { return addMonths(date, 1); },\n    _a[Action.FirstInView] = function (date) { return firstDayOfMonth(date); },\n    _a[Action.LastInView] = function (date) { return lastDayOfMonth(date); },\n    _a);\n/**\n * @hidden\n */\nvar MonthViewService = /*@__PURE__*/ (function () {\n    function MonthViewService(_intlService) {\n        this._intlService = _intlService;\n    }\n    MonthViewService.prototype.addToDate = function (min, skip) {\n        return addMonths(min, skip);\n    };\n    MonthViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addMonths(start, i); });\n    };\n    MonthViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA;\n        }\n        var firstMonthDate = firstDayOfMonth(viewDate);\n        var lastMonthDate = lastDayOfMonth(viewDate);\n        var backward = -1;\n        var isSelectedDateInRange = isInRange(selectedDate, min, max);\n        var date = dayOfWeek(firstMonthDate, this._intlService.firstDay(), backward);\n        var cells = range(0, CELLS_LENGTH);\n        return range(0, ROWS_LENGTH).map(function (rowOffset) {\n            var baseDate = addDays(date, rowOffset * CELLS_LENGTH);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);\n                var otherMonth = cellDate < firstMonthDate || cellDate > lastMonthDate;\n                var outOfRange = cellDate < min || cellDate > max;\n                if (otherMonth || outOfRange) {\n                    return null;\n                }\n                return {\n                    formattedValue: _this.value(cellDate),\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isActiveView && isSelectedDateInRange && _this.isEqual(cellDate, selectedDate),\n                    isWeekend: _this.isWeekend(cellDate),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n            });\n        });\n    };\n    MonthViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return getDate(candidate).getTime() === getDate(expected).getTime();\n    };\n    MonthViewService.prototype.isInArray = function (date, dates) {\n        return !!dates.length && firstDayOfMonth(dates[0]) <= date && date <= lastDayOfMonth(dates[dates.length - 1]);\n    };\n    MonthViewService.prototype.isInRange = function (candidate, min, max) {\n        var value = getDate(candidate);\n        var aboveMin = !min || getDate(min) <= value;\n        var belowMax = !max || value <= getDate(max);\n        return aboveMin && belowMax;\n    };\n    MonthViewService.prototype.isRangeStart = function (value) {\n        return !value.getMonth();\n    };\n    MonthViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    MonthViewService.prototype.cellTitle = function (value) {\n        return this._intlService.formatDate(value, 'D');\n    };\n    MonthViewService.prototype.navigationTitle = function (value) {\n        if (!value) {\n            return '';\n        }\n        return this.isRangeStart(value) ? value.getFullYear().toString() : this.abbrMonthNames()[value.getMonth()];\n    };\n    MonthViewService.prototype.title = function (current) {\n        return this.wideMonthNames()[current.getMonth()] + \" \" + current.getFullYear();\n    };\n    MonthViewService.prototype.rowLength = function (prependCell) {\n        return CELLS_LENGTH + (prependCell ? 1 : 0);\n    };\n    MonthViewService.prototype.skip = function (value, min) {\n        return durationInMonths(min, value);\n    };\n    MonthViewService.prototype.total = function (min, max) {\n        return durationInMonths(min, max) + 1;\n    };\n    MonthViewService.prototype.value = function (current) {\n        return current ? current.getDate().toString() : \"\";\n    };\n    MonthViewService.prototype.viewDate = function (date, max, border) {\n        if (border === void 0) {\n            border = 1;\n        }\n        var renderTwoViews = durationInMonths(date, max) < border;\n        return renderTwoViews ? addMonths(date, -1) : date;\n    };\n    MonthViewService.prototype.isWeekend = function (date) {\n        var day = date.getDay();\n        return day === SATURDAY || day === SUNDAY;\n    };\n    MonthViewService.prototype.abbrMonthNames = function () {\n        return this._intlService.dateFormatNames({ nameType: 'abbreviated', type: 'months' });\n    };\n    MonthViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    MonthViewService.prototype.wideMonthNames = function () {\n        return this._intlService.dateFormatNames({ nameType: 'wide', type: 'months' });\n    };\n    return MonthViewService;\n}());\nexport { MonthViewService };\nvar _a;\n",null]}