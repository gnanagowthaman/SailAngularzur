{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/column-resizing/column-handle.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/column-resizing/column-handle.directive.js","mtime":1529128638457},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectorRef, Directive, ElementRef, Host, HostBinding, HostListener, Input, NgZone } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { isBlank, isPresent, isTruthy } from '../utils';\nimport { expandColumns, leafColumns, columnsToRender } from '../columns/column-common';\nimport { DraggableDirective } from '../common/draggable.directive';\nimport { ColumnResizingService } from './column-resizing.service';\nimport { of } from 'rxjs/observable/of';\nimport { delay } from 'rxjs/operators/delay';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { filter } from 'rxjs/operators/filter';\nimport { take } from 'rxjs/operators/take';\nimport { tap } from 'rxjs/operators/tap';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { map } from 'rxjs/operators/map';\n/**\n * @hidden\n */\nvar fromPercentage = function (value, percent) {\n    var sign = percent < 0 ? -1 : 1;\n    return Math.ceil((Math.abs(percent) / 100) * value) * sign;\n};\n/**\n * @hidden\n */\nvar toPercentage = function (value, whole) { return (value / whole) * 100; };\n/**\n * @hidden\n */\nvar headerWidth = function (handle) { return handle.nativeElement.parentElement.offsetWidth; };\n/**\n * @hidden\n */\nvar allLeafColumns = function (columns) {\n    return expandColumns(columns)\n        .filter(function (c) { return !c.isColumnGroup; });\n};\n/**\n * @hidden\n */\nvar stopPropagation = function (_a) {\n    var event = _a.originalEvent;\n    event.stopPropagation();\n    event.preventDefault();\n};\n/**\n * @hidden\n */\nvar createMoveStream = function (service, draggable) {\n    return function (mouseDown) {\n        return draggable.kendo.drag.pipe(takeUntil(draggable.kendo.release.pipe(tap(function () { return service.end(); }))), map(function (_a) {\n            var pageX = _a.pageX;\n            return ({\n                originalX: mouseDown.pageX,\n                pageX: pageX\n            });\n        }));\n    };\n};\n/**\n * @hidden\n */\nvar preventOnDblClick = function (release) {\n    return function (mouseDown) {\n        return of(mouseDown).pipe(delay(150), takeUntil(release));\n    };\n};\n/**\n * @hidden\n */\nvar isInSpanColumn = function (column) { return !!(column.parent && column.parent.isSpanColumn); };\n/**\n * @hidden\n *\n * Calculates the column index. If the column is stated in `SpanColumn`,\n * the index for all child columns is equal to the index of the first child.\n */\nvar indexOf = function (target, list) {\n    var index = 0;\n    var ignore = 0;\n    var skip = 0;\n    while (index < list.length) {\n        var current = list[index];\n        var isParentSpanColumn = isInSpanColumn(current);\n        if (current === target) {\n            break;\n        }\n        if ((ignore-- <= 0) && isParentSpanColumn) {\n            ignore = current.parent.childColumns.length - 1;\n            skip += ignore;\n        }\n        index++;\n    }\n    return index - skip;\n};\n/**\n * @hidden\n */\nvar ColumnHandleDirective = /*@__PURE__*/ (function () {\n    function ColumnHandleDirective(draggable, element, service, zone, cdr, localization) {\n        this.draggable = draggable;\n        this.element = element;\n        this.service = service;\n        this.zone = zone;\n        this.cdr = cdr;\n        this.localization = localization;\n        this.columns = [];\n        this.subscriptions = new Subscription();\n        this.rtl = false;\n    }\n    Object.defineProperty(ColumnHandleDirective.prototype, \"visible\", {\n        get: function () {\n            return this.column.resizable ? 'block' : 'none';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnHandleDirective.prototype, \"leftStyle\", {\n        get: function () {\n            return isTruthy(this.rtl) ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnHandleDirective.prototype, \"rightStyle\", {\n        get: function () {\n            return isTruthy(this.rtl) ? null : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColumnHandleDirective.prototype.autoFit = function () {\n        var _this = this;\n        var allLeafs = allLeafColumns(this.columns);\n        var currentLeafs = leafColumns([this.column]).filter(function (column) { return isTruthy(column.resizable); });\n        var columnInfo = currentLeafs.map(function (column) {\n            var isParentSpan = isInSpanColumn(column);\n            var isLastInSpan = isParentSpan ? column.parent.childColumns.last === column : false;\n            var index = indexOf(column, allLeafs);\n            return {\n                column: column,\n                headerIndex: _this.columnsForLevel(column.level).indexOf(column),\n                index: index,\n                isLastInSpan: isLastInSpan,\n                isParentSpan: isParentSpan,\n                level: column.level\n            };\n        });\n        currentLeafs.forEach(function (column) { return column.width = 0; });\n        this.service.measureColumns(columnInfo);\n    };\n    ColumnHandleDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var service = this.service.changes.pipe(filter(function () { return _this.column.resizable; }), filter(function (e) { return isPresent(e.columns.find(function (column) { return column === _this.column; })); }));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'start'; }))\n            .subscribe(this.initState.bind(this)));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'resizeColumn'; }))\n            .subscribe(this.resize.bind(this)));\n        this.subscriptions.add(this.service.changes.pipe(filter(function (e) { return e.type === 'start'; }), filter(this.shouldUpdate.bind(this)), take(1) //on first resize only\n        ).subscribe(this.initColumnWidth.bind(this)));\n        this.subscriptions.add(this.zone.runOutsideAngular(function () {\n            return _this.draggable.kendo.press.pipe(tap(stopPropagation), tap(function () { return _this.service.start(_this.column); }), switchMap(preventOnDblClick(_this.draggable.kendo.release)), switchMap(createMoveStream(_this.service, _this.draggable)))\n                .subscribe(function (_a) {\n                var pageX = _a.pageX, originalX = _a.originalX;\n                var delta = pageX - originalX;\n                var percent = toPercentage(delta, _this.originalWidth);\n                _this.service.resizeColumns(percent);\n            });\n        }));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'autoFitComplete'; }))\n            .subscribe(this.sizeToFit.bind(this)));\n        this.subscriptions.add(service.pipe(filter(function (e) { return e.type === 'triggerAutoFit'; }))\n            .subscribe(this.autoFit.bind(this)));\n        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.rtl = rtl;\n        }));\n    };\n    ColumnHandleDirective.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    ColumnHandleDirective.prototype.shouldUpdate = function () {\n        return !allLeafColumns(this.columns)\n            .map(function (column) { return column.width; })\n            .some(isBlank);\n    };\n    ColumnHandleDirective.prototype.initColumnWidth = function () {\n        this.column.width = headerWidth(this.element);\n    };\n    ColumnHandleDirective.prototype.initState = function () {\n        this.originalWidth = headerWidth(this.element);\n        this.service.resizedColumn({\n            column: this.column,\n            oldWidth: this.originalWidth\n        });\n    };\n    ColumnHandleDirective.prototype.resize = function (_a) {\n        var deltaPercent = _a.deltaPercent;\n        var delta = fromPercentage(this.originalWidth, deltaPercent);\n        if (isTruthy(this.rtl)) {\n            delta *= -1;\n        }\n        var newWidth = Math.max(this.originalWidth + delta, this.column.minResizableWidth);\n        var tableDelta = newWidth > this.column.minResizableWidth ?\n            delta : this.column.minResizableWidth - this.originalWidth;\n        this.updateWidth(this.column, newWidth);\n        this.service.resizeTable(tableDelta);\n    };\n    ColumnHandleDirective.prototype.sizeToFit = function (_a) {\n        var columns = _a.columns, widths = _a.widths;\n        var index = columns.indexOf(this.column);\n        var width = Math.max.apply(Math, widths.map(function (w) { return w[index]; })) + 1; //add 1px for IE\n        var tableDelta = width - this.originalWidth;\n        this.updateWidth(this.column, width);\n        this.service.resizeTable(tableDelta);\n    };\n    ColumnHandleDirective.prototype.updateWidth = function (column, width) {\n        column.width = width;\n        this.cdr.markForCheck(); //force CD cycle\n    };\n    ColumnHandleDirective.prototype.columnsForLevel = function (level) {\n        return columnsToRender(this.columns ? this.columns.filter(function (column) { return column.level === level; }) : []);\n    };\n    return ColumnHandleDirective;\n}());\nexport { ColumnHandleDirective };\n",null]}