{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/numerictextbox/numerictextbox.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/numerictextbox/numerictextbox.component.js","mtime":1529128638146},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, ViewChild, forwardRef, isDevMode, NgZone } from '@angular/core';\nimport { Keys } from '../common/enums';\nimport { anyChanged } from '../common/changes';\nimport { invokeElementMethod } from '../common/dom-utils';\nimport { add, toFixedPrecision } from '../common/math';\nimport { createMaxValidator } from '../validators/max.validator';\nimport { createMinValidator } from '../validators/min.validator';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { MIN_DOC_LINK, MAX_DOC_LINK, POINT, INITIAL_SPIN_DELAY, SPIN_DELAY, EXPONENT_REGEX } from './constants';\nimport { defined, noop, numericRegex, isNumber, pad, decimalPart } from './utils';\nimport { ArrowDirection } from './arrow-direction';\nimport { guid } from '../common/dom-utils';\nvar PARSABLE_OPTIONS = ['min', 'max', 'step', 'decimals'];\nvar PARSABLE_DEFAULTS = {\n    step: 1,\n    min: null,\n    max: null,\n    decimals: null\n};\n/**\n * Represents the Kendo UI NumericTextBox component for Angular.\n */\nvar NumericTextBoxComponent = /*@__PURE__*/ (function () {\n    function NumericTextBoxComponent(intl, renderer, localizationService, ngZone, hostElement) {\n        var _this = this;\n        this.intl = intl;\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        this.ngZone = ngZone;\n        this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Determines whether the component is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the component is readonly.\n         */\n        this.readonly = false;\n        /**\n         * Sets the title of the input element of the NumericTextBox.\n         */\n        this.title = '';\n        /**\n         * Specifies whether the value will be auto-corrected based on the min and max values.\n         */\n        this.autoCorrect = false;\n        /**\n         * Specifies the number of decimals that the user can enter when the input is focused.\n         */\n        this.decimals = null;\n        /**\n         * Specifies the value used to increment or decrement the component value.\n         */\n        this.step = 1;\n        /**\n         * Specifies whether the **Up** and **Down** spin buttons should be rendered.\n         */\n        this.spinners = true;\n        /**\n         * Determines whether the built-in min or max validators are enforced when validating a form.\n         *\n         * > The Angular 4.2.0 version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`\n         * to `false`, the built-in Angular validators will be executed.\n         */\n        this.rangeValidation = true; //TODO: test\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Specifies the value of the NumericTextBox component.\n         */\n        this.value = null;\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the input element.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        //TODO: test\n        /**\n         * Fires each time the input element gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * @hidden\n         */\n        this.focused = false;\n        /**\n         * @hidden\n         */\n        this.ArrowDirection = ArrowDirection;\n        /**\n         * @hidden\n         */\n        this.arrowDirection = ArrowDirection.None;\n        this.inputValue = '';\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this._format = \"n2\";\n        /**\n         * @hidden\n         */\n        this.releaseArrow = function () {\n            clearTimeout(_this.spinTimeout);\n            if (_this.arrowDirection !== ArrowDirection.None) {\n                _this.ngZone.run(function () {\n                    _this.arrowDirection = ArrowDirection.None;\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleInput = function () {\n            var input = _this.numericInput.nativeElement;\n            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd, inputValue = input.value;\n            if (_this.pressedKey === Keys.numpad_dot) {\n                inputValue = _this.replaceNumpadDotValue();\n            }\n            if (!_this.isValid(inputValue)) {\n                input.value = _this.inputValue;\n                _this.setSelection(selectionStart - 1, selectionEnd - 1);\n                return;\n            }\n            var parsedValue = _this.intl.parseNumber(inputValue);\n            var value = _this.restrictDecimals(parsedValue);\n            if (_this.autoCorrect) {\n                var limited = _this.limitInputValue(value);\n                value = limited.value;\n                selectionStart = limited.selectionStart;\n                selectionEnd = limited.selectionEnd;\n            }\n            if (parsedValue !== value || !_this.focused) {\n                _this.setInputValue(value);\n                _this.setSelection(selectionStart, selectionEnd);\n            }\n            else {\n                _this.inputValue = inputValue;\n            }\n            if (value !== _this.value &&\n                !((value === undefined || value === null) &&\n                    (_this.value === undefined || _this.value === null))) {\n                _this.ngZone.run(function () {\n                    _this.updateValue(value);\n                });\n            }\n            _this.previousSelection = null;\n        };\n        /**\n         * @hidden\n         */\n        this.handleDragEnter = function () {\n            if (!_this.focused) {\n                _this.setInputValue(_this.value, true);\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleKeyDown = function (e) {\n            if (_this.disabled || _this.readonly) {\n                return;\n            }\n            var step;\n            if (e.keyCode === Keys.down) {\n                step = -1;\n            }\n            else if (e.keyCode === Keys.up) {\n                step = 1;\n            }\n            if (step && _this.step) {\n                e.preventDefault();\n                _this.ngZone.run(function () {\n                    _this.addStep(step);\n                });\n            }\n            var input = _this.numericInput.nativeElement;\n            _this.previousSelection = {\n                start: input.selectionStart,\n                end: input.selectionEnd\n            };\n            _this.pressedKey = e.keyCode;\n        };\n        //TODO: disable tslint and move those to the constructor level\n        this.ngChange = function (_) { };\n        this.ngTouched = function () { };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n        this.hostElement = hostElement.nativeElement;\n    }\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"format\", {\n        /**\n         * Specifies the number format which is used when the component is not focused.\n         * If set to `null` or `undefined`, the default format will be used.\n         */\n        get: function () {\n            var format = this._format;\n            return format !== null && format !== undefined ? format : 'n2';\n        },\n        set: function (value) {\n            this._format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumericTextBoxComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions = this.localizationService\n            .changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n        })\n            .add(this.intl.changes.subscribe(this.intlChange.bind(this)));\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.arrowPress = function (direction, e) {\n        e.preventDefault();\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.focused = true;\n        this.focus();\n        this.arrowDirection = direction;\n        if (this.step) {\n            this.spin(direction, INITIAL_SPIN_DELAY);\n        }\n        else {\n            this.setInputValue();\n        }\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.ngOnChanges = function (changes) {\n        if (anyChanged(PARSABLE_OPTIONS, changes, false)) {\n            this.parseOptions(PARSABLE_OPTIONS.filter(function (option) { return changes[option]; }));\n        }\n        this.verifySettings();\n        if (anyChanged(['min', 'max', 'rangeValidation'], changes, false)) {\n            this.minValidateFn = this.rangeValidation ? createMinValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? createMaxValidator(this.max) : noop;\n        }\n        if (anyChanged(['autoCorrect', 'decimals', 'min'], changes)) {\n            delete this.numericRegex;\n        }\n        if (anyChanged(['value', 'format'], changes, false)) {\n            this.verifyValue(this.value);\n            this.value = this.restrictModelValue(this.value);\n            this.setInputValue();\n        }\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n        clearTimeout(this.spinTimeout);\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.writeValue = function (value) {\n        this.verifyValue(value);\n        var restrictedValue = this.restrictModelValue(value);\n        this.value = restrictedValue;\n        this.setInputValue();\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    NumericTextBoxComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * Focuses the NumericTextBox component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"numerictextbox.focus()\">Focus NumericTextBox</button>\n     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    NumericTextBoxComponent.prototype.focus = function () {\n        if (!this.numericInput) {\n            return;\n        }\n        invokeElementMethod(this.numericInput, 'focus');\n    };\n    /**\n     * Blurs the NumericTextBox component.\n     */\n    NumericTextBoxComponent.prototype.blur = function () {\n        if (!this.numericInput) {\n            return;\n        }\n        invokeElementMethod(this.numericInput, 'blur');\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.handleFocus = function () {\n        var _this = this;\n        if (!this.focused) {\n            this.focused = true;\n            this.setInputValue();\n            this.ngZone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    _this.setSelection(0, _this.inputValue.length);\n                }, 0); /* tslint:disable-line  align */\n            });\n        }\n        this.onFocus.emit();\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.handleBlur = function () {\n        this.focused = false;\n        //blur is thrown before input when dragging the input text in IE\n        if (this.inputValue !== this.elementValue) {\n            this.handleInput();\n        }\n        this.ngTouched();\n        this.setInputValue();\n        this.onBlur.emit();\n    };\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"incrementTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('increment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"decrementTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('decrement');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"decimalSeparator\", {\n        get: function () {\n            var numberSymbols = this.intl.numberSymbols();\n            return numberSymbols.decimal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"elementValue\", {\n        get: function () {\n            return this.numericInput.nativeElement.value;\n        },\n        set: function (value) {\n            this.renderer.setProperty(this.numericInput.nativeElement, 'value', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumericTextBoxComponent.prototype.updateValue = function (candidate) {\n        if (candidate === this.value) {\n            return;\n        }\n        this.value = candidate;\n        this.ngChange(candidate);\n        this.valueChange.emit(candidate);\n    };\n    NumericTextBoxComponent.prototype.replaceNumpadDotValue = function () {\n        var value = this.inputValue || \"\";\n        if (this.previousSelection) {\n            var input = this.numericInput.nativeElement;\n            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd;\n            var _a = this.previousSelection, start = _a.start, end = _a.end;\n            input.value = value = value.substring(0, start) + this.decimalSeparator + value.substring(end);\n            this.setSelection(selectionStart, selectionEnd);\n        }\n        return value;\n    };\n    NumericTextBoxComponent.prototype.isValid = function (value) {\n        if (!this.numericRegex) {\n            this.numericRegex = numericRegex({\n                autoCorrect: this.autoCorrect,\n                decimals: this.decimals,\n                min: this.min,\n                separator: this.decimalSeparator\n            });\n        }\n        return this.numericRegex.test(value);\n    };\n    NumericTextBoxComponent.prototype.spin = function (step, timeout) {\n        var _this = this;\n        clearTimeout(this.spinTimeout);\n        this.spinTimeout = window.setTimeout(function () {\n            _this.spin(step, SPIN_DELAY);\n        }, timeout); /* tslint:disable-line  align */\n        this.addStep(step);\n    };\n    NumericTextBoxComponent.prototype.addStep = function (step) {\n        var value = add(this.value || 0, this.step * step);\n        value = this.limitValue(value);\n        value = this.restrictDecimals(value);\n        this.setInputValue(value);\n        this.updateValue(value);\n    };\n    NumericTextBoxComponent.prototype.setSelection = function (start, end) {\n        if (this.focused) {\n            invokeElementMethod(this.numericInput, 'setSelectionRange', start, end);\n        }\n    };\n    NumericTextBoxComponent.prototype.limitValue = function (value) {\n        var result = value;\n        if (!this.isInRange(value)) {\n            if (isNumber(this.max) && value > this.max) {\n                result = this.max;\n            }\n            if (isNumber(this.min) && value < this.min) {\n                result = this.min;\n            }\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.limitInputValue = function (value) {\n        var _a = this.numericInput.nativeElement, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd, enteredValue = _a.value;\n        var limitedValue = value;\n        var selectToEnd = false;\n        if (!this.isInRange(value)) {\n            var lengthChange = enteredValue.length - String(this.inputValue).length;\n            var _b = this, min = _b.min, max = _b.max;\n            var hasMax = isNumber(max);\n            var hasMin = isNumber(min);\n            var padLimit = void 0, replaceNext = void 0;\n            var correctedValue = value;\n            if (selectionStart === 0 && this.inputValue.substr(1) === enteredValue) {\n                return {\n                    value: null,\n                    selectionStart: selectionStart,\n                    selectionEnd: selectionEnd\n                };\n            }\n            if (hasMax && value > max) {\n                if (value > 0) {\n                    replaceNext = true;\n                }\n                else {\n                    padLimit = max;\n                }\n            }\n            else if (hasMin && value < min) {\n                if (value > 0) {\n                    padLimit = min;\n                }\n                else {\n                    replaceNext = true;\n                }\n            }\n            if (padLimit) {\n                var paddedValue = this.tryPadValue(value, padLimit);\n                if (paddedValue && decimalPart(value) !== decimalPart(padLimit)) {\n                    correctedValue = paddedValue;\n                    selectToEnd = true;\n                }\n            }\n            else if (replaceNext) {\n                if (this.inputValue && selectionStart !== enteredValue.length) {\n                    correctedValue = parseFloat(enteredValue.substr(0, selectionStart) +\n                        enteredValue.substr(selectionStart + lengthChange));\n                }\n            }\n            limitedValue = this.limitValue(correctedValue);\n            selectToEnd = (selectToEnd || limitedValue !== correctedValue) && this.previousSelection &&\n                (this.previousSelection.end - this.previousSelection.start + lengthChange) > 0;\n        }\n        return {\n            value: limitedValue,\n            selectionStart: selectionStart,\n            selectionEnd: selectToEnd ? String(limitedValue).length : selectionEnd\n        };\n    };\n    NumericTextBoxComponent.prototype.tryPadValue = function (value, limit) {\n        var limitLength = String(Math.floor(limit)).length;\n        var zeroPadded = pad(value, limitLength);\n        var zeroPaddedNext = pad(value, limitLength + 1);\n        var result;\n        if (this.isInRange(zeroPadded)) {\n            result = zeroPadded;\n        }\n        else if (this.isInRange(zeroPaddedNext)) {\n            result = zeroPaddedNext;\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.isInRange = function (value) {\n        return !isNumber(value) || ((!isNumber(this.min) || this.min <= value) && (!isNumber(this.max) || value <= this.max));\n    };\n    NumericTextBoxComponent.prototype.restrictModelValue = function (value) {\n        var result = this.restrictDecimals(value, true);\n        if (this.autoCorrect && this.limitValue(result) !== result) {\n            result = null;\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.restrictDecimals = function (value, round) {\n        var decimals = this.decimals;\n        var result = value;\n        if (value && decimals !== null && decimals >= 0) {\n            var stringValue = String(value);\n            if (round || EXPONENT_REGEX.test(stringValue)) {\n                result = toFixedPrecision(value, decimals);\n            }\n            else {\n                var parts = stringValue.split(POINT);\n                var fraction = parts[1];\n                if (fraction && fraction.length > decimals) {\n                    fraction = fraction.substr(0, decimals);\n                    result = parseFloat(\"\" + parts[0] + POINT + fraction);\n                }\n            }\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.formatInputValue = function (value) {\n        return String(value).replace(POINT, this.decimalSeparator);\n    };\n    NumericTextBoxComponent.prototype.formatValue = function (value, focused) {\n        var formattedValue;\n        if (value === null || !defined(value) || value === '') {\n            formattedValue = '';\n        }\n        else if (focused) {\n            formattedValue = this.formatInputValue(value);\n        }\n        else {\n            formattedValue = this.intl.formatNumber(value, this.format);\n        }\n        return formattedValue;\n    };\n    NumericTextBoxComponent.prototype.setInputValue = function (value, focused) {\n        if (value === void 0) {\n            value = this.value;\n        }\n        if (focused === void 0) {\n            focused = this.focused;\n        }\n        var formattedValue = this.formatValue(value, focused);\n        this.elementValue = formattedValue;\n        this.inputValue = formattedValue;\n    };\n    NumericTextBoxComponent.prototype.verifySettings = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.min !== null && this.max !== null && this.min > this.max) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK + \" and \" + MAX_DOC_LINK + \".\");\n        }\n    };\n    NumericTextBoxComponent.prototype.verifyValue = function (value) {\n        if (isDevMode() && value && typeof value !== 'number') {\n            throw new Error(\"The NumericTextBox component requires value of type Number and \" + JSON.stringify(value) + \" was set.\");\n        }\n    };\n    NumericTextBoxComponent.prototype.parseOptions = function (options) {\n        for (var idx = 0; idx < options.length; idx++) {\n            var name_1 = options[idx];\n            var value = this[name_1];\n            if (typeof value === 'string') {\n                var parsed = parseFloat(value);\n                var valid = !isNaN(parsed);\n                if (isDevMode() && !valid && value !== '') {\n                    throw new Error('The NumericTextBox component requires value of type Number or a String representing ' +\n                        (\"a number for the \" + name_1 + \" property and \" + JSON.stringify(value) + \" was set.\"));\n                }\n                this[name_1] = valid ? parsed : PARSABLE_DEFAULTS[name_1];\n            }\n        }\n    };\n    NumericTextBoxComponent.prototype.intlChange = function () {\n        delete this.numericRegex;\n        if (this.numericInput && (!this.focused || !this.isValid(this.elementValue))) {\n            this.setInputValue();\n        }\n    };\n    return NumericTextBoxComponent;\n}());\nexport { NumericTextBoxComponent };\n",null]}