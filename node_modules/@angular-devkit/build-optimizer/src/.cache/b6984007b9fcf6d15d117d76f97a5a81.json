{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@telerik/kendo-inputs-common/dist/es/SwitchController.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@telerik/kendo-inputs-common/dist/es/SwitchController.js","mtime":1518622024000},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import Model from './SwitchModel';\n\nvar DEFAULT_THRESHOLD = 5;\n\nvar noop = function () { /*noop*/ };\n\nvar SwitchController = function SwitchController(updateView, onChange) {\n    var this$1 = this;\n    if ( updateView === void 0 ) updateView = noop;\n    if ( onChange === void 0 ) onChange = noop;\n\n    this.handlePosition = 0;\n    this.wrapperOffset = 0;\n    this.handleOffset = 0;\n    this.handleMargin = 4;\n\n    this.updateView = updateView;\n    this.onChange = onChange;\n\n    this.change = function (checked) {\n        this$1.checked = checked;\n\n        this$1.updateView(this$1.updateModel(checked ? this$1.constrain : 0));\n\n        this$1.onChange(checked);\n    };\n\n    this.limit = function (value) {\n        if (value > this$1.constrain) {\n            return this$1.constrain;\n        }\n\n        if (value < 0) {\n            return 0;\n        }\n\n        return value;\n    };\n\n    this.addAnimation = function (model) {\n        if (model.transition === true) {\n            model.transition = 'all 200ms ease-out';\n        } else {\n            model.transition = 'none';\n        }\n        return model;\n    };\n\n    this.onPress = function (ref) {\n        var pageX = ref.pageX;\n\n        this$1.lastPressX = this$1.originalPressX = pageX;\n    };\n\n    this.onRelease = function (ref) {\n        var pageX = ref.pageX;\n\n        var delta = Math.abs(this$1.originalPressX - pageX);\n        var snapPoint = this$1.constrain / 2;\n        var checked = delta < DEFAULT_THRESHOLD ? !this$1.checked : this$1.handlePosition > snapPoint;\n\n        this$1.change(checked);\n    };\n\n    this.onDrag = function (ref) {\n        var pageX = ref.pageX;\n\n        var ref$1 = this$1.coords;\n        var left = ref$1.left;\n        var right = ref$1.right;\n        var overElement = pageX > left && pageX < right;\n\n        if (overElement) {\n            var delta = this$1.reverse ? this$1.lastPressX - pageX : pageX - this$1.lastPressX;\n            var position = this$1.limit(this$1.handlePosition + delta);\n\n            this$1.lastPressX = pageX;\n            this$1.handlePosition = position;\n            this$1.updateView(this$1.updateModel(this$1.handlePosition));\n        }\n        if (pageX > right) {\n            this$1.updateView(this$1.updateModel(this$1.reverse ? 0 : this$1.constrain));\n        }\n\n        if (pageX < left) {\n            this$1.updateView(this$1.updateModel(this$1.reverse ? 0 : this$1.constrain));\n        }\n    };\n};\n\nvar prototypeAccessors = { constrain: { configurable: true } };\n\nprototypeAccessors.constrain.get = function () {\n    return this.wrapperOffset - this.handleOffset - this.handleMargin;\n};\n\nSwitchController.prototype.updateState = function updateState (ref) {\n        var wrapperOffset = ref.wrapperOffset;\n        var handleOffset = ref.handleOffset;\n        var checked = ref.checked;\n        var animate = ref.animate; if ( animate === void 0 ) animate = true;\n        var coords = ref.coords;\n        var handleMargin = ref.handleMargin;\n        var reverse = ref.reverse;\n\n    this.wrapperOffset = wrapperOffset;\n    this.handleOffset = handleOffset;\n    this.coords = coords;\n    this.handleMargin = handleMargin;\n\n    this.checked = checked;\n    this.reverse = reverse;\n\n    this.updateView(this.updateModel(checked ? this.constrain : 0, animate));\n};\n\nSwitchController.prototype.updateModel = function updateModel (position, animate) {\n        if ( animate === void 0 ) animate = true;\n\n    var pos = this.reverse ? this.wrapperOffset / 2 - position : position;\n    return new Model(pos, animate);\n};\n\nObject.defineProperties( SwitchController.prototype, prototypeAccessors );\n\nexport default SwitchController;\n",null]}