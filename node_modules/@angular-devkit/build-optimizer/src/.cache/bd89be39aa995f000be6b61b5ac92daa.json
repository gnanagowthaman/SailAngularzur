{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/filtering/base-filter-cell.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/filtering/base-filter-cell.component.js","mtime":1529128645914},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ContentChildren, QueryList, HostBinding } from '@angular/core';\nimport { isCompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { isPresent, observe } from '../utils';\nimport { FilterOperatorBase, toJSON } from './operators/filter-operator.base';\nimport { map } from 'rxjs/operators/map';\nvar insertDefaultFilter = function (index, rootFilter, filter) {\n    rootFilter = (rootFilter || { filters: [], logic: \"and\" });\n    rootFilter.filters[index] = filter;\n    return filter;\n};\n/**\n * @hidden\n */\nexport var setFilter = function (index, filter, field, defaultOperator) {\n    if (isPresent(filter) && isPresent(filter.filters) && filter.filters.length > index) {\n        return filter.filters[index];\n    }\n    else {\n        return insertDefaultFilter(index, filter, {\n            field: field,\n            operator: defaultOperator\n        });\n    }\n};\n/**\n * @hidden\n */\nexport var logicOperators = function (localization) {\n    return [\n        { text: localization.get(\"filterAndLogic\"), value: \"and\" },\n        { text: localization.get(\"filterOrLogic\"), value: \"or\" }\n    ];\n};\n/**\n * @hidden\n */\nexport var flatten = function (filter) {\n    if (isPresent(filter.filters)) {\n        return filter.filters.reduce(function (acc, curr) {\n            return acc.concat(isCompositeFilterDescriptor(curr) ? flatten(curr) : [curr]);\n        }, []);\n    }\n    return [];\n};\nvar trimFilterByField = function (filter, field) {\n    if (isPresent(filter) && isPresent(filter.filters)) {\n        filter.filters = filter.filters.filter(function (x) {\n            if (isCompositeFilterDescriptor(x)) {\n                trimFilterByField(x, field);\n                return x.filters.length;\n            }\n            else {\n                return x.field !== field;\n            }\n        });\n    }\n};\n/**\n * @hidden\n */\nexport var filtersByField = function (filter, field) {\n    return flatten(filter || {}).filter(function (x) { return x.field === field; });\n};\n/**\n * @hidden\n */\nexport var filterByField = function (filter, field) {\n    var currentFilter = filtersByField(filter, field)[0];\n    return currentFilter;\n};\n/**\n * @hidden\n */\nexport var removeFilter = function (filter, field) {\n    trimFilterByField(filter, field);\n    return filter;\n};\n/**\n * @hidden\n */\nexport var localizeOperators = function (operators) {\n    return function (localization) {\n        return Object.keys(operators).map(function (key) {\n            return ({\n                text: localization.get(key),\n                value: operators[key]\n            });\n        });\n    };\n};\n/**\n * An abstract base class for the filter-cell component.\n */\nvar BaseFilterCellComponent = /*@__PURE__*/ (function () {\n    function BaseFilterCellComponent(filterService) {\n        this.filterService = filterService;\n        this.operatorList = new QueryList();\n    }\n    Object.defineProperty(BaseFilterCellComponent.prototype, \"hostClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseFilterCellComponent.prototype, \"operators\", {\n        get: function () {\n            return this._operators.length ? this._operators : this.defaultOperators;\n        },\n        set: function (values) {\n            this._operators = values;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    BaseFilterCellComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.operationListSubscription = observe(this.operatorList)\n            .pipe(map(function (q) { return q.toArray(); }), map(toJSON))\n            .subscribe(function (x) {\n            _this.operators = x;\n        });\n    };\n    BaseFilterCellComponent.prototype.ngOnDestroy = function () {\n        if (this.operationListSubscription) {\n            this.operationListSubscription.unsubscribe();\n        }\n    };\n    BaseFilterCellComponent.prototype.filterByField = function (field) {\n        return filterByField(this.filter, field);\n    };\n    BaseFilterCellComponent.prototype.filtersByField = function (field) {\n        return filtersByField(this.filter, field);\n    };\n    BaseFilterCellComponent.prototype.removeFilter = function (field) {\n        return removeFilter(this.filter, field);\n    };\n    BaseFilterCellComponent.prototype.updateFilter = function (filter) {\n        var root = this.filter || {\n            filters: [],\n            logic: \"and\"\n        };\n        var currentFilter = flatten(root).filter(function (x) { return x.field === filter.field; })[0];\n        if (!isPresent(currentFilter)) {\n            root.filters.push(filter);\n        }\n        else {\n            Object.assign(currentFilter, filter);\n        }\n        return root;\n    };\n    BaseFilterCellComponent.prototype.applyFilter = function (filter) {\n        this.filterService.filter(filter);\n    };\n    return BaseFilterCellComponent;\n}());\nexport { BaseFilterCellComponent };\n",null]}