{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dropdowns/dist/es/dropdownlist.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dropdowns/dist/es/dropdownlist.component.js","mtime":1520327234000},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:max-line-length */\n/* tslint:disable:no-bitwise */\nimport { Component, Renderer2, forwardRef, ElementRef, Input, Output, HostBinding, EventEmitter, ContentChild, ViewChild, ViewContainerRef, isDevMode, Optional, Inject, NgZone, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { merge } from 'rxjs/observable/merge';\nimport { interval } from 'rxjs/observable/interval';\nimport { concatMap } from 'rxjs/operators/concatMap';\nimport { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';\nimport { filter } from 'rxjs/operators/filter';\nimport { map } from 'rxjs/operators/map';\nimport { skipWhile } from 'rxjs/operators/skipWhile';\nimport { take } from 'rxjs/operators/take';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport { tap } from 'rxjs/operators/tap';\nimport { Subject } from 'rxjs/Subject';\nimport { Keys } from './common/keys';\nimport { isPresent, guid, isDocumentAvailable, getter, resolveValue, shuffleData, sameCharsOnly, matchText } from './util';\nimport { SelectionService } from './selection.service';\nimport { NavigationService } from './navigation.service';\nimport { ItemTemplateDirective } from './templates/item-template.directive';\nimport { ValueTemplateDirective } from './templates/value-template.directive';\nimport { HeaderTemplateDirective } from './templates/header-template.directive';\nimport { FooterTemplateDirective } from './templates/footer-template.directive';\nimport { NoDataTemplateDirective } from './templates/no-data-template.directive';\nimport { NavigationAction } from './navigation-action';\nimport { PreventableEvent } from './common/preventable-event';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { TOUCH_ENABLED } from './touch-enabled';\nvar InternalState = /*@__PURE__*/ (function (InternalState) {\n    InternalState[InternalState[\"None\"] = 0] = \"None\";\n    InternalState[InternalState[\"SetInitial\"] = 1] = \"SetInitial\";\n    InternalState[InternalState[\"UseModel\"] = 2] = \"UseModel\";\n    InternalState[InternalState[\"UseExisting\"] = 4] = \"UseExisting\";\n    InternalState[InternalState[\"UseDefault\"] = 8] = \"UseDefault\";\n    return InternalState;\n})({});\n/**\n * @hidden\n */\nexport var DROPDOWNLIST_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-use-before-declare\n    useExisting: forwardRef(function () { return DropDownListComponent; })\n};\n/**\n * Represents the Kendo UI DropDownList component for Angular.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <kendo-dropdownlist [data]=\"listItems\">\n *  </kendo-dropdownlist>\n * `\n * })\n * class AppComponent {\n *   public listItems: Array<string> = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"];\n * }\n * ```\n */\nvar DropDownListComponent = /*@__PURE__*/ (function () {\n    function DropDownListComponent(rtl, popupService, selectionService, navigationService, _zone, renderer, hostElement, cdr, touchEnabled) {\n        this.popupService = popupService;\n        this.selectionService = selectionService;\n        this.navigationService = navigationService;\n        this._zone = _zone;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this.cdr = cdr;\n        this.touchEnabled = touchEnabled;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Sets the disabled state of the component.\n         */\n        this.disabled = false;\n        /**\n         * Sets the readonly state of the component.\n         */\n        this.readonly = false;\n        /**\n         * Enables the [filtering]({% slug filtering_ddl %}) functionality of the DropDownList.\n         */\n        this.filterable = false;\n        /**\n         * Enables a case-insensitive search. When filtration is disabled, use this option.\n         */\n        this.ignoreCase = true;\n        /**\n         * Sets the delay before an item search is performed. When filtration is disabled, use this option.\n         */\n        this.delay = 500;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the value is changed&mdash;\n         * when the component is blurred or the value is cleared through the **Clear** button.\n         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user types in the input field.\n         * You can filter the source based on the passed filtration value.\n         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).\n         *\n         * When the value of the component is changed programmatically through its API or form binding\n         * (either to `ngModel` or `formControl`), the `valueChange` event is not triggered because of\n         * potentially causing a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.\n         */\n        this.filterChange = new EventEmitter();\n        /**\n         * Fires each time the item selection is changed.\n         * For more details, refer to the example on [events]({% slug overview_ddl %}#toc-events).\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time the user focuses the DropDownList.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the DropDownList gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        this.listBoxId = guid();\n        this.optionPrefix = guid();\n        this.filterText = \"\";\n        this.isFocused = false;\n        this.onTouchedCallback = function (_) { };\n        this.onChangeCallback = function (_) { };\n        this.word = \"\";\n        this.last = \"\";\n        this.filterFocused = new EventEmitter();\n        this.filterBlurred = new EventEmitter();\n        this.wrapperFocused = new EventEmitter();\n        this.wrapperBlurred = new EventEmitter();\n        this.valueSubject = new Subject();\n        this.selectionSubject = new Subject();\n        this._state = InternalState.SetInitial;\n        this._open = false;\n        this._popupSettings = { height: 200, animate: true };\n        this.direction = rtl ? 'rtl' : 'ltr';\n        this.data = [];\n        this.subscribeEvents();\n        this.hostElement = hostElement.nativeElement;\n        this.popupMouseDownHandler = this.onMouseDown.bind(this);\n    }\n    Object.defineProperty(DropDownListComponent.prototype, \"width\", {\n        get: function () {\n            var wrapperWidth = isDocumentAvailable() ? this.wrapper.nativeElement.offsetWidth : 0;\n            var width = this.popupSettings.width || wrapperWidth;\n            var minWidth = isNaN(wrapperWidth) ? wrapperWidth : wrapperWidth + \"px\";\n            var maxWidth = isNaN(width) ? width : width + \"px\";\n            return { min: minWidth, max: maxWidth };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"height\", {\n        get: function () {\n            return this.popupSettings.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"popupOpen\", {\n        get: function () {\n            return this._open;\n        },\n        set: function (open) {\n            if (this.disabled || this.readonly || this.popupOpen === open) {\n                return;\n            }\n            var eventArgs = new PreventableEvent();\n            if (open) {\n                this.open.emit(eventArgs);\n            }\n            else {\n                this.close.emit(eventArgs);\n                if (this.filterable && this.isFocused) {\n                    this.focus();\n                }\n            }\n            if (eventArgs.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(open);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"widgetTabIndex\", {\n        get: function () {\n            return this.disabled ? undefined : this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaHasPopup\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaExpanded\", {\n        get: function () {\n            return this.popupOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaOwns\", {\n        get: function () {\n            return this.listBoxId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"ariaActivedescendant\", {\n        get: function () {\n            return this.optionPrefix + \"-\" + getter(this.value, this.valueField);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"appendTo\", {\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        /**\n         * Sets the data of the DropDownList.\n         *\n         * > The data has to be provided in an array-like list.\n         */\n        set: function (data) {\n            this._data = data || [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Sets the value of the DropDownList. It can either be of the primitive (string, numbers) or of the complex (objects) type. To define the type, use the `valuePrimitive` option.\n         *\n         * > All selected values which are not present in the source are ignored.\n         */\n        set: function (newValue) {\n            this._value = newValue;\n            this.cdr.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the DropDownList.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `width: Number`&mdash;Sets the width of the popup container. By default, the width of the host element is used.\n         * - `height: Number`&mdash;Sets the height of the popup container. By default, the height is 200px.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({ animate: true, height: 200 }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.blurComponent = function () {\n        this.wrapperBlurred.emit();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.blurFilterInput = function () {\n        this.filterBlurred.emit();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.focusComponent = function () {\n        this.wrapperFocused.emit();\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.onFocus.emit();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.keydown = function (event) {\n        var hasSelected = isPresent(this.selectionService.selected[0]);\n        var focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;\n        var offset = 0;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        if (this.filterInput && this.filterInput.nativeElement === document.activeElement && (event.keyCode === Keys.home || event.keyCode === Keys.end)) {\n            return;\n        }\n        if (!hasSelected) {\n            if (event.keyCode === Keys.down) {\n                offset = -1;\n            }\n            else if (event.keyCode === Keys.up) {\n                offset = 1;\n            }\n        }\n        var eventData = event;\n        var action = this.navigationService.process({\n            current: focused + offset,\n            max: this.data.length - 1,\n            min: this.defaultItem ? -1 : 0,\n            originalEvent: eventData\n        });\n        var leftRightKeys = (action === NavigationAction.Left) || (action === NavigationAction.Right);\n        if (action !== NavigationAction.Undefined &&\n            action !== NavigationAction.Tab &&\n            action !== NavigationAction.Backspace &&\n            action !== NavigationAction.Delete &&\n            !(leftRightKeys && this.filterable) &&\n            action !== NavigationAction.Enter //enter when popup is opened is handled before `handleEnter`\n        ) {\n            eventData.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.keypress = function (event) {\n        if (!this.filterable) {\n            this.onKeyPress(event);\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.click = function () {\n        this.wrapper.nativeElement.focus();\n        this.popupOpen = !this.popupOpen;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.onResize = function () {\n        if (this._open) {\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n        }\n    };\n    Object.defineProperty(DropDownListComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DropDownListComponent.prototype.ngOnInit = function () {\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n        this.createSelectionStream();\n        this.createValueStream();\n    };\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    DropDownListComponent.prototype.isEmpty = function () {\n        return !this.value && !this.defaultItem;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.onFilterFocus = function () {\n        this.filterFocused.emit();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.popupOpened = function () {\n        if (this.filterInput && !this.touchEnabled) {\n            var nativeElement_1 = this.filterInput.nativeElement;\n            var text_1 = this.filterText || nativeElement_1.value;\n            this.nextTick(function () {\n                nativeElement_1.focus();\n                nativeElement_1.setSelectionRange(text_1.length, text_1.length);\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.ngOnDestroy = function () {\n        this._toggle(false);\n        this.unsubscribeEvents();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.ngOnChanges = function (_changes) {\n        if (this.valuePrimitive === undefined) {\n            this.valuePrimitive = this.valueField ? false : true;\n        }\n        if (_changes.hasOwnProperty(\"value\")) {\n            this.verifySettings(_changes.value.currentValue);\n            this._modelValue = _changes.value.currentValue;\n        }\n        this.setState();\n    };\n    /**\n     * Focuses the DropDownList.\n     */\n    DropDownListComponent.prototype.focus = function () {\n        if (!this.disabled) {\n            this.wrapper.nativeElement.focus();\n        }\n    };\n    /**\n     * Blurs the DropDownList.\n     */\n    DropDownListComponent.prototype.blur = function () {\n        if (!this.disabled) {\n            this.wrapper.nativeElement.blur();\n        }\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.\n     *\n     * @param open - The state of the popup.\n     */\n    DropDownListComponent.prototype.toggle = function (open) {\n        var _this = this;\n        Promise.resolve(null).then(function () {\n            _this._toggle((open === undefined) ? !_this._open : open);\n            _this.cdr.markForCheck();\n        });\n    };\n    Object.defineProperty(DropDownListComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.popupOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the value of the DropDownList.\n     * If you use the `reset` method to clear the value of the component,\n     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.\n     */\n    DropDownListComponent.prototype.reset = function () {\n        this._modelValue = undefined;\n        this.setState();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.writeValue = function (value) {\n        this.verifySettings(value);\n        var isInitial = Boolean(value !== null && this._state & InternalState.SetInitial);\n        if ((value === null && this._state & InternalState.UseModel) && this._state & InternalState.SetInitial) {\n            return;\n        }\n        if (isInitial) {\n            this._state |= InternalState.UseModel;\n        }\n        this._modelValue = value;\n        this.setState();\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCallback = fn;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(DropDownListComponent.prototype, \"listContainerClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var containerClasses = ['k-list-container', 'k-reset'];\n            if (this.popupSettings.popupClass) {\n                containerClasses.push(this.popupSettings.popupClass);\n            }\n            return containerClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DropDownListComponent.prototype, \"buttonClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return _a = {},\n                _a[this.iconClass] = !this.loading && this.iconClass,\n                _a['k-i-arrow-s'] = !this.loading && !this.iconClass,\n                _a['k-i-loading'] = this.loading,\n                _a['k-icon'] = true,\n                _a;\n            var _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.setDefaultItemClasses = function () {\n        return {\n            'k-list-optionlabel': true\n        };\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.getText = function () {\n        return this.text;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.getDefaultItemText = function () {\n        return getter(this.defaultItem, this.textField);\n    };\n    DropDownListComponent.prototype._toggle = function (open) {\n        var _this = this;\n        this._open = open;\n        if (this.popupRef) {\n            this.popupRef.popupElement\n                .removeEventListener('mousedown', this.popupMouseDownHandler);\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        if (this._open) {\n            var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n            var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n            var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n            this.popupRef = this.popupService.open({\n                anchor: this.wrapper,\n                anchorAlign: anchorPosition,\n                animate: this.popupSettings.animate,\n                appendTo: this.appendTo,\n                content: this.popupTemplate,\n                popupAlign: popupPosition,\n                popupClass: this.listContainerClasses,\n                positionMode: 'absolute'\n            });\n            var popupWrapper = this.popupRef.popupElement;\n            var _a = this.width, min = _a.min, max = _a.max;\n            popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);\n            popupWrapper.style.minWidth = min;\n            popupWrapper.style.width = max;\n            popupWrapper.setAttribute(\"dir\", this.direction);\n            this.popupRef.popupOpen.subscribe(this.popupOpened.bind(this));\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.popupOpen = false; });\n        }\n    };\n    DropDownListComponent.prototype.createSelectionStream = function () {\n        var _this = this;\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n        this.selectionSubscription = this.selectionSubject.pipe(map(function (index) {\n            var dataItem = isPresent(_this.data[index]) ? _this.data[index] : _this.defaultItem;\n            return {\n                dataItem: dataItem,\n                text: getter(dataItem, _this.textField),\n                value: _this.valuePrimitive ? getter(dataItem, _this.valueField) : dataItem\n            };\n        }), distinctUntilChanged(function (prev, next) {\n            return prev.value === next.value;\n        }))\n            .subscribe(function (state) {\n            _this.dataItem = state.dataItem;\n            _this.text = state.text;\n            _this.value = state.value;\n            _this.selectionChange.emit(state.dataItem);\n        });\n    };\n    DropDownListComponent.prototype.createValueStream = function () {\n        var _this = this;\n        if (this.valueSubscription) {\n            this.valueSubscription.unsubscribe();\n        }\n        this.valueSubscription = this.valueSubject.pipe(tap(function () { _this.popupOpen = false; }), map(function (dataItem) { return dataItem || _this.defaultItem; }), distinctUntilChanged(function (prev, next) {\n            var current = getter(_this.dataItem, _this.valueField);\n            prev = getter(prev, _this.valueField);\n            next = getter(next, _this.valueField);\n            return (prev === next) && (current === next);\n        }), map(function (dataItem) {\n            var primitiveValue = getter(dataItem, _this.valueField);\n            var newValue = _this.valuePrimitive ? primitiveValue : dataItem;\n            var newText = getter(dataItem, _this.textField);\n            return {\n                dataItem: dataItem,\n                primitiveValue: primitiveValue,\n                text: newText,\n                value: newValue\n            };\n        }))\n            .subscribe(function (state) {\n            _this.dataItem = state.dataItem;\n            _this.value = state.value;\n            _this.text = state.text;\n            _this.selectionSubject.next(_this.data.findIndex(function (element) {\n                return getter(element, _this.valueField) === getter(_this.value, _this.valueField, _this.valuePrimitive);\n            }));\n            _this.emitChange(_this.valuePrimitive ? state.primitiveValue : _this.value);\n            if (_this.filterable && _this.filterText) {\n                _this.filterText = \"\";\n                _this.cdr.markForCheck();\n                _this.filterChange.emit(_this.filterText);\n            }\n        });\n    };\n    DropDownListComponent.prototype.subscribeEvents = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.changeSubscription = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));\n        this.selectSubscription = this.selectionService.onSelect.subscribe(this.handleItemSelect.bind(this));\n        this.navigationSubscription = merge(this.navigationService.up, this.navigationService.down, this.navigationService.left.pipe(skipWhile(function () { return _this.filterable; })), this.navigationService.right.pipe(skipWhile(function () { return _this.filterable; })), this.navigationService.home, this.navigationService.end)\n            .subscribe(function (event) { return _this.selectionService.select(event.index); });\n        this.openSubscription = this.navigationService.open.subscribe(function () { return _this.popupOpen = true; });\n        this.closeSubscription = this.navigationService.close.subscribe(function () {\n            _this.popupOpen = false;\n            _this.wrapper.nativeElement.focus();\n        });\n        this.enterSubscription =\n            merge(this.navigationService.enter.pipe(tap(function (event) {\n                if (_this.popupOpen) {\n                    event.originalEvent.preventDefault();\n                }\n            })), this.navigationService.esc)\n                .subscribe(this.handleEnter.bind(this));\n        this.filterBlurredSubscription = this.filterBlurred.pipe(concatMap(function () { return interval(10).pipe(take(1), takeUntil(_this.wrapperFocused)); }))\n            .subscribe(function () {\n            _this.wrapperBlurred.emit();\n        });\n        this._zone.runOutsideAngular(function () {\n            _this.componentBlurredSubscription =\n                merge(_this.wrapperBlurred.pipe(concatMap(function () { return interval(10).pipe(take(1), takeUntil(_this.filterFocused)); })), _this.navigationService.tab).pipe(filter(function () { return _this.isFocused; }))\n                    .subscribe(function () {\n                    return _this._zone.run(function () {\n                        _this.componentBlur();\n                    });\n                });\n        });\n    };\n    DropDownListComponent.prototype.unsubscribeEvents = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.changeSubscription.unsubscribe();\n        this.selectSubscription.unsubscribe();\n        this.navigationSubscription.unsubscribe();\n        this.openSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n        this.enterSubscription.unsubscribe();\n        this.componentBlurredSubscription.unsubscribe();\n        this.filterBlurredSubscription.unsubscribe();\n        if (this.selectionSubscription) {\n            this.selectionSubscription.unsubscribe();\n        }\n        if (this.valueSubscription) {\n            this.valueSubscription.unsubscribe();\n        }\n    };\n    DropDownListComponent.prototype.handleItemChange = function (event) {\n        var index = event.indices.length ? event.indices[0] : undefined;\n        if (!isPresent(index)) {\n            return;\n        }\n        var dataItem = isPresent(this.data[index]) ? this.data[index] : this.defaultItem;\n        this.valueSubject.next(dataItem);\n    };\n    DropDownListComponent.prototype.handleItemSelect = function (event) {\n        var index = event.indices.length ? event.indices[0] : undefined;\n        if (!isPresent(index)) {\n            return;\n        }\n        var dataItem = isPresent(this.data[index]) ? this.data[index] : this.defaultItem;\n        if (this.popupOpen) {\n            this.selectionSubject.next(index);\n        }\n        else {\n            this.valueSubject.next(dataItem);\n        }\n    };\n    DropDownListComponent.prototype.handleEnter = function () {\n        if (this.popupOpen) {\n            this.valueSubject.next(this.data[this.selectionService.focused]);\n            this.wrapper.nativeElement.focus();\n        }\n    };\n    DropDownListComponent.prototype.verifySettings = function (newValue) {\n        var valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.defaultItem && this.valueField && typeof this.defaultItem !== \"object\") {\n            throw new Error(\"defaultItem and data items must be of same type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/api/DropDownListComponent/#toc-defaultitem\");\n        }\n        if (this.valuePrimitive === true && isPresent(newValue) && typeof newValue === \"object\") {\n            throw new Error(\"Expected initial value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection\");\n        }\n        if (this.valuePrimitive === false && isPresent(newValue) && typeof newValue !== \"object\") {\n            throw new Error(\"Expected initial value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection\");\n        }\n        if (valueOrText) {\n            throw new Error(\"Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-bind-to-arrays-of-complex-data\");\n        }\n    };\n    DropDownListComponent.prototype.componentBlur = function () {\n        if (getter(this._previousValue, this.valueField) !== getter(this.value, this.valueField)) {\n            this.valueSubject.next(this.dataItem);\n        }\n        else {\n            this.popupOpen = false;\n        }\n        if (this.isFocused) {\n            this.isFocused = false;\n            this.onBlur.emit();\n            this.onTouchedCallback();\n        }\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.onMouseDown = function (event) {\n        var tagName = event.target.tagName.toLowerCase();\n        if (tagName !== \"input\") {\n            event.preventDefault();\n        }\n    };\n    DropDownListComponent.prototype.onKeyPress = function (event) {\n        if (event.which === 0 || event.keyCode === Keys.enter) {\n            return;\n        }\n        var character = String.fromCharCode(event.charCode || event.keyCode);\n        if (this.ignoreCase) {\n            character = character.toLowerCase();\n        }\n        if (character === \" \") {\n            event.preventDefault();\n        }\n        this.word += character;\n        this.last = character;\n        this.search();\n    };\n    DropDownListComponent.prototype.search = function () {\n        var _this = this;\n        clearTimeout(this.typingTimeout);\n        if (!this.filterable) {\n            this.typingTimeout = setTimeout(function () { _this.word = \"\"; }, this.delay);\n            this.selectNext();\n        }\n    };\n    DropDownListComponent.prototype.selectNext = function () {\n        var data = this.data.map(function (item, index) {\n            return { item: item, itemIndex: index };\n        });\n        var isInLoop = sameCharsOnly(this.word, this.last);\n        var dataLength = data.length;\n        var startIndex = isNaN(this.selectionService.selected[0]) ? 0 : this.selectionService.selected[0];\n        var text, index, defaultItem;\n        if (this.defaultItem) {\n            defaultItem = { item: this.defaultItem, itemIndex: -1 };\n            dataLength += 1;\n            startIndex += 1;\n        }\n        startIndex += isInLoop ? 1 : 0;\n        data = shuffleData(data, startIndex, defaultItem);\n        index = 0;\n        for (; index < dataLength; index++) {\n            text = getter(data[index].item, this.textField);\n            var loopMatch = Boolean(isInLoop && matchText(text, this.last, this.ignoreCase));\n            var nextMatch = Boolean(matchText(text, this.word, this.ignoreCase));\n            if (loopMatch || nextMatch) {\n                index = data[index].itemIndex;\n                break;\n            }\n        }\n        if (index !== dataLength) {\n            this.navigate(index);\n        }\n    };\n    DropDownListComponent.prototype.emitChange = function (value) {\n        this._modelValue = this.dataItem;\n        this.onChangeCallback(value);\n        this.valueChange.emit(value);\n    };\n    DropDownListComponent.prototype.navigate = function (index) {\n        this.selectionService.select(index);\n    };\n    DropDownListComponent.prototype.resolveState = function () {\n        var primitiveValue = getter(this._modelValue, this.valueField, true);\n        var existing;\n        var state;\n        if (this.data.length) {\n            state = InternalState.UseExisting;\n        }\n        else {\n            state = isPresent(this._modelValue) ? InternalState.UseModel : InternalState.UseDefault;\n        }\n        if (state === InternalState.UseExisting) {\n            existing = resolveValue({ data: this.data, defaultItem: this.defaultItem, value: primitiveValue, valueField: this.valueField });\n            if (existing.dataItem !== undefined) {\n                state = InternalState.UseExisting;\n            }\n            else {\n                state = isPresent(this._modelValue) ? InternalState.UseModel : InternalState.UseDefault;\n            }\n        }\n        state |= this._state & InternalState.SetInitial | this._state & InternalState.UseModel;\n        this._state = state;\n        return existing;\n    };\n    DropDownListComponent.prototype.setState = function () {\n        var resolved = this.resolveState();\n        var newState = { value: undefined, text: undefined, dataItem: undefined, selected: [] };\n        if (this._state & InternalState.UseModel && !(this._state & InternalState.UseExisting)) {\n            newState.value = this.valuePrimitive ? getter(this._modelValue, this.valueField, true) : this._modelValue;\n            newState.dataItem = this._modelValue;\n            newState.text = getter(isPresent(this._modelValue) ? this._modelValue : this.defaultItem, this.textField);\n            newState.selected = [];\n            this.selectionService.resetSelection(newState.selected);\n            this.selectionService.focused = 0;\n        }\n        else if (this._state & InternalState.UseExisting) {\n            newState.value = this.valuePrimitive ? getter(resolved.dataItem, this.valueField) : resolved.dataItem;\n            newState.dataItem = resolved.dataItem;\n            newState.text = getter(resolved.dataItem, this.textField);\n            if (this._state & InternalState.UseModel) {\n                this._modelValue = resolved.dataItem;\n            }\n            this.selectionService.resetSelection(resolved.selected);\n            if (this.filterText) {\n                this.selectionService.focused = 0;\n            }\n        }\n        else if (this._state & InternalState.UseDefault) {\n            newState.value = this.valuePrimitive ? getter(this.defaultItem, this.valueField, false) : this.defaultItem;\n            newState.dataItem = this.defaultItem;\n            newState.text = getter(this.defaultItem, this.textField);\n            this.selectionService.resetSelection(this.defaultItem ? [-1] : []);\n            this.selectionService.focused = 0;\n        }\n        if (this._state & InternalState.UseModel) {\n            this._state &= ~InternalState.UseModel;\n            this._state &= ~InternalState.SetInitial;\n            this._previousValue = newState.dataItem;\n        }\n        else {\n            this._previousValue = this.dataItem;\n        }\n        this.text = newState.text;\n        this.value = newState.value;\n        this.dataItem = newState.dataItem;\n    };\n    /**\n     * @hidden\n     */\n    DropDownListComponent.prototype.handleFilter = function (event) {\n        this.filterChange.emit(event.target.value);\n    };\n    DropDownListComponent.prototype.nextTick = function (f) {\n        var _this = this;\n        this._zone.runOutsideAngular(function () {\n            // Use `setTimeout` instead of a resolved promise\n            // because the latter does not wait long enough.\n            setTimeout(function () { return _this._zone.run(f); });\n        });\n    };\n    return DropDownListComponent;\n}());\nexport { DropDownListComponent };\n",null]}