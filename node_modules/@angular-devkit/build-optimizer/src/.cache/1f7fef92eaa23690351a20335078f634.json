{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/switch/switch.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/switch/switch.component.js","mtime":1529128638668},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ElementRef, Renderer2, Component, EventEmitter, HostBinding, HostListener, Input, Output, ViewChild, forwardRef, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { Keys } from '../common/enums';\nimport { isChanged } from '../common/changes';\nimport { SwitchController } from '@telerik/kendo-inputs-common';\nimport { guid } from '../common/dom-utils';\n/**\n * Represents the Kendo UI Switch component for Angular.\n */\nvar SwitchComponent = /*@__PURE__*/ (function () {\n    function SwitchComponent(renderer, hostElement, localizationService, changeDetector, ngZone) {\n        var _this = this;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this.localizationService = localizationService;\n        this.changeDetector = changeDetector;\n        this.ngZone = ngZone;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Sets the current value of the Switch when initially displayed.\n         */\n        this.checked = false;\n        /**\n         * Disables the Switch when set to `true`.\n         */\n        this.disabled = false;\n        /**\n         * If set to `true`, renders the Switch in its read-only state.\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the input element.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        this.ngChange = function (_) { };\n        this.ngTouched = function () { };\n        /**\n         * @hidden\n         */\n        this.changeValue = function (value) {\n            _this.checked = value;\n            _this.ngChange(value);\n            _this.valueChange.emit(value);\n        };\n        this.keyDownHandler = function (event) {\n            var keyCode = event.keyCode;\n            if (keyCode === Keys.space || keyCode === Keys.enter) {\n                _this.controller.change(!_this.checked);\n                event.preventDefault();\n            }\n        };\n        this.ifEnabled = function (callback, event) {\n            if (!_this.disabled && !_this.readonly) {\n                callback(event);\n            }\n        };\n        this.applyStyle = function (props) {\n            Object.keys(props).forEach(function (x) {\n                _this.dragHandle.nativeElement.style[x] = props[x];\n            });\n        };\n        this.updateView = function (elements) {\n            if (_this.isDocumentAvailable()) {\n                _this.applyStyle(_this.controller.addAnimation(elements.handle));\n            }\n        };\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n        this.controller = new SwitchController(this.updateView, this.changeValue);\n        this.hostElement = hostElement.nativeElement;\n    }\n    Object.defineProperty(SwitchComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled ? true : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"ariaReadonly\", {\n        get: function () {\n            return this.readonly ? true : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"ariaChecked\", {\n        get: function () {\n            return this.checked ? true : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"hostClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"switchOnClass\", {\n        get: function () {\n            return this.checked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"switchOffClass\", {\n        get: function () {\n            return !this.checked;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"focusedClass\", {\n        get: function () {\n            return this.focused;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"onLabelMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.onLabel || this.localizationService.get('on');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"offLabelMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.offLabel || this.localizationService.get('off');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SwitchComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.hostElement, \"tabindex\");\n        this.localizationChangeSubscription = this.localizationService\n            .changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.updateState();\n        });\n    };\n    SwitchComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged('checked', changes)) {\n            this.updateState();\n        }\n    };\n    SwitchComponent.prototype.ngOnDestroy = function () {\n        this.localizationChangeSubscription.unsubscribe();\n    };\n    /**\n     * Focuses the Switch component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"switch.focus()\">Focus</button>\n     *  <kendo-switch #switch></kendo-switch>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    SwitchComponent.prototype.focus = function () {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.focus();\n    };\n    /**\n     * Blurs the Switch component.\n     */\n    SwitchComponent.prototype.blur = function () {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.blur();\n    };\n    /**\n     * @hidden\n     *\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     */\n    SwitchComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.keyDown = function (event) {\n        this.ifEnabled(this.keyDownHandler, event);\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.onResize = function () {\n        this.updateState();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.handleFocus = function () {\n        this.focused = true;\n        this.onFocus.emit();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.handleBlur = function () {\n        this.focused = false;\n        this.ngTouched();\n        this.onBlur.emit();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            Promise.resolve().then(function () { return _this.updateState(); });\n        });\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.onHandleDrag = function (event) {\n        this.ifEnabled(this.controller.onDrag, event);\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.onHandlePress = function (event) {\n        this.ifEnabled(this.controller.onPress, event);\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.onHandleRelease = function (event) {\n        this.ifEnabled(this.controller.onRelease, event);\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.writeValue = function (value) {\n        this.checked = value === null ? false : value;\n        this.updateState();\n        this.changeDetector.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    SwitchComponent.prototype.isDocumentAvailable = function () {\n        return typeof document !== 'undefined';\n    };\n    SwitchComponent.prototype.updateState = function () {\n        if (!this.isDocumentAvailable()) {\n            return;\n        }\n        var rect = this.wrapper.nativeElement.getBoundingClientRect();\n        var coordsLeft = rect.left;\n        var coordsRight = rect.right;\n        var handleElement = this.dragHandle.nativeElement;\n        var handleMargin = parseInt(getComputedStyle(handleElement)['margin-right'], 10);\n        var handleOffset = handleElement.offsetWidth;\n        var wrapperOffset = this.wrapper.nativeElement.offsetWidth;\n        if (wrapperOffset === 0) {\n            return;\n        }\n        this.controller.updateState({\n            animate: false,\n            checked: this.checked,\n            coords: {\n                left: coordsLeft,\n                right: coordsRight\n            },\n            handleMargin: handleMargin,\n            handleOffset: handleOffset,\n            reverse: this.localizationService.rtl,\n            wrapperOffset: wrapperOffset\n        });\n    };\n    return SwitchComponent;\n}());\nexport { SwitchComponent };\n",null]}