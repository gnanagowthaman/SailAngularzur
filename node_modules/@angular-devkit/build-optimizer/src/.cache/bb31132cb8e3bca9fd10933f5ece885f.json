{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/dragdrop/drag-and-drop.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/dragdrop/drag-and-drop.service.js","mtime":1529128643244},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter } from '@angular/core';\nimport { contains } from './common';\n/**\n * @hidden\n */\nvar DragAndDropService = /*@__PURE__*/ (function () {\n    function DragAndDropService() {\n        this.changes = new EventEmitter();\n        this.register = [];\n        this.lastTarget = null;\n    }\n    DragAndDropService.prototype.add = function (target) {\n        this.register.push(target);\n    };\n    DragAndDropService.prototype.remove = function (target) {\n        this.register = this.register.filter(function (current) { return current !== target; });\n    };\n    DragAndDropService.prototype.notifyDrag = function (draggable, element, mouseEvent) {\n        var target = this.targetFor(element);\n        if (this.lastTarget === target) {\n            return;\n        }\n        this.changes.next({\n            draggable: draggable,\n            mouseEvent: mouseEvent,\n            target: this.lastTarget,\n            type: 'leave'\n        });\n        if (target) {\n            this.changes.next({\n                draggable: draggable,\n                mouseEvent: mouseEvent,\n                target: target,\n                type: 'enter'\n            });\n        }\n        this.lastTarget = target;\n    };\n    DragAndDropService.prototype.notifyDrop = function (draggable, mouseEvent) {\n        this.changes.next({\n            draggable: draggable,\n            mouseEvent: mouseEvent,\n            target: this.lastTarget,\n            type: 'drop'\n        });\n        this.lastTarget = null;\n    };\n    DragAndDropService.prototype.targetFor = function (element) {\n        var comparer = contains.bind(null, element);\n        return this.register.find(function (_a) {\n            var nativeElement = _a.element.nativeElement;\n            return comparer(nativeElement);\n        });\n    };\n    return DragAndDropService;\n}());\nexport { DragAndDropService };\n",null]}