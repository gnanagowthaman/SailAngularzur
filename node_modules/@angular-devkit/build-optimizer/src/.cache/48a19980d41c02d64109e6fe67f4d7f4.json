{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-intl/dist/es/cldr-intl.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-intl/dist/es/cldr-intl.service.js","mtime":1529128637279},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\nimport { format as intlFormat, toString } from './intl-members';\nimport { formatDate, parseDate, dateFieldName, dateFormatNames, firstDay, splitDateFormat } from './intl-members';\nimport { parseNumber, formatNumber, numberSymbols } from './intl-members';\nimport { IntlService } from './intl.service';\nvar LOCALE_REGEX = /_/g;\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@telerik/kendo-intl` package.\n */\nvar CldrIntlService = (function (_super) {\n    tslib_1.__extends(CldrIntlService, _super);\n    /**\n     * Creates a new instance of the service with the ID of the specified locale.\n     *\n     * Note that the parts of the locale ID can be separated by either `_` (underscore)\n     * or `-` (dash).\n     *\n     * @param localeId - The default locale ID.\n     */\n    function CldrIntlService(localeId) {\n        var _this = _super.call(this) || this;\n        _this.localeId = localeId;\n        return _this;\n    }\n    Object.defineProperty(CldrIntlService.prototype, \"localeId\", {\n        /**\n         * Gets or sets the current locale ID.\n         */\n        get: function () {\n            return this.locale;\n        },\n        set: function (value) {\n            // Angular locales use underscore, e.g. en_US\n            // while IETF BCP-47 specifies a dash.\n            // https://tools.ietf.org/html/bcp47\n            var locale = value.replace(LOCALE_REGEX, '-');\n            if (locale !== this.locale) {\n                this.locale = locale;\n                this.notify();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    CldrIntlService.prototype.format = function (format) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        return intlFormat(format, values, this.localeId);\n    };\n    /**\n     * Converts an object to a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n    CldrIntlService.prototype.toString = function (value, format, localeId) {\n        return toString(value, format, localeId || this.localeId);\n    };\n    /**\n     * Converts a `Date` object to a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n    CldrIntlService.prototype.formatDate = function (value, format, localeId) {\n        return formatDate(value, format, localeId || this.localeId);\n    };\n    /**\n     * Converts a string to a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n    CldrIntlService.prototype.parseDate = function (value, format, localeId) {\n        return parseDate(value, format, localeId || this.localeId);\n    };\n    /**\n     * Converts a string to a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n    CldrIntlService.prototype.parseNumber = function (value, format, localeId) {\n        return parseNumber(value, localeId || this.localeId, format);\n    };\n    /**\n     * Converts a `Number` to a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n    CldrIntlService.prototype.formatNumber = function (value, format, localeId) {\n        return formatNumber(value, format, localeId || this.localeId);\n    };\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n    CldrIntlService.prototype.dateFieldName = function (options, localeId) {\n        return dateFieldName(options, localeId || this.localeId);\n    };\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n    CldrIntlService.prototype.dateFormatNames = function (options, localeId) {\n        return dateFormatNames(localeId || this.localeId, options);\n    };\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n    CldrIntlService.prototype.splitDateFormat = function (format, localeId) {\n        return splitDateFormat(format, localeId || this.localeId);\n    };\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n    CldrIntlService.prototype.numberSymbols = function (localeId) {\n        return numberSymbols(localeId || this.localeId);\n    };\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n    CldrIntlService.prototype.firstDay = function (localeId) {\n        return firstDay(localeId || this.localeId);\n    };\n    return CldrIntlService;\n}(IntlService));\nexport { CldrIntlService };\n",null]}