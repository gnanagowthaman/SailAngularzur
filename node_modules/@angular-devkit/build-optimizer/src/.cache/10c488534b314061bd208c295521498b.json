{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/services/seconds.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/services/seconds.service.js","mtime":1529128645021},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { isEqual } from '@progress/kendo-date-math';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { MIDNIGHT_DATE } from '../../defaults';\nimport { range, setSeconds } from '../../util';\nvar SECONDS_IN_HOUR = 60;\nvar clampToRange = function (rangeValue) { return function (value) { return value % rangeValue; }; };\nvar clamp = clampToRange(SECONDS_IN_HOUR);\nvar stepper = function (start, step) { return function (idx) { return clamp(start + (idx * step)); }; };\nvar distanceFromMin = function (value, min) { return clamp(SECONDS_IN_HOUR + value - min); };\nvar limit = function (borderValue) {\n    return function (barrier, value) {\n        var useBarrier = !value || barrier.getHours() === value.getHours();\n        return useBarrier ? barrier : setSeconds(barrier, borderValue);\n    };\n};\nvar limitDown = limit(0);\nvar limitUp = limit(SECONDS_IN_HOUR - 1);\n/**\n * @hidden\n */\nvar SecondsService = /*@__PURE__*/ (function () {\n    function SecondsService(intl) {\n        this.intl = intl;\n        this.insertUndividedMax = false;\n    }\n    SecondsService.prototype.apply = function (value, candidate) {\n        return setSeconds(value, candidate.getSeconds());\n    };\n    SecondsService.prototype.configure = function (settings) {\n        var _this = this;\n        var _a = settings.insertUndividedMax, insertUndividedMax = _a === void 0 ? this.insertUndividedMax : _a, _b = settings.min, min = _b === void 0 ? this.min : _b, _c = settings.max, max = _c === void 0 ? this.max : _c, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;\n        this.insertUndividedMax = insertUndividedMax;\n        this.toListItem = function (minute) {\n            var date = setSeconds(MIDNIGHT_DATE, minute);\n            return {\n                text: _this.intl.formatDate(date, part.pattern),\n                value: date\n            };\n        };\n        this.min = min;\n        this.max = max;\n        this.step = step;\n    };\n    SecondsService.prototype.data = function (selectedValue) {\n        var _this = this;\n        var min = this.range(selectedValue)[0];\n        var getSecond = stepper(min, this.step);\n        var convertToItem = function (idx) { return (_this.toListItem(getSecond(idx))); };\n        var data = range(0, this.countFromMin(selectedValue)).map(convertToItem);\n        this.addLast(data);\n        this.addMissing(data, selectedValue);\n        return data;\n    };\n    SecondsService.prototype.isRangeChanged = function (min, max) {\n        return !isEqual(this.min, min) || !isEqual(this.max, max);\n    };\n    SecondsService.prototype.limitRange = function (min, max, value) {\n        return [limitDown(min, value), limitUp(max, value)];\n    };\n    SecondsService.prototype.total = function (value) {\n        var last = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;\n        var missing = this.isMissing(value) ? 1 : 0;\n        return this.countFromMin(value) + missing + last;\n    };\n    SecondsService.prototype.selectedIndex = function (value) {\n        return Math.ceil(this.divideByStep(value));\n    };\n    SecondsService.prototype.valueInList = function (value) {\n        if (!value) {\n            return true;\n        }\n        var matchMax = this.insertUndividedMax && this.lastSecond(value) === value.getSeconds();\n        return matchMax || !this.isMissing(value);\n    };\n    SecondsService.prototype.divideByStep = function (value) {\n        return distanceFromMin(value.getSeconds(), this.min.getSeconds()) / this.step;\n    };\n    SecondsService.prototype.addLast = function (data, value) {\n        if (this.insertUndividedMax && this.isLastMissing(value)) {\n            data.push(this.toListItem(this.lastSecond(value)));\n        }\n        return data;\n    };\n    SecondsService.prototype.addMissing = function (data, value) {\n        if (this.valueInList(value)) {\n            return data;\n        }\n        var missingItem = this.toListItem(value.getSeconds());\n        data.splice(this.selectedIndex(value), 0, missingItem);\n        return data;\n    };\n    SecondsService.prototype.countFromMin = function (value) {\n        var _a = this.range(value), min = _a[0], max = _a[1];\n        return Math.floor(distanceFromMin(max, min) / this.step) + 1; /* include min */\n    };\n    SecondsService.prototype.isMissing = function (value) {\n        if (!value) {\n            return false;\n        }\n        return this.selectedIndex(value) !== this.divideByStep(value);\n    };\n    SecondsService.prototype.isLastMissing = function (value) {\n        return this.isMissing(setSeconds(this.max, this.lastSecond(value)));\n    };\n    SecondsService.prototype.lastSecond = function (value) {\n        return this.range(value)[1];\n    };\n    SecondsService.prototype.range = function (value) {\n        var _a = this.limitRange(this.min, this.max, value), min = _a[0], max = _a[1];\n        return [min.getSeconds(), max.getSeconds()];\n    };\n    return SecondsService;\n}());\nexport { SecondsService };\n",null]}