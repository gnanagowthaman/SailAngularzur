{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/column-resizing/column-resizing.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/column-resizing/column-resizing.service.js","mtime":1529128638497},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter } from '@angular/core';\nimport { zip } from 'rxjs/observable/zip';\nimport { leafColumns } from '../columns/column-common';\nimport { take } from 'rxjs/operators/take';\n/**\n * @hidden\n */\nvar isLocked = function (column) { return column.parent ? isLocked(column.parent) : !!column.locked; };\n/**\n * @hidden\n */\nvar resizeArgs = function (column, extra) {\n    return Object.assign({\n        columns: leafColumns([column]),\n        locked: isLocked(column)\n    }, extra);\n}; // tslint:disable-line:align\n/**\n * @hidden\n */\nvar ColumnResizingService = /*@__PURE__*/ (function () {\n    function ColumnResizingService() {\n        this.changes = new EventEmitter();\n        this.tables = new Array();\n        this.muteEndNotification = false;\n    }\n    ColumnResizingService.prototype.start = function (column) {\n        this.trackColumns(column);\n        var columns = (this.column.isColumnGroup ? [column] : [])\n            .concat(leafColumns([column]));\n        this.changes.emit({\n            columns: columns,\n            locked: isLocked(this.column),\n            type: 'start'\n        });\n    };\n    ColumnResizingService.prototype.resizeColumns = function (deltaPercent) {\n        var action = resizeArgs(this.column, {\n            deltaPercent: deltaPercent,\n            type: 'resizeColumn'\n        });\n        this.changes.emit(action);\n    };\n    ColumnResizingService.prototype.resizeTable = function (delta) {\n        var action = resizeArgs(this.column, {\n            delta: delta,\n            type: 'resizeTable'\n        });\n        this.changes.emit(action);\n    };\n    ColumnResizingService.prototype.resizedColumn = function (state) {\n        this.resizedColumns.push(state);\n    };\n    ColumnResizingService.prototype.end = function () {\n        this.changes.emit({\n            columns: [],\n            resizedColumns: this.resizedColumns,\n            type: 'end'\n        });\n    };\n    ColumnResizingService.prototype.registerTable = function (fn) {\n        var _this = this;\n        this.tables.push(fn);\n        return function () {\n            _this.tables.splice(_this.tables.indexOf(fn), 1);\n        };\n    };\n    ColumnResizingService.prototype.measureColumns = function (info) {\n        var _this = this;\n        var observables = this.tables.map(function (fn) { return fn(info); });\n        zip.apply(void 0, observables).pipe(take(1))\n            .subscribe(function (widths) {\n            _this.changes.emit({\n                columns: info.map(function (i) { return i.column; }),\n                type: 'autoFitComplete',\n                widths: widths\n            });\n            if (!_this.muteEndNotification) {\n                _this.end();\n            }\n            _this.muteEndNotification = false;\n        });\n    };\n    ColumnResizingService.prototype.autoFit = function (column) {\n        this.muteEndNotification = true;\n        this.start(column);\n        this.changes.emit({\n            columns: [column],\n            type: 'triggerAutoFit'\n        });\n    };\n    ColumnResizingService.prototype.trackColumns = function (column) {\n        this.resizedColumns = [];\n        this.column = column;\n    };\n    return ColumnResizingService;\n}());\nexport { ColumnResizingService };\n",null]}