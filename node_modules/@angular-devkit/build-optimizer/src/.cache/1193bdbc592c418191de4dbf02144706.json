{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/view-list.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/view-list.component.js","mtime":1529128638660},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:component-selector-name  component-selector-type */\nimport { Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, HostBinding, Input, Output, ViewChild } from '@angular/core';\n//import { cloneDate, firstDayOfMonth } from '@progress/kendo-date-math';\nimport { cloneDate } from '@progress/kendo-date-math';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { VirtualizationComponent } from '../virtualization/virtualization.component';\nimport { BusViewService } from './services/bus-view.service';\nimport { DOMService } from './services/dom.service';\nimport { CalendarViewEnum } from './models/view.enum';\nimport { MIN_DATE, MAX_DATE } from '../defaults';\nimport { dateInRange, hasChange, shiftWeekNames } from '../util';\nvar VIEWS_COUNT = 5;\nvar isEqualMonthYear = function (date1, date2) {\n    return (date1 && date2 &&\n        date1.getFullYear() === date2.getFullYear() &&\n        date1.getMonth() === date2.getMonth());\n};\n/**\n * @hidden\n */\nvar ViewListComponent = /*@__PURE__*/ (function () {\n    function ViewListComponent(bus, cdr, intl, dom) {\n        this.bus = bus;\n        this.cdr = cdr;\n        this.intl = intl;\n        this.dom = dom;\n        this.isActive = true;\n        this.min = new Date(MIN_DATE);\n        this.max = new Date(MAX_DATE);\n        this.activeDateChange = new EventEmitter();\n        this.valueChange = new EventEmitter();\n        this.dates = [];\n        this.cols = [];\n        this.weekNames = [];\n        this.take = VIEWS_COUNT;\n        this.animateToIndex = true;\n        this.indexToScroll = -1;\n        this.minViewsToRender = 1;\n    }\n    Object.defineProperty(ViewListComponent.prototype, \"weekNumber\", {\n        get: function () {\n            return this.showWeekNumbers && this.isMonthView();\n        },\n        set: function (showWeekNumbers) {\n            this.showWeekNumbers = showWeekNumbers;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentMonthClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.month;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentYearClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.year;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentDecadeClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.decade;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewListComponent.prototype, \"getComponentCenturyClass\", {\n        get: function () {\n            return this.activeView === CalendarViewEnum.century;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewListComponent.prototype.ngOnInit = function () {\n        this.weekNames = this.getWeekNames();\n        this.bottomOffset = this.getBottomOffset();\n        this.viewOffset = -1 * this.dom.headerHeight;\n        this.viewHeight = this.dom.viewHeight(this.activeView);\n        this.intlSubscription = this.intl.changes.subscribe(this.intlChange.bind(this));\n    };\n    ViewListComponent.prototype.ngOnChanges = function (changes) {\n        this.service = this.bus.service(this.activeView);\n        if (!this.service) {\n            return;\n        }\n        this.cols = new Array(this.service.rowLength(this.weekNumber)).fill('');\n        this.weekNames = hasChange(changes, 'weekNumber') && this.weekNumber ? this.getWeekNames() : this.weekNames;\n        var activeViewChanged = hasChange(changes, 'activeView');\n        var focusedDate = this.focusedDate;\n        var viewDate = dateInRange(this.service.viewDate(focusedDate, this.max, this.minViewsToRender), this.min, this.max);\n        var total = this.service.total(this.min, this.max);\n        var totalChanged = this.total && this.total !== total;\n        var generateDates = totalChanged || !this.service.isInArray(focusedDate, this.dates);\n        this.skip = this.service.skip(viewDate, this.min);\n        this.total = total;\n        this.animateToIndex = !activeViewChanged;\n        this.bottomOffset = this.getBottomOffset();\n        this.viewHeight = this.dom.viewHeight(this.activeView);\n        if (generateDates) {\n            this.dates = this.service.datesList(viewDate, this.getTake(this.skip));\n        }\n        if (!isEqualMonthYear(this.activeDate, focusedDate)) {\n            this.activeDate = cloneDate(focusedDate);\n        }\n        var updateIndex = hasChange(changes, 'focusedDate') || activeViewChanged;\n        if (generateDates || updateIndex || this.virtualization.isIndexVisible(this.skip)) {\n            this.indexToScroll = this.service.skip(focusedDate, this.min);\n        }\n    };\n    ViewListComponent.prototype.ngOnDestroy = function () {\n        if (this.intlSubscription) {\n            this.intlSubscription.unsubscribe();\n        }\n    };\n    ViewListComponent.prototype.ngAfterViewInit = function () {\n        if (this.indexToScroll === -1) {\n            return;\n        }\n        this.virtualization.scrollToIndex(this.indexToScroll);\n        this.indexToScroll = -1;\n    };\n    ViewListComponent.prototype.ngAfterViewChecked = function () {\n        if (this.indexToScroll === -1) {\n            return;\n        }\n        this.virtualization[this.animateToIndex ? 'animateToIndex' : 'scrollToIndex'](this.indexToScroll);\n        this.animateToIndex = true;\n        this.indexToScroll = -1;\n    };\n    ViewListComponent.prototype.pageChange = function (_a) {\n        var skip = _a.skip;\n        this.dates = this.service.datesList(this.service.addToDate(this.min, skip), this.getTake(skip));\n    };\n    ViewListComponent.prototype.scrollChange = function (_a) {\n        var offset = _a.offset;\n        var translate = \"translateY(\" + offset + \"px)\";\n        this.style = { transform: translate, '-ms-transform': translate };\n    };\n    ViewListComponent.prototype.setActiveDate = function (index) {\n        this.activeDate = this.service.addToDate(this.min, index);\n        this.activeDateChange.emit(this.activeDate);\n        this.cdr.detectChanges();\n    };\n    ViewListComponent.prototype.handleDateChange = function (candidate) {\n        this.valueChange.emit(candidate);\n    };\n    ViewListComponent.prototype.isMonthView = function () {\n        return this.activeView === CalendarViewEnum.month;\n    };\n    ViewListComponent.prototype.isScrolled = function () {\n        return this.virtualization.isListScrolled(this.service.skip(this.focusedDate, this.min));\n    };\n    ViewListComponent.prototype.getBottomOffset = function () {\n        return this.getScrollableHeight() - this.dom.viewHeight(this.activeView);\n    };\n    ViewListComponent.prototype.getScrollableHeight = function () {\n        return this.activeView === CalendarViewEnum.month ?\n            this.dom.scrollableContentHeight :\n            this.dom.scrollableYearContentHeight;\n    };\n    ViewListComponent.prototype.getTake = function (skip) {\n        return Math.min(this.total - skip, this.take);\n    };\n    ViewListComponent.prototype.getWeekNames = function () {\n        var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: 'short', type: 'days' }), this.intl.firstDay());\n        return this.weekNumber ? [''].concat(weekNames) : weekNames;\n    };\n    ViewListComponent.prototype.intlChange = function () {\n        this.weekNames = this.getWeekNames();\n        if (this.isMonthView()) {\n            this.cdr.markForCheck();\n        }\n    };\n    return ViewListComponent;\n}());\nexport { ViewListComponent };\n",null]}