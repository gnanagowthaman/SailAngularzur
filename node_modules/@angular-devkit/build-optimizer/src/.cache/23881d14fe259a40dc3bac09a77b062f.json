{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/focusable.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/focusable.directive.js","mtime":1529128658208},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, Inject, Optional, Renderer2 } from '@angular/core';\nimport { CELL_CONTEXT } from '../rendering/common/cell-context';\nimport { closest, findFocusable, isVisible, matchesNodeName } from '../rendering/common/dom-queries';\nvar isButton = matchesNodeName('button');\nvar isInputTag = matchesNodeName('input');\nvar navigableRegex = /(button|checkbox|color|file|radio|reset|submit)/i;\nvar isNavigableInput = function (element) { return isInputTag(element) && navigableRegex.test(element.type); };\nvar isNavigable = function (element) { return !element.disabled && (isButton(element) || isNavigableInput(element)); };\n/**\n * A directive that controls the way focusable elements receive\n * [focus in a navigable Grid]({% slug keyboard_navigation_grid %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *    selector: 'my-app',\n *    template: `\n *      <input type=\"text\" placeholder=\"Tab stop #0\" />\n *      <kendo-grid [data]=\"data\" [navigable]=\"true\">\n *          <kendo-grid-column field=\"ProductID\" title=\"Product ID\" width=\"40\">\n *          </kendo-grid-column>\n *          <kendo-grid-column field=\"ProductName\" title=\"Product Name\" width=\"100\">\n *          </kendo-grid-column>\n *          <kendo-grid-column>\n *              <ng-template kendoGridCellTemplate let-dataItem>\n *                  <!-- The first focusable element will be focused when pressing Enter on the cell -->\n *                  <input type=\"text\" kendoGridFocusable [value]=\"dataItem.ProductName\" />\n *                  <input type=\"button\" kendoGridFocusable value=\"Update\" />\n *              </ng-template>\n *          </kendo-grid-column>\n *          <kendo-grid-column width=\"80\">\n *              <ng-template kendoGridCellTemplate>\n *                  <!-- A single focusable element will be focused during navigation -->\n *                  <input type=\"button\" kendoGridFocusable value=\"Delete\" />\n *              </ng-template>\n *          </kendo-grid-column>\n *      </kendo-grid>\n *      <input type=\"text\" placeholder=\"Tab stop #2\" />\n *    `\n * })\n *\n * class AppComponent {\n *     public readonly data: any = [{\n *         \"ProductID\": 1,\n *         \"ProductName\": \"Chai\",\n *         \"UnitPrice\": 18.0000,\n *         \"Discontinued\": true\n *     }, {\n *         \"ProductID\": 2,\n *         \"ProductName\": \"Chang\",\n *         \"UnitPrice\": 19.0000,\n *         \"Discontinued\": false\n *     }];\n * }\n * ```\n */\nvar FocusableDirective = /*@__PURE__*/ (function () {\n    function FocusableDirective(cellContext, hostElement, renderer) {\n        this.cellContext = cellContext;\n        this.hostElement = hostElement;\n        this.renderer = renderer;\n        this.active = true;\n        if (this.cellContext) {\n            this.group = this.cellContext.focusGroup;\n        }\n        if (this.group) {\n            this.group.registerElement(this);\n        }\n    }\n    Object.defineProperty(FocusableDirective.prototype, \"enabled\", {\n        get: function () {\n            return this.element && !this.element.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FocusableDirective.prototype, \"tabIndex\", {\n        get: function () {\n            return this.active ? '0' : '-1';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FocusableDirective.prototype, \"visible\", {\n        get: function () {\n            return this.element && isVisible(this.element);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FocusableDirective.prototype.ngAfterViewInit = function () {\n        this.element = findFocusable(this.hostElement.nativeElement, false) || this.hostElement.nativeElement;\n        this.updateState();\n    };\n    FocusableDirective.prototype.ngOnDestroy = function () {\n        if (this.group) {\n            this.group.unregisterElement(this);\n        }\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.updateState = function () {\n        if (!this.group) {\n            return;\n        }\n        var isActive = this.group.isActive;\n        if (this.element && isActive !== this.active) {\n            this.active = isActive;\n            this.renderer.setAttribute(this.element, 'tabIndex', this.tabIndex);\n        }\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.canFocus = function () {\n        return this.visible && this.enabled;\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.isNavigable = function () {\n        return this.canFocus() && isNavigable(this.element);\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.focus = function () {\n        if (this.element) {\n            this.element.focus();\n        }\n    };\n    /**\n     * @hidden\n     */\n    FocusableDirective.prototype.hasFocus = function () {\n        var el = this.hostElement.nativeElement;\n        return document.activeElement !== el && closest(document.activeElement, function (e) { return e === el; });\n    };\n    return FocusableDirective;\n}());\nexport { FocusableDirective };\n",null]}