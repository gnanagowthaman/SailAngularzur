{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/timepicker.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/timepicker/timepicker.component.js","mtime":1529128645667},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ChangeDetectorRef, ChangeDetectionStrategy, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, NgZone, ViewChild, ViewContainerRef, Inject, Optional, Renderer2, forwardRef, isDevMode } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { cloneDate } from '@progress/kendo-date-math';\nimport { MIDNIGHT_DATE, MIN_TIME, MAX_TIME } from '../defaults';\nimport { PreventableEvent } from '../preventable-event';\nimport { guid, noop, setTime } from '../util';\nimport { timeRangeValidator } from '../validators/time-range.validator';\nimport { TOUCH_ENABLED } from '../touch-enabled';\nvar VALUE_DOC_LINK = 'https://www.telerik.com/kendo-angular-ui/components/dateinputs/timepicker/#toc-integration-with-json';\n/**\n * Represents the Kendo UI TimePicker component for Angular.\n */\nvar TimePickerComponent = /*@__PURE__*/ (function () {\n    function TimePickerComponent(zone, localization, cdr, popupService, element, renderer, touchEnabled) {\n        this.zone = zone;\n        this.localization = localization;\n        this.cdr = cdr;\n        this.popupService = popupService;\n        this.element = element;\n        this.renderer = renderer;\n        this.touchEnabled = touchEnabled;\n        /**\n         * @hidden\n         */\n        this.id = guid();\n        /**\n         * Sets or gets the `disabled` property of the TimePicker and\n         * determines whether the component is active\n         * (see the [basic usage example]({% slug disabled_timepicker %})).\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the TimePicker\n         * (see the [basic usage example]({% slug readonly_timepicker %})).\n         */\n        this.readonly = false;\n        /**\n         * Specifies the time format that is used to display the input value\n         * (see the [basic usage example]({% slug formats_timepicker %})).\n         */\n        this.format = 't';\n        /**\n         * Specifies the hint the TimePicker displays when its value is `null`.\n         * For more information, refer to the article on\n         * [placeholders]({% slug placeholders_timepicker %}).\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker placeholder=\"Enter start...\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent { }\n         * ```\n         */\n        this.placeholder = \"\";\n        /**\n         * Determines whether to display the **Cancel** button in the popup.\n         */\n        this.cancelButton = true;\n        /**\n         * Determines whether to display the **Now** button in the popup.\n         *\n         * > If the current time is out of range or the incremental step is greater than `1`, the **Now** button will be hidden.\n         */\n        this.nowButton = true;\n        /**\n         * Sets or gets the `tabindex` property of the TimePicker.\n         */\n        this.tabindex = 0;\n        /**\n         * Sets the title of the input element of the TimePicker.\n         */\n        this.title = \"\";\n        /**\n         * Determines whether the built-in min or max validators are enforced when a form is being validated.\n         */\n        this.rangeValidation = true;\n        /**\n         * Fires each time the user selects a new value.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the input element.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker (focus)=\"handleFocus()\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log(\"Component is focused\");\n         *   }\n         * }\n         * ```\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the input element gets blurred.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker (blur)=\"handleBlur()\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log(\"Component is blurred\");\n         *   }\n         * }\n         * ```\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel the event, the popup will remain closed.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel the event, the popup will remain open.\n         * For more information, refer to the section on\n         * [events]({% slug overview_timepicker %}#toc-events).\n         */\n        this.close = new EventEmitter();\n        this.isActive = false;\n        this.popupUID = guid();\n        this.onChange = noop;\n        this.onTouched = noop;\n        this.resolvedPromise = Promise.resolve(null);\n        this.timeRangeValidateFn = noop;\n        this._min = cloneDate(MIN_TIME);\n        this._max = cloneDate(MAX_TIME);\n        this._popupSettings = { animate: true };\n        this._show = false;\n        this._steps = {};\n        this._value = null;\n    }\n    Object.defineProperty(TimePickerComponent.prototype, \"min\", {\n        get: function () {\n            return this._min;\n        },\n        /**\n         * Specifies the smallest valid time value\n         * (see the [basic usage example]({% slug timeranges_timepicker %})).\n         */\n        set: function (min) {\n            this._min = cloneDate(min || MIN_TIME);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"max\", {\n        get: function () {\n            return this._max;\n        },\n        /**\n         * Specifies the biggest valid time value\n         * (see the [basic usage example]({% slug timeranges_timepicker %})).\n         */\n        set: function (max) {\n            this._max = cloneDate(max || MAX_TIME);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"steps\", {\n        get: function () {\n            return this._steps;\n        },\n        /**\n         * Configures the incremental steps of the TimePicker.\n         * For more information, refer to the article on\n         * [incremental steps]({% slug incrementalsteps_timepicker %}).\n         *\n         * > If the incremental step is greater than `1`, the **Now** button will be hidden.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-timepicker format=\"HH:mm:ss\" [steps]=\"steps\"></kendo-timepicker>\n         * `\n         * })\n         * class AppComponent {\n         *   public steps = { hour: 2, minute: 15, second: 15 };\n         * }\n         * ```\n         *\n         */\n        set: function (steps) {\n            this._steps = steps || {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the TimePicker.\n         *\n         * The available options are:\n         * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.\n         * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.\n         */\n        set: function (settings) {\n            this._popupSettings = Object.assign({}, { animate: true }, settings);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the TimePicker component.\n         */\n        set: function (value) {\n            this.verifyValue(value);\n            this._value = cloneDate(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"show\", {\n        get: function () {\n            return this._show;\n        },\n        set: function (show) {\n            if (show && (this.disabled || this.readonly)) {\n                return;\n            }\n            var event = new PreventableEvent();\n            if (!this._show && show) {\n                this.open.emit(event);\n            }\n            else if (this._show && !show) {\n                this.close.emit(event);\n            }\n            if (event.isDefaultPrevented()) {\n                return;\n            }\n            this._toggle(show);\n            this.toggleFocus();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.wrapperClasses = function () {\n        return true;\n    };\n    Object.defineProperty(TimePickerComponent.prototype, \"disabledClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleKeydown = function (event) {\n        var altKey = event.altKey, keyCode = event.keyCode;\n        if (keyCode === 27) {\n            this.show = false;\n            return;\n        }\n        if (altKey) {\n            if (keyCode === 38) {\n                this.show = false;\n            }\n            if (keyCode === 40 && !this.show) {\n                this.show = true;\n            }\n        }\n    };\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty\n     */\n    TimePickerComponent.prototype.isEmpty = function () {\n        return this.input.isEmpty();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.renderer.removeAttribute(this.element.nativeElement, 'tabindex');\n        this.localizationChangeSubscription = this.localization\n            .changes.subscribe(function () { return _this.cdr.markForCheck(); });\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.min || changes.max) {\n            this.timeRangeValidateFn = this.rangeValidation ? timeRangeValidator(this.min, this.max) : noop;\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.ngOnDestroy = function () {\n        clearTimeout(this.nextTickId);\n        this.isActive = false;\n        this.show = false;\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.writeValue = function (value) {\n        this.verifyValue(value);\n        this.value = cloneDate(value);\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.validate = function (control) {\n        return this.timeRangeValidateFn(control);\n    };\n    /**\n     * Focuses the TimePicker component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"timepicker.focus()\">Focus time picker</button>\n     *  <kendo-timepicker #timepicker></kendo-timepicker>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TimePickerComponent.prototype.focus = function () {\n        this.input.focus();\n    };\n    /**\n     * Blurs the TimePicker component.\n     */\n    TimePickerComponent.prototype.blur = function () {\n        (this.timeSelector || this.input)['blur'](); //tslint:disable-line:no-string-literal\n    };\n    /**\n     * Toggles the visibility of the popup. If you use the `toggle` method to show or hide the popup,\n     * the `open` and `close` events do not fire.\n     *\n     * @param show - The state of the popup.\n     */\n    TimePickerComponent.prototype.toggle = function (show) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.resolvedPromise.then(function () {\n            _this._toggle((show === undefined) ? !_this.show : show);\n        });\n    };\n    Object.defineProperty(TimePickerComponent.prototype, \"isOpen\", {\n        /**\n         * Returns the current open state of the popup.\n         */\n        get: function () {\n            return this.show;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TimePickerComponent.prototype, \"appendTo\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var appendTo = this.popupSettings.appendTo;\n            if (!appendTo || appendTo === 'root') {\n                return undefined;\n            }\n            return appendTo === 'component' ? this.container : appendTo;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleChange = function (value) {\n        this.value = cloneDate(value);\n        this.focusInput();\n        this.show = false;\n        this.onChange(cloneDate(value));\n        this.valueChange.emit(cloneDate(value));\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleInputChange = function (value) {\n        var val = this.input.formatSections.date ? value : this.mergeTime(value);\n        this.handleChange(val);\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleFocus = function () {\n        var _this = this;\n        if (this.isActive) {\n            return;\n        }\n        this.isActive = true;\n        this.nextTick(function () {\n            if (!_this.hasActiveComponent()) {\n                return;\n            }\n            _this.onFocus.emit();\n        });\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleBlur = function () {\n        var _this = this;\n        this.nextTick(function () {\n            if (_this.hasActiveComponent()) {\n                return;\n            }\n            _this.isActive = false; // order is important ¯\\_(ツ)_/¯\n            _this.show = false;\n            _this.cdr.detectChanges();\n            _this.onTouched();\n            _this.onBlur.emit();\n        });\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.handleIconClick = function () {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.focusInput();\n        //XXX: explicit call handleFocus handler here\n        //due to async IE focus event\n        this.handleFocus();\n        this.show = !this.show;\n    };\n    Object.defineProperty(TimePickerComponent.prototype, \"popupClasses\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return [\n                'k-group',\n                'k-reset'\n            ].concat(this.popupSettings.popupClass || []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.normalizeTime = function (date) {\n        return setTime(MIDNIGHT_DATE, date);\n    };\n    /**\n     * @hidden\n     */\n    TimePickerComponent.prototype.mergeTime = function (value) {\n        return this.value && value ? setTime(this.value, value) : value;\n    };\n    TimePickerComponent.prototype._toggle = function (show) {\n        var _this = this;\n        this._show = show;\n        this.cdr.markForCheck();\n        if (this.popupRef) {\n            this.popupRef.close();\n            this.popupRef = null;\n        }\n        if (this._show) {\n            var direction = this.localization.rtl ? 'right' : 'left';\n            this.popupRef = this.popupService.open({\n                anchor: this.wrapper,\n                anchorAlign: { vertical: 'bottom', horizontal: direction },\n                animate: this.popupSettings.animate,\n                appendTo: this.appendTo,\n                content: this.popupTemplate,\n                popupAlign: { vertical: 'top', horizontal: direction },\n                popupClass: this.popupClasses,\n                positionMode: 'absolute'\n            });\n            this.popupRef.popupElement.setAttribute('id', this.popupUID);\n            this.popupRef.popupAnchorViewportLeave.subscribe(function () { return _this.show = false; });\n        }\n    };\n    TimePickerComponent.prototype.focusInput = function () {\n        if (this.touchEnabled) {\n            return;\n        }\n        this.input.focus();\n    };\n    TimePickerComponent.prototype.toggleFocus = function () {\n        if (!this.isActive || this.touchEnabled) {\n            return;\n        }\n        if (this.show) {\n            if (!this.timeSelector) {\n                this.cdr.detectChanges();\n            }\n            if (this.isActive) {\n                this.timeSelector.focus();\n            }\n        }\n        else {\n            this.input.focus();\n        }\n    };\n    TimePickerComponent.prototype.hasActiveComponent = function () {\n        return this.input.isActive || (this.timeSelector && this.timeSelector.isActive);\n    };\n    TimePickerComponent.prototype.verifyValue = function (value) {\n        if (!isDevMode()) {\n            return;\n        }\n        if (value && !(value instanceof Date)) {\n            throw new Error(\"The 'value' should be a valid JavaScript Date instance. Check \" + VALUE_DOC_LINK + \" for possible resolution.\");\n        }\n    };\n    TimePickerComponent.prototype.nextTick = function (f) {\n        var _this = this;\n        //XXX: use setTimeout due to async focus/blur events in IE\n        //XXX: run the callback in the zone to give template updates for the parent component\n        this.zone.runOutsideAngular(function () {\n            _this.nextTickId = setTimeout(function () { return _this.zone.run(function () { return f(); }); });\n        });\n    };\n    return TimePickerComponent;\n}());\nexport { TimePickerComponent };\n",null]}