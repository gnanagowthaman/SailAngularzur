{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/maskedtextbox/parsing/parsers.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-inputs/dist/es/maskedtextbox/parsing/parsers.js","mtime":1529128637820},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Result, ResultType } from './result';\nimport { Stream } from './stream';\nvar toArray = function (value) { return (value || '').split(''); };\nvar ESCAPE_CHARACTER = '\\\\';\n/**\n * @hidden\n */\nvar Parser = /*@__PURE__*/ (function () {\n    function Parser(parse) {\n        this.parse = parse;\n    }\n    Parser.prototype.run = function (input, control) {\n        if (control === void 0) {\n            control = '';\n        }\n        if (input instanceof Stream) {\n            return this.parse(input);\n        }\n        else {\n            return this.parse(new Stream(toArray(input), toArray(control)));\n        }\n    };\n    //map :: Functor f => f a ~> (a -> b) -> f b\n    Parser.prototype.map = function (f) {\n        var _this = this;\n        return new Parser(function (stream) { return _this.parse(stream).map(f); });\n    };\n    //chain :: Chain m => m a ~> (a -> m b) -> m b\n    Parser.prototype.chain = function (f) {\n        var _this = this;\n        return new Parser(function (stream) { return _this.parse(stream).chain(function (v, s) { return f(v).run(s); }); });\n    };\n    Parser.prototype.isLiteral = function (c) {\n        return this.run(c).type === ResultType.Literal;\n    };\n    return Parser;\n}());\nexport { Parser };\n/**\n * @hidden\n */\nexport var mask = function (_a) {\n    var prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;\n    return function (rule) {\n        return new Parser(function (stream) {\n            while (!stream.eof()) {\n                var _a = stream.peek(), char = _a.char, control = _a.control;\n                if (char === control && control === prompt) {\n                    stream.eat();\n                    return new Result(prompt, stream, ResultType.Mask);\n                }\n                if (rule.test(char)) {\n                    stream.eat();\n                    return new Result(char, stream, ResultType.Mask);\n                }\n                if (char === promptPlaceholder) {\n                    stream.eat();\n                    return new Result(prompt, stream, ResultType.Mask);\n                }\n                stream.eat_input();\n            }\n            stream.eat();\n            return new Result(prompt, stream, ResultType.Mask);\n        });\n    };\n};\n/**\n * @hidden\n */\nexport var literal = function (_token) {\n    return new Parser(function (stream) {\n        //    let {char, control} = stream.peek();\n        var char = stream.peek().char;\n        if (char === _token) {\n            stream.eat();\n            return new Result(_token, stream, ResultType.Literal);\n        }\n        //    if (control === _token) {\n        //        while (!stream.eof() && char !== _token) {\n        //            stream.eat_input();\n        //            char = stream.peek().char;\n        //        }\n        //    }\n        //\n        //    if (control !== undefined) {\n        //        stream.eat();\n        //    }\n        return new Result(_token, stream, ResultType.Literal);\n    });\n};\n/**\n * @hidden\n */\nexport var unmask = function (prompt) {\n    return function (rule) {\n        return new Parser(function (stream) {\n            while (!stream.eof()) {\n                var _a = stream.peek(), char = _a.char, control = _a.control;\n                if (char === prompt && control === prompt) {\n                    stream.eat();\n                    return new Result(char, stream);\n                }\n                if (rule.test(char)) {\n                    stream.eat();\n                    return new Result(char, stream);\n                }\n                stream.eat_input();\n            }\n            stream.eat();\n            return new Result('', stream);\n        });\n    };\n};\n/**\n * @hidden\n */\nexport var unliteral = function (_token) {\n    return new Parser(function (stream) {\n        if (stream.eof()) {\n            return new Result('', stream);\n        }\n        var char = stream.peek().char;\n        if (char === _token) {\n            stream.eat();\n        }\n        return new Result(_token, stream);\n    });\n};\n/**\n * @hidden\n */\nexport var token = function (rules, creator) {\n    return new Parser(function (stream) {\n        var char = stream.next().char;\n        var rule = rules[char];\n        if (char === ESCAPE_CHARACTER) {\n            char = stream.next().char;\n            return new Result(creator.literal(char), stream);\n        }\n        if (!rule) {\n            return new Result(creator.literal(char), stream);\n        }\n        return new Result(creator.mask(rule), stream);\n    });\n};\n/**\n * @hidden\n */\nexport var rawMask = function (_a) {\n    var prompt = _a.prompt, promptPlaceholder = _a.promptPlaceholder;\n    return new Parser(function (stream) {\n        var char = stream.next().char;\n        if (char === prompt) {\n            return new Result(promptPlaceholder, stream);\n        }\n        return new Result(char, stream);\n    });\n};\n/**\n * @hidden\n */\nexport var rawLiteral = function (includeLiterals) {\n    return new Parser(function (stream) {\n        var char = stream.next().char;\n        if (includeLiterals) {\n            return new Result(char, stream);\n        }\n        return new Result('', stream);\n    });\n};\n",null]}