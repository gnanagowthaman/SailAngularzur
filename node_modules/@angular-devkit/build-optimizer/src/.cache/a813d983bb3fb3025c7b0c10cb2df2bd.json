{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/scrolling/scroll-sync.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/scrolling/scroll-sync.service.js","mtime":1529128667083},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, NgZone } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';\nimport { filter } from 'rxjs/operators/filter';\nimport { map } from 'rxjs/operators/map';\nimport { tap } from 'rxjs/operators/tap';\n/**\n * @hidden\n */\nvar ScrollSyncService = /*@__PURE__*/ (function () {\n    function ScrollSyncService(ngZone) {\n        this.ngZone = ngZone;\n        this.changes = new Subject();\n        this.elements = [];\n        this.changeSubscription = new Subscription(function () { });\n        this.headerSubscription = new Subscription(function () { });\n        this.bodySubscription = new Subscription(function () { });\n        this.changeSubscription.add(this.changes.pipe(distinctUntilChanged(function (x, y) { return x.scrollLeft === y.scrollLeft; }))\n            .subscribe(this.scrollLeft.bind(this)));\n    }\n    ScrollSyncService.prototype.registerEmitter = function (el, sourceType) {\n        var _this = this;\n        this.unregister(sourceType);\n        this.elements.push({ element: el, sourceType: sourceType });\n        if (sourceType === \"body\" || sourceType === \"header\") {\n            this.ngZone.runOutsideAngular(function () {\n                var obs = fromEvent(el, \"scroll\").pipe(map(function (_a) {\n                    var _b = _a.target, scrollLeft = _b.scrollLeft, scrollRight = _b.scrollRight;\n                    return ({\n                        scrollLeft: scrollLeft,\n                        scrollRight: scrollRight,\n                        sourceType: sourceType\n                    });\n                }));\n                var subscription = obs.pipe(filter(function (x) { return !_this.source || _this.source === x.sourceType; }), tap(function (x) { return _this.source = x.sourceType; }))\n                    .subscribe(function (x) { return _this.changes.next(x); });\n                subscription.add(obs.pipe(filter(function (x) { return _this.source && _this.source !== x.sourceType; }))\n                    .subscribe(function () { return _this.source = undefined; }));\n                if (sourceType === \"body\") {\n                    _this.bodySubscription.add(subscription);\n                }\n                else {\n                    _this.headerSubscription.add(subscription);\n                }\n            });\n        }\n    };\n    /**\n     * destroy\n     */\n    ScrollSyncService.prototype.destroy = function () {\n        this.changeSubscription.unsubscribe();\n        this.headerSubscription.unsubscribe();\n        this.bodySubscription.unsubscribe();\n    };\n    ScrollSyncService.prototype.scrollLeft = function (_a) {\n        var _this = this;\n        var scrollLeft = _a.scrollLeft, sourceType = _a.sourceType;\n        this.ngZone.runOutsideAngular(function () {\n            _this.elements\n                .filter(function (x) { return sourceType !== x.sourceType; })\n                .forEach(function (_a) {\n                var element = _a.element;\n                return element.scrollLeft = scrollLeft;\n            });\n        });\n    };\n    ScrollSyncService.prototype.unregister = function (sourceType) {\n        var index = this.elements.findIndex(function (x) { return x.sourceType === sourceType; });\n        if (index > -1) {\n            if (sourceType === \"header\") {\n                this.headerSubscription.unsubscribe();\n            }\n            else if (sourceType === \"body\") {\n                this.bodySubscription.unsubscribe();\n            }\n            this.elements.splice(index, 1);\n        }\n    };\n    return ScrollSyncService;\n}());\nexport { ScrollSyncService };\n",null]}