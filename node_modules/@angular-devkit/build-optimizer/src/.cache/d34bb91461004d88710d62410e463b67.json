{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selection.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selection.service.js","mtime":1529128667419},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter } from '@angular/core';\nimport { iterator } from 'rxjs/symbol/iterator';\nimport { isPresent } from '../utils';\nimport { DomEventsService } from '../common/dom-events.service';\nimport { LocalDataChangesService } from '../editing/local-data-changes.service';\n/**\n * @hidden\n */\nvar SelectionService = /*@__PURE__*/ (function () {\n    function SelectionService(domEvents, localDataChangesService) {\n        var _this = this;\n        this.changes = new EventEmitter();\n        this.lastSelectionStartIndex = 0;\n        this.currentSelection = [];\n        this.selectAllChecked = false;\n        this.cellClickSubscription = domEvents.cellClick.subscribe(function (args) {\n            if (_this.options.enabled && !_this.options.checkboxOnly && args.type !== 'contextmenu') {\n                _this.handleClick({ index: args.rowIndex, data: args.dataItem }, args.originalEvent);\n            }\n        });\n        this.mousedownSubscription = domEvents.cellMousedown.subscribe(function (args) {\n            if (_this.options.enabled && (!_this.options.mode || _this.options.mode === \"multiple\") &&\n                !_this.options.checkboxOnly && args.originalEvent.shiftKey) {\n                args.originalEvent.preventDefault();\n            }\n        });\n        if (localDataChangesService) {\n            this.dataChangedSubscription = localDataChangesService.changes.subscribe(function (args) {\n                if (isPresent(args.action) && args.action === 'remove') {\n                    _this.deselect(args.item);\n                }\n            });\n        }\n    }\n    SelectionService.prototype.init = function (settings) {\n        this.settings = settings;\n        this.currentSelection = [];\n        if (settings.selectable && settings.selectable.enabled !== false) {\n            var iterator_1 = this.getIterator();\n            this._selectAllState = true;\n            while (true) {\n                var item = iterator_1.next();\n                if (item.done) {\n                    break;\n                }\n                if (item.value && item.value.type === \"data\") {\n                    var rowArgs = {\n                        dataItem: item.value.data,\n                        index: item.value.index\n                    };\n                    if (settings.rowSelected(rowArgs)) {\n                        this.currentSelection[item.value.index] = rowArgs;\n                    }\n                    else {\n                        this._selectAllState = undefined;\n                    }\n                }\n            }\n            if (this.currentSelection.length === 0) {\n                this._selectAllState = false;\n            }\n        }\n    };\n    SelectionService.prototype.isSelected = function (index) {\n        return this.options.enabled && isPresent(this.currentSelection[index]);\n    };\n    SelectionService.prototype.handleClick = function (item, event) {\n        var ev;\n        var ctrlKey = event.ctrlKey || event.metaKey;\n        if (this.options.mode === \"single\" && ctrlKey && this.isSelected(item.index)) {\n            ev = this.toggle(item);\n        }\n        else if (this.options.mode === \"multiple\") {\n            if (ctrlKey && !event.shiftKey) {\n                ev = this.toggle(item);\n            }\n            else if (event.shiftKey) {\n                ev = this.addAllTo(item, ctrlKey);\n            }\n        }\n        if (!isPresent(ev)) {\n            ev = this.select(item);\n            this.currentSelection[item.index] = {\n                dataItem: item.data,\n                index: item.index\n            };\n        }\n        if (!ev.selectedRows.length && !ev.deselectedRows.length) {\n            return;\n        }\n        ev.ctrlKey = event.ctrlKey || event.metaKey;\n        ev.shiftKey = event.shiftKey;\n        this.setDeprecatedEventProperties(ev);\n        this.changes.emit(ev);\n    };\n    SelectionService.prototype.toggle = function (item) {\n        var selectedRows = [];\n        var deselectedRows = [];\n        this.lastSelectionStartIndex = item.index;\n        if (this.isSelected(item.index)) {\n            deselectedRows.push({ dataItem: item.data, index: item.index });\n        }\n        else {\n            selectedRows.push({ dataItem: item.data, index: item.index });\n        }\n        return {\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows\n        };\n    };\n    SelectionService.prototype.toggleByIndex = function (index) {\n        var iterator = this.getIterator();\n        if (this.selectAllChecked && this.isSelected(index)) {\n            this.selectAllChecked = false;\n        }\n        while (true) {\n            var item = iterator.next();\n            if (item.done) {\n                break;\n            }\n            if (item.value && item.value.type === \"data\" && item.value.index === index) {\n                var itemToToggle = {\n                    data: item.value.data,\n                    index: item.value.index\n                };\n                if (this.isSelected(index) || this.options.mode === \"multiple\") {\n                    return this.toggle(itemToToggle);\n                }\n                else {\n                    return this.select(itemToToggle);\n                }\n            }\n        }\n    };\n    SelectionService.prototype.select = function (item) {\n        var deselectedRows = [];\n        var selectedRows = [];\n        this.lastSelectionStartIndex = item.index;\n        if (!this.isSelected(item.index)) {\n            selectedRows.push({ dataItem: item.data, index: item.index });\n        }\n        this.currentSelection.forEach(function (row) {\n            if (row.index !== item.index) {\n                deselectedRows.push(row);\n            }\n        });\n        return {\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows\n        };\n    };\n    //Used to manually deselect removed items\n    SelectionService.prototype.deselect = function (removedItem) {\n        var iterator = this.getIterator();\n        while (true) {\n            var item = iterator.next();\n            if (item.done) {\n                break;\n            }\n            if (item.value && item.value.type === \"data\" && item.value.data === removedItem) {\n                var rowArgs = {\n                    dataItem: item.value.data,\n                    index: item.value.index\n                };\n                if (this.isSelected(rowArgs.index)) {\n                    var ev = {\n                        ctrlKey: false,\n                        deselectedRows: [rowArgs],\n                        selectedRows: []\n                    };\n                    this.setDeprecatedEventProperties(ev);\n                    this.changes.emit(ev);\n                }\n            }\n        }\n    };\n    SelectionService.prototype.addAllTo = function (item, ctrlKey) {\n        var selectedRows = [];\n        var deselectedRows = [];\n        var start = Math.min(this.lastSelectionStartIndex, item.index);\n        var end = Math.max(this.lastSelectionStartIndex, item.index);\n        var iterator = this.getIterator();\n        while (true) {\n            var next = iterator.next();\n            if (next.done) {\n                break;\n            }\n            if (next.value && next.value.type === \"data\") {\n                var idx = next.value.index;\n                if ((idx < start || idx > end) && this.isSelected(idx) && !ctrlKey) {\n                    deselectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n                if ((idx >= start && idx <= end) && !this.isSelected(idx)) {\n                    selectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n            }\n        }\n        return {\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows\n        };\n    };\n    SelectionService.prototype.updateAll = function (selectAllChecked) {\n        this.selectAllChecked = selectAllChecked;\n        var selectedRows = [];\n        var deselectedRows = [];\n        var iterator = this.getIterator();\n        while (true) {\n            var next = iterator.next();\n            if (next.done) {\n                break;\n            }\n            if (next.value && next.value.type === \"data\") {\n                var idx = next.value.index;\n                if (this.isSelected(idx) && !selectAllChecked) {\n                    deselectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n                if (!this.isSelected(idx) && selectAllChecked) {\n                    selectedRows.push({ dataItem: next.value.data, index: idx });\n                }\n            }\n        }\n        if (!selectedRows.length && !deselectedRows.length) {\n            return;\n        }\n        var ev = {\n            ctrlKey: true,\n            deselectedRows: deselectedRows,\n            selectedRows: selectedRows,\n            shiftKey: true\n        };\n        this.setDeprecatedEventProperties(ev);\n        this.changes.emit(ev);\n    };\n    Object.defineProperty(SelectionService.prototype, \"selectAllState\", {\n        get: function () {\n            return this._selectAllState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionService.prototype, \"selected\", {\n        get: function () {\n            return this.currentSelection.map(function (item) {\n                return item.index;\n            }).filter(function (n) { return typeof n === \"number\"; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelectionService.prototype, \"options\", {\n        get: function () {\n            var defaultOptions = {\n                checkboxOnly: false,\n                enabled: true,\n                mode: \"multiple\"\n            };\n            if (!isPresent(this.settings)) {\n                return defaultOptions;\n            }\n            if (typeof this.settings.selectable === 'boolean') {\n                return {\n                    checkboxOnly: false,\n                    enabled: this.settings.selectable,\n                    mode: \"multiple\"\n                };\n            }\n            else {\n                return Object.assign(defaultOptions, this.settings.selectable);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectionService.prototype.ngOnDestroy = function () {\n        if (this.cellClickSubscription) {\n            this.cellClickSubscription.unsubscribe();\n            this.cellClickSubscription = null;\n        }\n        if (this.mousedownSubscription) {\n            this.mousedownSubscription.unsubscribe();\n            this.mousedownSubscription = null;\n        }\n        if (this.dataChangedSubscription) {\n            this.dataChangedSubscription.unsubscribe();\n            this.dataChangedSubscription = null;\n        }\n    };\n    SelectionService.prototype.getIterator = function () {\n        var accessor = this.settings.view.accessor();\n        if (!accessor) {\n            return;\n        }\n        return accessor[iterator]();\n    };\n    SelectionService.prototype.setDeprecatedEventProperties = function (ev) {\n        if (ev.selectedRows.length >= ev.deselectedRows.length) {\n            ev.selected = true;\n            ev.index = ev.selectedRows[ev.selectedRows.length - 1].index;\n        }\n        else {\n            ev.selected = false;\n            ev.index = ev.deselectedRows[ev.deselectedRows.length - 1].index;\n        }\n        return ev;\n    };\n    return SelectionService;\n}());\nexport { SelectionService };\n",null]}