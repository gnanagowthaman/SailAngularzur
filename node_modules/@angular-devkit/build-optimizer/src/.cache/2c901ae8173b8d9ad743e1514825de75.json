{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/column-resizing/table.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/column-resizing/table.directive.js","mtime":1529128638504},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectorRef, Directive, ElementRef, HostBinding, Input, NgZone, Renderer2 } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { resizableColumns } from '../columns/column-common';\nimport { ColumnResizingService } from './column-resizing.service';\nimport { filter } from 'rxjs/operators/filter';\nimport { tap } from 'rxjs/operators/tap';\nimport { map } from 'rxjs/operators/map';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { bufferCount } from 'rxjs/operators/bufferCount';\n/**\n * @hidden\n */\nvar columnsToResize = function (_a) {\n    var columns = _a.columns;\n    return Math.max(1, resizableColumns(columns).length - 1);\n};\n/**\n * @hidden\n */\nvar row = function (selector) { return function (element) { return element.querySelector(selector); }; };\n/**\n * @hidden\n */\nvar headerRow = function (index) { return function (element) { return element.querySelectorAll('thead>tr')[index]; }; };\n/**\n * @hidden\n */\nvar cell = function (index, selector) {\n    if (selector === void 0) {\n        selector = 'td';\n    }\n    return function (element) {\n        return element.querySelectorAll(selector + \":not(.k-group-cell):not(.k-hierarchy-cell)\")[index];\n    };\n};\n/**\n * @hidden\n */\nvar offsetWidth = function (element) { return element.offsetWidth; };\n/**\n * @hidden\n */\nvar pipe = function () {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return function (data) { return fns.reduce(function (state, fn) { return state ? fn(state) : 0; }, data); };\n};\n/**\n * @hidden\n */\nvar TableDirective = /*@__PURE__*/ (function () {\n    function TableDirective(element, renderer, service, zone, cdr) {\n        this.element = element;\n        this.renderer = renderer;\n        this.service = service;\n        this.zone = zone;\n        this.cdr = cdr;\n        this.locked = false;\n        this.firstResize = false;\n    }\n    Object.defineProperty(TableDirective.prototype, \"minWidth\", {\n        get: function () {\n            return this.firstResize ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var obs = this.service\n            .changes.pipe(filter(function (e) { return _this.locked === e.locked; }));\n        this.subscription = obs.pipe(filter(function (e) { return e.type === 'start'; }), tap(this.initState.bind(this)), map(columnsToResize), switchMap(function (take) {\n            return obs.pipe(filter(function (e) { return e.type === 'resizeTable'; }), map(function (e) { return e.delta; }), bufferCount(take));\n        })).subscribe(this.resize.bind(this));\n        this.autoFitSubscription = this.service\n            .registerTable(this.autoFitObservable.bind(this));\n    };\n    TableDirective.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.autoFitSubscription();\n    };\n    TableDirective.prototype.initState = function () {\n        this.firstResize = true;\n        this.originalWidth = offsetWidth(this.element.nativeElement);\n    };\n    TableDirective.prototype.resize = function (deltas) {\n        var delta = deltas.reduce(function (sum, item) { return sum + item; }, 0);\n        this.updateWidth(this.originalWidth + delta);\n    };\n    TableDirective.prototype.updateWidth = function (width) {\n        this.renderer.setStyle(this.element.nativeElement, 'width', width + 'px');\n        this.cdr.detectChanges(); //force CD cycle\n    };\n    TableDirective.prototype.autoFitObservable = function (columnInfo) {\n        var _this = this;\n        return Observable.create(function (observer) {\n            _this.zone.runOutsideAngular(function () {\n                _this.renderer.addClass(_this.element.nativeElement, 'k-autofitting');\n                _this.cdr.detectChanges(); //force CD cycle\n                var widths = columnInfo.map(_this.measureColumn.bind(_this));\n                _this.renderer.removeClass(_this.element.nativeElement, 'k-autofitting');\n                observer.next(widths);\n            });\n        });\n    };\n    TableDirective.prototype.measureColumn = function (info) {\n        var dom = this.element.nativeElement;\n        var header = pipe(headerRow(info.level), cell(info.headerIndex, 'th'), offsetWidth)(dom);\n        var data = 0;\n        if (!info.isParentSpan || (info.isParentSpan && info.isLastInSpan)) {\n            data = pipe(row('tbody>tr:not(.k-grouping-row)'), cell(info.index), offsetWidth)(dom);\n        }\n        var footer = pipe(row('tfoot>tr'), cell(info.index), offsetWidth)(dom);\n        return Math.max(header, data, footer);\n    };\n    return TableDirective;\n}());\nexport { TableDirective };\n",null]}