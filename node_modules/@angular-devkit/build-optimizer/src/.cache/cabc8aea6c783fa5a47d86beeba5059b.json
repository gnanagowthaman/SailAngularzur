{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/services/year-view.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-dateinputs/dist/es/calendar/services/year-view.service.js","mtime":1529128638453},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { addMonths, addYears, cloneDate, createDate, durationInYears, firstMonthOfYear, lastMonthOfYear } from '@progress/kendo-date-math';\nimport { Action } from '../models/navigation-action.enum';\nimport { isInRange, range } from '../../util';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 5;\nvar ROWS_LENGTH = 3;\nvar upStep = function (month) {\n    if (month > 4) {\n        return -5;\n    }\n    if (month < 2) {\n        return -2;\n    }\n    return -7;\n};\nvar downStep = function (month) {\n    if (month < 7) {\n        return 5;\n    }\n    if (month < 10) {\n        return 7;\n    }\n    return 2;\n};\nvar ACTIONS = (_a = {},\n    _a[Action.Left] = function (date) { return addMonths(date, -1); },\n    _a[Action.Up] = function (date) { return addMonths(date, upStep(date.getMonth())); },\n    _a[Action.Right] = function (date) { return addMonths(date, 1); },\n    _a[Action.Down] = function (date) { return addMonths(date, downStep(date.getMonth())); },\n    _a[Action.PrevView] = function (date) { return addYears(date, -1); },\n    _a[Action.NextView] = function (date) { return addYears(date, 1); },\n    _a[Action.FirstInView] = function (date) { return firstMonthOfYear(date); },\n    _a[Action.LastInView] = function (date) { return lastMonthOfYear(date); },\n    _a);\n/**\n * @hidden\n */\nvar YearViewService = /*@__PURE__*/ (function () {\n    function YearViewService(_intlService) {\n        this._intlService = _intlService;\n    }\n    YearViewService.prototype.addToDate = function (min, skip) {\n        return addYears(min, skip);\n    };\n    YearViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addYears(start, i); });\n    };\n    YearViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA;\n        }\n        var months = this.abbrMonthNames();\n        var isSelectedDateInRange = isInRange(selectedDate, min, max);\n        var firstDate = firstMonthOfYear(viewDate);\n        var currentYear = firstDate.getFullYear();\n        var cells = range(0, CELLS_LENGTH);\n        return range(0, ROWS_LENGTH).map(function (rowOffset) {\n            var baseDate = addMonths(firstDate, rowOffset * CELLS_LENGTH);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);\n                var changedYear = currentYear < cellDate.getFullYear();\n                if (!_this.isInRange(cellDate, min, max) || changedYear) {\n                    return null;\n                }\n                return {\n                    formattedValue: months[cellDate.getMonth()],\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isActiveView && isSelectedDateInRange && _this.isEqual(cellDate, selectedDate),\n                    isWeekend: false,\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n            });\n        });\n    };\n    YearViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return candidate.getFullYear() === expected.getFullYear() &&\n            candidate.getMonth() === expected.getMonth();\n    };\n    YearViewService.prototype.isInArray = function (date, dates) {\n        if (!dates.length) {\n            return false;\n        }\n        var year = date.getFullYear();\n        return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();\n    };\n    YearViewService.prototype.isInRange = function (candidate, min, max) {\n        var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);\n        var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;\n        var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);\n        return aboveMin && belowMax;\n    };\n    YearViewService.prototype.isRangeStart = function (value) {\n        return value.getFullYear() % 10 === 0;\n    };\n    YearViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    YearViewService.prototype.cellTitle = function (value) {\n        return value.getFullYear() + \" \" + this.value(value);\n    };\n    YearViewService.prototype.navigationTitle = function (value) {\n        return this.title(value);\n    };\n    YearViewService.prototype.title = function (current) {\n        return current ? current.getFullYear().toString() : '';\n    };\n    YearViewService.prototype.rowLength = function (_) {\n        return CELLS_LENGTH;\n    };\n    YearViewService.prototype.skip = function (value, min) {\n        return durationInYears(min, value);\n    };\n    YearViewService.prototype.total = function (min, max) {\n        return durationInYears(min, max) + 1;\n    };\n    YearViewService.prototype.value = function (current) {\n        return current ? this.abbrMonthNames()[current.getMonth()] : '';\n    };\n    YearViewService.prototype.viewDate = function (date, max, border) {\n        if (border === void 0) {\n            border = 1;\n        }\n        var renderTwoViews = durationInYears(date, max) < border;\n        return renderTwoViews ? addYears(date, -1) : date;\n    };\n    YearViewService.prototype.abbrMonthNames = function () {\n        return this._intlService.dateFormatNames({ nameType: 'abbreviated', type: 'months' });\n    };\n    YearViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return cloneDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return cloneDate(max);\n        }\n        return cellDate;\n    };\n    return YearViewService;\n}());\nexport { YearViewService };\nvar _a;\n",null]}