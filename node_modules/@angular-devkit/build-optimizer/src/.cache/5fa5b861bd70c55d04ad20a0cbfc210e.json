{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/logical-cell.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/navigation/logical-cell.directive.js","mtime":1529128658272},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, HostBinding, Inject, Input, Optional, Renderer2 } from '@angular/core';\nimport { ColumnInfoService } from '../common/column-info.service';\nimport { IdService } from '../common/id.service';\nimport { CELL_CONTEXT } from '../rendering/common/cell-context';\nimport { FocusGroup } from './focus-group';\nimport { FocusRoot } from './focus-root';\nimport { NavigationService } from './navigation.service';\n/**\n * @hidden\n */\nvar LogicalCellDirective = /*@__PURE__*/ (function () {\n    function LogicalCellDirective(focusGroup, element, columnInfoService, idService, navigationService, renderer, cellContext) {\n        this.focusGroup = focusGroup;\n        this.element = element;\n        this.columnInfoService = columnInfoService;\n        this.idService = idService;\n        this.navigationService = navigationService;\n        this.renderer = renderer;\n        this.cellContext = cellContext;\n        this.logicalSlaveCell = false;\n    }\n    Object.defineProperty(LogicalCellDirective.prototype, \"id\", {\n        get: function () {\n            if (!this.logicalSlaveCell && this.columnInfoService.isLocked) {\n                return this.idService.cellId(this.logicalRowIndex, this.logicalColIndex);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogicalCellDirective.prototype, \"ariaColIndex\", {\n        get: function () {\n            if (this.logicalSlaveCell) {\n                return undefined;\n            }\n            return this.logicalColIndex + 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LogicalCellDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.navigationService.enabled) {\n            return;\n        }\n        this.navigationChange = this.navigationService.changes.subscribe(function (e) { return _this.onNavigationChange(e); });\n    };\n    LogicalCellDirective.prototype.ngDoCheck = function () {\n        if (!this.navigationService.enabled) {\n            return;\n        }\n        if (this.cellContext) {\n            this.cellContext.focusGroup = this.focusGroup;\n        }\n    };\n    LogicalCellDirective.prototype.ngOnChanges = function (changes) {\n        if (!this.navigationService.enabled) {\n            return;\n        }\n        if (changes.logicalRowIndex || changes.logicalColIndex || changes.colIndex) {\n            // Ignore groupItem changes as the reference is not stable\n            this.register();\n            this.updateElement();\n        }\n    };\n    LogicalCellDirective.prototype.ngOnDestroy = function () {\n        if (this.navigationChange) {\n            this.navigationChange.unsubscribe();\n        }\n    };\n    LogicalCellDirective.prototype.onNavigationChange = function (e) {\n        var active = this.logicalColIndex === e.colIndex && this.logicalRowIndex === e.rowIndex;\n        var wasActive = this.logicalColIndex === e.prevColIndex && this.logicalRowIndex === e.prevRowIndex;\n        if (active || wasActive) {\n            this.updateElement();\n        }\n    };\n    LogicalCellDirective.prototype.updateElement = function () {\n        var el = this.element.nativeElement;\n        this.renderer.setAttribute(el, 'tabIndex', this.isFocusable() ? '0' : '-1');\n        if (this.isFocused()) {\n            if (this.focusGroup.isNavigable()) {\n                this.focusGroup.focus();\n            }\n            else {\n                el.focus();\n                this.renderer.addClass(el, 'k-state-focused');\n            }\n        }\n        else {\n            this.renderer.removeClass(el, 'k-state-focused');\n        }\n    };\n    LogicalCellDirective.prototype.register = function () {\n        if (!this.logicalSlaveCell) {\n            this.navigationService.registerCell(this);\n        }\n    };\n    LogicalCellDirective.prototype.isFocusable = function () {\n        return this.navigationService.isCellFocusable(this);\n    };\n    LogicalCellDirective.prototype.isFocused = function () {\n        return this.navigationService.isCellFocused(this);\n    };\n    return LogicalCellDirective;\n}());\nexport { LogicalCellDirective };\n",null]}