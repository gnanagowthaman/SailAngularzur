{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/editing/edit.service.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/editing/edit.service.js","mtime":1529128644933},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { isPresent } from '../utils';\nimport { CellCloseEvent } from './cell-close-event';\nimport { Subject } from 'rxjs/Subject';\nimport { debounceTime } from 'rxjs/operators/debounceTime';\n/**\n * @hidden\n */\nvar isEqual = function (index) { return function (item) { return item.index === index; }; };\n/**\n * @hidden\n */\nvar isNotEqual = function (index) { return function (item) { return item.index !== index; }; };\n/**\n * @hidden\n */\nvar isNewRow = function (index) { return index === -1 || index === undefined; };\n/**\n * @hidden\n */\nvar EditService = /*@__PURE__*/ (function () {\n    function EditService(ngZone) {\n        this.ngZone = ngZone;\n        this.changes = new EventEmitter();\n        this.editedIndices = [];\n        this.keepEditCell = false;\n        this.closingCell = false;\n        this.changedSource = new Subject();\n        this.changed = this.changedSource.asObservable().pipe(debounceTime(0));\n    }\n    EditService.prototype.editRow = function (index, group) {\n        if (group === void 0) {\n            group = undefined;\n        }\n        this.editedIndices.push({ index: index, group: group });\n        this.onChanged();\n    };\n    EditService.prototype.addRow = function (group) {\n        this.newItemGroup = { group: group };\n        this.onChanged();\n    };\n    EditService.prototype.editCell = function (rowIndex, column, group) {\n        if (isNewRow(rowIndex) || column.editable === false || !(column.editTemplate || column.field)) {\n            return;\n        }\n        this.preventCellClose();\n        if (!this.closeCell()) {\n            this.editRow(rowIndex, group);\n            this.column = column;\n            this.onChanged();\n        }\n    };\n    EditService.prototype.isEditing = function () {\n        return this.editedIndices.length > 0;\n    };\n    EditService.prototype.isEditingCell = function () {\n        return this.isEditing() && this.column !== undefined;\n    };\n    Object.defineProperty(EditService.prototype, \"hasNewItem\", {\n        get: function () {\n            return isPresent(this.newItemGroup);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditService.prototype, \"newDataItem\", {\n        get: function () {\n            if (this.hasNewItem) {\n                return this.newItemGroup.group.value;\n            }\n            return {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditService.prototype.close = function (index) {\n        if (isNewRow(index)) {\n            this.newItemGroup = undefined;\n            return;\n        }\n        this.editedIndices = this.editedIndices.filter(isNotEqual(index));\n        delete this.column;\n        this.onChanged();\n    };\n    EditService.prototype.closeCell = function (originalEvent) {\n        var _this = this;\n        if (this.column && !this.closingCell) {\n            return this.ngZone.run(function () {\n                var _a = _this.editedIndices[0], index = _a.index, group = _a.group;\n                var args = new CellCloseEvent({\n                    column: _this.column,\n                    formGroup: group,\n                    originalEvent: originalEvent,\n                    rowIndex: index\n                });\n                _this.closingCell = true;\n                _this.changes.emit(args);\n                _this.closingCell = false;\n                if (!args.isDefaultPrevented()) {\n                    _this.cancelCell();\n                }\n                return args.isDefaultPrevented();\n            });\n        }\n    };\n    EditService.prototype.cancelCell = function () {\n        if (this.column) {\n            this.editedIndices = [];\n            delete this.column;\n            this.onChanged();\n        }\n    };\n    EditService.prototype.shouldCloseCell = function () {\n        return this.column && !this.keepEditCell;\n    };\n    EditService.prototype.preventCellClose = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            window.clearTimeout(_this.keepCellTimeout);\n            _this.keepEditCell = true;\n            _this.keepCellTimeout = window.setTimeout(function () {\n                _this.keepEditCell = false;\n            }, 0); // tslint:disable-line:align\n        });\n    };\n    EditService.prototype.context = function (index) {\n        if (isNewRow(index)) {\n            return this.newItemGroup;\n        }\n        return this.findByIndex(index);\n    };\n    EditService.prototype.columnContext = function (index, column) {\n        if (isNewRow(index)) {\n            return this.newItemGroup;\n        }\n        if (!this.column || column === this.column) {\n            return this.findByIndex(index);\n        }\n    };\n    EditService.prototype.isEdited = function (index) {\n        if (isNewRow(index) && isPresent(this.newItemGroup)) {\n            return true;\n        }\n        return !this.column && isPresent(this.findByIndex(index));\n    };\n    EditService.prototype.hasEdited = function (index) {\n        return isPresent(this.context(index));\n    };\n    EditService.prototype.isEditedColumn = function (index, column) {\n        if (this.column && this.column === column) {\n            return isPresent(this.findByIndex(index));\n        }\n        return false;\n    };\n    EditService.prototype.beginEdit = function (rowIndex) {\n        this.changes.emit({ action: 'edit', rowIndex: rowIndex });\n    };\n    EditService.prototype.beginAdd = function () {\n        this.changes.emit({ action: 'add' });\n    };\n    EditService.prototype.endEdit = function (rowIndex) {\n        var formGroup = this.context(rowIndex).group;\n        this.changes.emit({ action: 'cancel', rowIndex: rowIndex, formGroup: formGroup, isNew: isNewRow(rowIndex) });\n    };\n    EditService.prototype.save = function (rowIndex) {\n        var formGroup = this.context(rowIndex).group;\n        this.changes.emit({ action: 'save', rowIndex: rowIndex, formGroup: formGroup, isNew: isNewRow(rowIndex) });\n    };\n    EditService.prototype.remove = function (rowIndex) {\n        this.changes.emit({ action: 'remove', rowIndex: rowIndex });\n    };\n    EditService.prototype.findByIndex = function (index) {\n        return this.editedIndices.find(isEqual(index));\n    };\n    EditService.prototype.onChanged = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            _this.changedSource.next();\n        });\n    };\n    return EditService;\n}());\nexport { EditService };\n",null]}