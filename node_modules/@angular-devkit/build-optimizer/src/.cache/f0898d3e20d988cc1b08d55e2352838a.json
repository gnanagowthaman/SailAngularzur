{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/columns/column-common.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/columns/column-common.js","mtime":1529128638584},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { isSpanColumnComponent } from \"./span-column.component\";\nimport { isNullOrEmptyString, isTruthy } from \"../utils\";\nimport { orderBy } from '@progress/kendo-data-query';\n/**\n * @hidden\n */\nexport var expandColumns = function (columns) { return (columns.reduce(function (acc, column) { return acc.concat(isSpanColumnComponent(column) ? column.childColumns.toArray() : [column]); }, []) // tslint:disable-line:align\n); };\n/**\n * @hidden\n */\nexport var expandColumnsWithSpan = function (columns) { return (columns.reduce(function (acc, column) { return acc.concat(isSpanColumnComponent(column) ?\n    [column].concat(column.childColumns.toArray()) :\n    [column]); }, []) // tslint:disable-line:align\n); };\n/**\n * @hidden\n */\nexport var columnsToRender = function (columns) { return (expandColumns(columns).filter(function (x) { return x.isVisible; })); };\nvar sumProp = function (prop) { return function (array) {\n    return (array || []).reduce(function (prev, curr) { return prev + (curr[prop] || 0); }, 0);\n}; };\n/**\n * @hidden\n */\nexport var sumColumnWidths = sumProp('width');\n/**\n * @hidden\n */\nexport var columnsSpan = sumProp('colspan');\n// tslint:disable-next-line:max-line-length\nvar validField = new RegExp(\"^[$A-Z_a-z][$A-Z_a-z0-9\\\\.]*$\");\n/**\n * @hidden\n */\nexport var isValidFieldName = function (fieldName) {\n    return !isNullOrEmptyString(fieldName) && validField.test(fieldName) &&\n        fieldName[0] !== \".\" && fieldName[fieldName.length - 1] !== \".\";\n};\n/**\n * @hidden\n */\nexport var children = function (column) { return column.children.filter(function (child) { return child !== column; }); };\n/**\n * @hidden\n */\nexport var leafColumns = function (columns) {\n    return columns.reduce(function (acc, column) {\n        if (column.isColumnGroup) {\n            acc = acc.concat(leafColumns(children(column)));\n        }\n        else if (column.isSpanColumn) {\n            acc = acc.concat(column.childColumns.toArray());\n        }\n        else {\n            acc.push(column);\n        }\n        return acc;\n    }, []).filter(function (x) { return x.isVisible; }); // tslint:disable-line:align\n};\n/**\n * @hidden\n */\nexport var resizableColumns = function (columns) { return columns.filter(function (column) { return isTruthy(column.resizable); }); };\n/**\n * @hidden\n */\nexport var sortColumns = function (columns) {\n    return orderBy(columns, [{ field: 'orderIndex', dir: 'asc' }]);\n};\n/**\n * @hidden\n */\nexport var isInSpanColumn = function (column) {\n    return isTruthy(column.parent) && isSpanColumnComponent(column.parent);\n};\n",null]}