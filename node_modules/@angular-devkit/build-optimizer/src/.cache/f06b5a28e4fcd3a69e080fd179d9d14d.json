{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-intl/dist/es/date.pipe.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-intl/dist/es/date.pipe.js","mtime":1529128637327},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Pipe } from '@angular/core';\nimport { IntlService } from './intl.service';\nvar isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the IntlService.\n * @see IntlService\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\nvar DatePipe = /*@__PURE__*/ (function () {\n    /**\n     * @hidden\n     */\n    function DatePipe(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Date` object to a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n     * @return - The formatted date.\n     */\n    DatePipe.prototype.transform = function (value, format, localeId) {\n        if (format === void 0) {\n            format = \"\";\n        }\n        value = this.normalize(value);\n        if (value) {\n            return this.intlService.formatDate(value, format, localeId);\n        }\n        return value;\n    };\n    DatePipe.prototype.normalize = function (value) {\n        if (value && typeof value === 'string') {\n            value = this.intlService.parseDate(value);\n        }\n        else if (value && isNumeric(value)) {\n            value = new Date(parseFloat(value));\n        }\n        return value;\n    };\n    return DatePipe;\n}());\nexport { DatePipe };\n",null]}