{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/editing-directives/in-cell-editing.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/editing-directives/in-cell-editing.directive.js","mtime":1529128643634},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport { Directive, Input } from '@angular/core';\nimport { EditingDirectiveBase } from './editing-directive-base';\nimport { GridComponent } from '../grid.component';\nimport { LocalDataChangesService } from '../editing/local-data-changes.service';\nimport { markAllAsTouched } from './utils';\n/**\n * A directive which encapsulates the editing operations of the Grid when using the in-cell editing with Reactive Forms.\n */\nvar InCellEditingDirective = (function (_super) {\n    tslib_1.__extends(InCellEditingDirective, _super);\n    function InCellEditingDirective(grid, localDataChangesService) {\n        var _this = _super.call(this, grid, localDataChangesService) || this;\n        _this.grid = grid;\n        _this.localDataChangesService = localDataChangesService;\n        return _this;\n    }\n    // Need mixin\n    InCellEditingDirective.prototype.createModel = function (args) {\n        return this.createFormGroup(args);\n    };\n    InCellEditingDirective.prototype.saveModel = function (_a) {\n        var dataItem = _a.dataItem, formGroup = _a.formGroup, isNew = _a.isNew;\n        if (!formGroup.dirty && !isNew) {\n            return;\n        }\n        if (formGroup.valid) {\n            this.editService.assignValues(dataItem, formGroup.value);\n            return dataItem;\n        }\n        markAllAsTouched(formGroup);\n    };\n    /**\n     * @hidden\n     */\n    InCellEditingDirective.prototype.ngOnInit = function () {\n        _super.prototype.ngOnInit.call(this);\n        this.subscriptions\n            .add(this.grid.cellClick.subscribe(this.cellClickHandler.bind(this)))\n            .add(this.grid.cellClose.subscribe(this.cellCloseHandler.bind(this)));\n    };\n    InCellEditingDirective.prototype.removeHandler = function (args) {\n        _super.prototype.removeHandler.call(this, args);\n        this.grid.cancelCell();\n    };\n    InCellEditingDirective.prototype.cellClickHandler = function (args) {\n        if (!args.isEdited && args.type !== 'contextmenu') {\n            this.grid.editCell(args.rowIndex, args.columnIndex, this.createFormGroup(args));\n        }\n    };\n    InCellEditingDirective.prototype.cellCloseHandler = function (args) {\n        var formGroup = args.formGroup, dataItem = args.dataItem;\n        if (!formGroup.valid) {\n            args.preventDefault();\n        }\n        else if (formGroup.dirty) {\n            this.editService.assignValues(dataItem, formGroup.value);\n            this.editService.update(dataItem);\n        }\n    };\n    return InCellEditingDirective;\n}(EditingDirectiveBase));\nexport { InCellEditingDirective };\n",null]}