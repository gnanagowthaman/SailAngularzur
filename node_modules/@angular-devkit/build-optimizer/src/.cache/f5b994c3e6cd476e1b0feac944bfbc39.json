{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selection-checkbox.directive.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/selection/selection-checkbox.directive.js","mtime":1529128667307},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/* tslint:disable:no-input-rename */\nimport { Directive, HostBinding, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SelectionService } from './selection.service';\n/**\n * Represents the row-selection checkbox of the Grid.\n * The directive expects the index of the current row as an input parameter.\n * Inside the [`CheckboxColumnComponent`]({% slug api_grid_checkboxcolumncomponent %}),\n * apply the directive to an `input` element.\n * When the user clicks the checkbox that is associated with the directive,\n * a [`selectionChange`]({% slug api_grid_gridcomponent %}#toc-selectionChange) event is triggered.\n *\n * @example\n * ```html-no-run\n * <kendo-grid>\n *   <kendo-grid-checkbox-column title=\"Custom checkbox\">\n *     <ng-template kendoGridCellTemplate let-idx=\"rowIndex\">\n *       <input [kendoGridSelectionCheckbox]=\"idx\" />\n *     </ng-template>\n *   </kendo-grid-checkbox-column>\n * </kendo-grid>\n * ```\n */\nvar SelectionCheckboxDirective = /*@__PURE__*/ (function () {\n    function SelectionCheckboxDirective(selectionService, el, renderer) {\n        this.selectionService = selectionService;\n        this.el = el;\n        this.renderer = renderer;\n        this.type = \"checkbox\";\n        this.destroyClick = this.renderer.listen(this.el.nativeElement, \"click\", this.onClick.bind(this));\n    }\n    SelectionCheckboxDirective.prototype.ngAfterContentChecked = function () {\n        this.setCheckedState();\n    };\n    SelectionCheckboxDirective.prototype.ngOnDestroy = function () {\n        if (this.destroyClick) {\n            this.destroyClick();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SelectionCheckboxDirective.prototype.onClick = function () {\n        if (this.selectionService.options.enabled) {\n            var ev = this.selectionService.toggleByIndex(this.itemIndex);\n            ev.ctrlKey = true;\n            ev.shiftKey = false;\n            //Setting the deprecated `index` and `selected` properties\n            ev.index = this.itemIndex;\n            ev.selected = ev.selectedRows.length > ev.deselectedRows.length;\n            this.selectionService.changes.emit(ev);\n        }\n    };\n    /*\n     * @hidden\n     */\n    SelectionCheckboxDirective.prototype.setCheckedState = function () {\n        this.renderer.setProperty(this.el.nativeElement, \"checked\", this.selectionService.isSelected(this.itemIndex));\n    };\n    return SelectionCheckboxDirective;\n}());\nexport { SelectionCheckboxDirective };\n",null]}