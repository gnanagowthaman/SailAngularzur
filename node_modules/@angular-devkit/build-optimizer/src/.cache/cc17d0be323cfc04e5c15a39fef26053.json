{"remainingRequest":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/rendering/list.component.js","dependencies":[{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@progress/kendo-angular-grid/dist/es/rendering/list.component.js","mtime":1529128665241},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/cache-loader/dist/cjs.js","mtime":1529128679567},{"path":"/home/vahai/Desktop/jun16/SailAngularzur/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, HostBinding, ViewChild, Inject, InjectionToken, QueryList, NgZone, Renderer2, ViewChildren } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { delay } from 'rxjs/operators/delay';\nimport { map } from 'rxjs/operators/map';\nimport { filter } from 'rxjs/operators/filter';\nimport { tap } from 'rxjs/operators/tap';\nimport { take } from 'rxjs/operators/take';\nimport { switchMapTo } from 'rxjs/operators/switchMapTo';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { RowHeightService } from '../scrolling/row-height.service';\nimport { ScrollerService, PageAction, ScrollAction } from '../scrolling/scroller.service';\nimport { ScrollRequestService } from '../scrolling/scroll-request.service';\nimport { isChanged, isPresent, isUniversal, anyChanged } from '../utils';\nimport { DetailsService } from './details/details.service';\nimport { ColumnsContainer } from '../columns/columns-container';\nimport { ChangeNotificationService } from '../data/change-notification.service';\nimport { syncRowsHeight } from '../layout/row-sync';\nimport { SuspendService } from '../scrolling/suspend.service';\nimport { GroupsService } from \"../grouping/groups.service\";\nimport { expandColumns, sumColumnWidths } from \"../columns/column-common\";\nimport { ScrollSyncService } from \"../scrolling/scroll-sync.service\";\nimport { ResizeService } from \"../layout/resize.service\";\nimport { ResizeSensorComponent } from \"@progress/kendo-angular-resize-sensor\";\nimport { BrowserSupportService } from \"../layout/browser-support.service\";\nimport { EditService } from '../editing/edit.service';\nimport { NavigationService } from '../navigation/navigation.service';\n/**\n * @hidden\n */\nexport var SCROLLER_FACTORY_TOKEN = new InjectionToken('grid-scroll-service-factory');\n/**\n * @hidden\n */\nexport function DEFAULT_SCROLLER_FACTORY(observable) {\n    return new ScrollerService(observable);\n}\nvar wheelDeltaY = function (e) {\n    var deltaY = e.wheelDeltaY;\n    if (e.wheelDelta && (deltaY === undefined || deltaY)) {\n        return e.wheelDelta;\n    }\n    else if (e.detail && e.axis === e.VERTICAL_AXIS) {\n        return (-e.detail) * 10;\n    }\n    return 0;\n};\nvar preventLockedScroll = function (el) {\n    return function (event) {\n        if (el.scrollHeight > el.offsetHeight + el.scrollTop && el.scrollTop > 0) {\n            event.preventDefault();\n        }\n    };\n};\nvar translateY = function (renderer, value) { return function (el) { return renderer.setStyle(el, \"transform\", \"translateY(\" + value + \"px)\"); }; };\nvar maybeNativeElement = function (el) { return el ? el.nativeElement : null; };\nvar hasScrollbar = function (el, parent) { return el.nativeElement.offsetWidth > parent.nativeElement.clientWidth; };\nvar setHeight = function (renderer) {\n    return function (_a) {\n        var el = _a.el, height = _a.height;\n        return renderer.setStyle(el, \"height\", height + \"px\");\n    };\n};\n/**\n * @hidden\n */\nvar ListComponent = /*@__PURE__*/ (function () {\n    function ListComponent(scrollerFactory, detailsService, changeNotification, suspendService, groupsService, ngZone, renderer, scrollSyncService, resizeService, editService, supportService, navigationService, scrollRequestService, localization) {\n        var _this = this;\n        this.changeNotification = changeNotification;\n        this.suspendService = suspendService;\n        this.groupsService = groupsService;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.scrollSyncService = scrollSyncService;\n        this.resizeService = resizeService;\n        this.editService = editService;\n        this.navigationService = navigationService;\n        this.localization = localization;\n        this.groups = [];\n        this.skip = 0;\n        this.columns = new ColumnsContainer(function () { return []; });\n        this.selectable = false;\n        this.groupable = false;\n        this.pageChange = new EventEmitter();\n        this.resizeSensors = new QueryList();\n        this.dispatcher = new Subject();\n        this.rtl = false;\n        this.scroller = scrollerFactory(this.dispatcher);\n        this.subscriptions =\n            detailsService.changes.subscribe(function (x) { return _this.detailExpand(x); }).add(scrollRequestService.requests.subscribe(function (x) { return _this.scrollTo(x); }));\n        this.scrollbarWidth = supportService.scrollbarWidth;\n    }\n    Object.defineProperty(ListComponent.prototype, \"hostClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"hostRole\", {\n        get: function () {\n            return 'presentation';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"showFooter\", {\n        get: function () {\n            return this.groupable && this.groupable.showFooter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"lockedLeafColumns\", {\n        get: function () {\n            return this.columns.lockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"nonLockedLeafColumns\", {\n        get: function () {\n            return this.columns.nonLockedLeafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"leafColumns\", {\n        get: function () {\n            return this.columns.leafColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"lockedWidth\", {\n        get: function () {\n            var groupCellsWidth = this.groups.length * 30;\n            return expandColumns(this.lockedLeafColumns.toArray()).reduce(function (prev, curr) { return prev + (curr.width || 0); }, groupCellsWidth);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"nonLockedWidth\", {\n        get: function () {\n            if (!this.rtl && this.lockedLeafColumns.length) {\n                return sumColumnWidths(expandColumns(this.nonLockedLeafColumns.toArray()));\n            }\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ListComponent.prototype, \"isLocked\", {\n        get: function () {\n            return this.lockedLeafColumns.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.init();\n        this.subscriptions.add(this.ngZone.runOutsideAngular(this.handleRowSync.bind(this)));\n        this.subscriptions.add(this.ngZone.runOutsideAngular(this.handleRowNavigationLocked.bind(this)));\n        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.rtl = rtl;\n        }));\n    };\n    ListComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged(\"skip\", changes) && !this.rebind) {\n            this.skipScroll = true;\n            this.container.nativeElement.scrollTop = this.rowHeightService.offset(this.skip);\n        }\n        if (anyChanged([\"total\", \"take\"], changes)) {\n            this.init();\n        }\n        this.rebind = false;\n    };\n    ListComponent.prototype.ngAfterViewInit = function () {\n        this.container.nativeElement.scrollTop = this.rowHeightService.offset(this.skip);\n        this.resetNavigationViewport();\n        this.attachContainerScroll();\n        this.initResizeService();\n    };\n    ListComponent.prototype.syncRowsHeight = function () {\n        if (this.lockedContainer) {\n            syncRowsHeight(this.lockedTable.nativeElement, this.table.nativeElement);\n        }\n    };\n    ListComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n        if (this.resizeService) {\n            this.resizeService.destroy();\n        }\n        this.cleanupScroller();\n    };\n    ListComponent.prototype.init = function () {\n        if (this.suspendService.scroll) {\n            return;\n        }\n        this.rowHeightService = new RowHeightService(this.total, this.rowHeight, this.detailRowHeight);\n        this.totalHeight = this.rowHeightService.totalHeight();\n        if (!isUniversal()) {\n            this.ngZone.runOutsideAngular(this.createScroller.bind(this));\n        }\n    };\n    ListComponent.prototype.detailExpand = function (_a) {\n        var index = _a.index, expand = _a.expand;\n        if (expand) {\n            this.rowHeightService.expandDetail(index);\n        }\n        else {\n            this.rowHeightService.collapseDetail(index);\n        }\n        this.totalHeight = this.rowHeightService.totalHeight();\n    };\n    ListComponent.prototype.attachContainerScroll = function () {\n        var _this = this;\n        if (isUniversal()) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(function () {\n            return _this.subscriptions.add(fromEvent(_this.container.nativeElement, 'scroll').pipe(map(function (event) { return event.target; }), filter(function () { return !_this.suspendService.scroll; }), tap(_this.onContainerScroll.bind(_this)), tap(function () { return _this.resetNavigationViewport(); })).subscribe(_this.dispatcher));\n        });\n        this.scrollSyncService.registerEmitter(this.container.nativeElement, \"body\");\n        if (this.lockedContainer) {\n            this.ngZone.runOutsideAngular(function () {\n                _this.subscriptions.add(merge(fromEvent(_this.lockedContainer.nativeElement, 'mousewheel'), fromEvent(_this.lockedContainer.nativeElement, 'DOMMouseScroll')).pipe(filter(function (event) { return !event.ctrlKey; }), tap(preventLockedScroll(_this.container.nativeElement)), map(wheelDeltaY))\n                    .subscribe(function (x) { return _this.container.nativeElement.scrollTop -= x; }));\n                _this.subscriptions.add(fromEvent(_this.lockedContainer.nativeElement, 'keydown').pipe(filter(function (event) { return event.keyCode === 34 /* page_down */ || event.keyCode === 33 /* page_up */; })).subscribe(function (event) {\n                    var dir = event.keyCode === 34 /* page_down */ ? 1 : -1;\n                    var element = _this.container.nativeElement;\n                    element.scrollTop += element.offsetHeight * dir * 0.8;\n                    event.preventDefault();\n                }));\n            });\n            this.syncRowsHeight();\n        }\n    };\n    ListComponent.prototype.createScroller = function () {\n        var _this = this;\n        this.cleanupScroller();\n        var observable = this.scroller\n            .create(this.rowHeightService, this.skip, this.take, this.total);\n        this.skipScroll = false;\n        this.scrollerSubscription = observable.pipe(filter(function (x) { return x instanceof PageAction; }), filter(function () {\n            var temp = _this.skipScroll;\n            _this.skipScroll = false;\n            return !temp;\n        }), tap(function () { return _this.rebind = true; }))\n            .subscribe(function (x) { return _this.ngZone.run(function () { return _this.pageChange.emit(x); }); })\n            .add(observable.pipe(filter(function (x) { return x instanceof ScrollAction; }))\n            .subscribe(this.scroll.bind(this)));\n    };\n    ListComponent.prototype.scroll = function (_a) {\n        var _b = _a.offset, offset = _b === void 0 ? 0 : _b;\n        [\n            maybeNativeElement(this.table),\n            maybeNativeElement(this.lockedTable)\n        ].filter(isPresent).forEach(translateY(this.renderer, offset));\n        this.resetNavigationViewport();\n    };\n    ListComponent.prototype.onContainerScroll = function (_a) {\n        var scrollTop = _a.scrollTop;\n        if (this.lockedContainer) {\n            this.lockedContainer.nativeElement.scrollTop = scrollTop;\n        }\n    };\n    ListComponent.prototype.handleRowSync = function () {\n        var _this = this;\n        var isLocked = function () { return isPresent(_this.lockedContainer); };\n        return merge(this.changeNotification.changes, this.groupsService.changes\n            .pipe(filter(isLocked), switchMapTo(this.ngZone.onStable.asObservable().pipe(take(1)))), this.editService.changed, this.resizeService.changes).pipe(tap(function () { return _this.resetNavigationViewport(); }), filter(isLocked))\n            .subscribe(function () {\n            var scrollTop = _this.container.nativeElement.scrollTop;\n            _this.syncContainerHeight();\n            _this.syncRowsHeight();\n            _this.lockedContainer.nativeElement.scrollTop = _this.container.nativeElement.scrollTop = scrollTop;\n            _this.resizeSensors.forEach(function (sensor) { return sensor.acceptSize(); });\n        });\n    };\n    ListComponent.prototype.handleRowNavigationLocked = function () {\n        var _this = this;\n        return this.navigationService.changes.pipe(filter(function () { return isPresent(_this.lockedContainer); }), delay(10))\n            .subscribe(function (args) {\n            if (args.colIndex + 1 <= _this.lockedLeafColumns.length) {\n                _this.container.nativeElement.scrollTop = _this.lockedContainer.nativeElement.scrollTop;\n                if (args.prevColIndex + 1 > _this.lockedLeafColumns.length) {\n                    // Scroll the first non-locked column into view after navigating back in the locked columns\n                    _this.container.nativeElement.scrollLeft = 0;\n                }\n            }\n            else {\n                _this.lockedContainer.nativeElement.scrollTop = _this.container.nativeElement.scrollTop;\n            }\n        });\n    };\n    ListComponent.prototype.scrollTo = function (_a) {\n        var itemIndex = _a.itemIndex;\n        var offset = this.rowHeightService.offset(itemIndex) || 0;\n        this.container.nativeElement.scrollTop = offset;\n        this.resetNavigationViewport();\n    };\n    ListComponent.prototype.resetNavigationViewport = function () {\n        if (!this.container || !this.navigationService.needsViewport()) {\n            return;\n        }\n        var _a = this.container.nativeElement, scrollTop = _a.scrollTop, offsetHeight = _a.offsetHeight;\n        var firstItemIndex = this.rowHeightService.index(scrollTop);\n        var lastItemIndex = this.rowHeightService.index(scrollTop + offsetHeight);\n        if (this.rowHeightService.offset(lastItemIndex) + this.rowHeightService.height(lastItemIndex) > scrollTop + offsetHeight) {\n            lastItemIndex--;\n        }\n        this.navigationService.setViewport(firstItemIndex, lastItemIndex);\n    };\n    ListComponent.prototype.cleanupScroller = function () {\n        if (this.scrollerSubscription) {\n            this.scrollerSubscription.unsubscribe();\n        }\n        if (this.scroller) {\n            this.scroller.destroy();\n        }\n    };\n    ListComponent.prototype.initResizeService = function () {\n        this.resizeService.connect(merge.apply(void 0, this.resizeSensors.map(function (sensor) { return sensor.resize; })));\n    };\n    ListComponent.prototype.syncContainerHeight = function () {\n        var _this = this;\n        [maybeNativeElement(this.lockedContainer)]\n            .filter(isPresent)\n            .map(function (el) {\n            var height = _this.container.nativeElement.offsetHeight;\n            if (hasScrollbar(_this.table, _this.container)) {\n                height -= _this.scrollbarWidth;\n            }\n            return { el: el, height: height };\n        })\n            .forEach(setHeight(this.renderer));\n    };\n    return ListComponent;\n}());\nexport { ListComponent };\n",null]}